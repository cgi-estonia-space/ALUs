/**
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option)
 * any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see http://www.gnu.org/licenses/
 */
#include <vector>

#include "gmock/gmock.h"

#include "terrain_correction_metadata.h"

#include "orbit_state_vector.h"
#include "product_data_utc.h"

namespace {

using ::testing::DoubleEq;
using ::testing::Eq;
using ::testing::FloatEq;
using ::testing::SizeIs;

using alus::snapengine::OrbitStateVector;
using alus::snapengine::Utc;
using alus::terraincorrection::Metadata;

TEST(TerrainCorrection, ParsesMetadataCorrectlyForSaaremaa1) {
    const std::string main_metadata_file{
        "goods/terrain_correction/"
        "S1A_IW_SLC__1SDV_20190715T160437_20190715T160504_028130_032D5B_58D6_Orb_Stack_coh_deb_data/"
        "S1A_IW_SLC__1SDV_20190715T160437_20190715T160504_028130_032D5B_58D6_Orb_Stack_coh_deb.dim"};
    const std::string lat_tie_points_file{
        "goods/terrain_correction/"
        "S1A_IW_SLC__1SDV_20190715T160437_20190715T160504_028130_032D5B_58D6_Orb_Stack_coh_deb_data/latitude.img"};
    const std::string lon_tie_points_file{
        "goods/terrain_correction/"
        "S1A_IW_SLC__1SDV_20190715T160437_20190715T160504_028130_032D5B_58D6_Orb_Stack_coh_deb_data/longitude.img"};

    const std::vector<float> expected_lat_tie_points = {
        58.213176727294920, 58.223548889160156, 58.233741760253906, 58.243762969970700, 58.253620147705080,
        58.263313293457030, 58.272853851318360, 58.282241821289060, 58.291488647460940, 58.300598144531250,
        58.309570312500000, 58.318412780761720, 58.327129364013670, 58.335720062255860, 58.344196319580080,
        58.352554321289060, 58.360801696777344, 58.368938446044920, 58.376968383789060, 58.384895324707030,
        58.392719268798830, 58.249801635742190, 58.260181427001950, 58.270381927490234, 58.280406951904300,
        58.290267944335940, 58.299968719482420, 58.309513092041016, 58.318908691406250, 58.328159332275390,
        58.337272644042970, 58.346248626708984, 58.355094909667970, 58.363815307617190, 58.372413635253906,
        58.380889892578125, 58.389255523681640, 58.397502899169920, 58.405643463134766, 58.413677215576170,
        58.421607971191406, 58.429439544677734, 58.286430358886720, 58.296813964843750, 58.307022094726560,
        58.317050933837890, 58.326919555664060, 58.336624145507810, 58.346172332763670, 58.355571746826170,
        58.364830017089844, 58.373947143554690, 58.382926940917970, 58.391780853271484, 58.400505065917970,
        58.409103393554690, 58.417587280273440, 58.425952911376950, 58.434207916259766, 58.442352294921875,
        58.450389862060550, 58.458324432373050, 58.466156005859375, 58.323055267333984, 58.333450317382810,
        58.343658447265625, 58.353698730468750, 58.363567352294920, 58.373279571533200, 58.382831573486330,
        58.392238616943360, 58.401500701904300, 58.410621643066406, 58.419605255126950, 58.428462982177734,
        58.437191009521484, 58.445796966552734, 58.454284667968750, 58.462654113769530, 58.470912933349610,
        58.479061126708984, 58.487102508544920, 58.495040893554690, 58.502876281738280, 58.359683990478516,
        58.370082855224610, 58.380298614501950, 58.390342712402344, 58.400218963623050, 58.409931182861330,
        58.419494628906250, 58.428901672363280, 58.438167572021484, 58.447296142578125, 58.456287384033200,
        58.465145111083984, 58.473880767822266, 58.482490539550780, 58.490978240966800, 58.499355316162110,
        58.507614135742190, 58.515766143798830, 58.523811340332030, 58.531753540039060, 58.539592742919920,
        58.396308898925780, 58.406711578369140, 58.416934967041016, 58.426982879638670, 58.436862945556640,
        58.446586608886720, 58.456150054931640, 58.465564727783200, 58.474834442138670, 58.483966827392580,
        58.492961883544920, 58.501827239990234, 58.510562896728516, 58.519180297851560, 58.527671813964844,
        58.536052703857420, 58.544315338134766, 58.552471160888670, 58.560520172119140, 58.568466186523440,
        58.576309204101560};

    const std::vector<float> expected_lon_tie_points = {
        21.985961914062500, 22.075984954833984, 22.165037155151367, 22.253160476684570, 22.340394973754883,
        22.426778793334960, 22.512342453002930, 22.597120285034180, 22.681142807006836, 22.764436721801758,
        22.847030639648438, 22.928949356079100, 23.010215759277344, 23.090854644775390, 23.170883178710938,
        23.250326156616210, 23.329200744628906, 23.407526016235350, 23.485319137573242, 23.562595367431640,
        23.639371871948242, 21.970470428466797, 22.060586929321290, 22.149732589721680, 22.237947463989258,
        22.325275421142578, 22.411746978759766, 22.497400283813477, 22.582267761230470, 22.666378021240234,
        22.749759674072266, 22.832441329956055, 22.914443969726562, 22.995796203613280, 23.076519012451172,
        23.156633377075195, 23.236160278320312, 23.315116882324220, 23.393524169921875, 23.471397399902344,
        23.548755645751953, 23.625612258911133, 21.954977035522460, 22.045188903808594, 22.134426116943360,
        22.222734451293945, 22.310153961181640, 22.396717071533203, 22.482460021972656, 22.567415237426758,
        22.651613235473633, 22.735082626342773, 22.817850112915040, 22.899940490722656, 22.981376647949220,
        23.062185287475586, 23.142381668090820, 23.221992492675780, 23.301033020019530, 23.379522323608400,
        23.457477569580078, 23.534915924072266, 23.611854553222656, 21.939485549926758, 22.029788970947266,
        22.119121551513672, 22.207523345947266, 22.295032501220703, 22.381685256958008, 22.467517852783203,
        22.552562713623047, 22.636848449707030, 22.720405578613280, 22.803258895874023, 22.885435104370117,
        22.966957092285156, 23.047849655151367, 23.128131866455078, 23.207824707031250, 23.286947250366210,
        23.365518569946290, 23.443555831909180, 23.521076202392578, 23.598094940185547, 21.923992156982422,
        22.014390945434570, 22.103816986083984, 22.192310333251953, 22.279911041259766, 22.366655349731445,
        22.452577590942383, 22.537710189819336, 22.622085571289062, 22.705728530883790, 22.788669586181640,
        22.870931625366210, 22.952537536621094, 23.033514022827150, 23.113880157470703, 23.193656921386720,
        23.272863388061523, 23.351516723632812, 23.429636001586914, 23.507238388061523, 23.584337234497070,
        21.908441543579100, 21.998935699462890, 22.088455200195312, 22.177040100097656, 22.264732360839844,
        22.351568222045900, 22.437580108642578, 22.522804260253906, 22.607265472412110, 22.690998077392578,
        22.774024963378906, 22.856372833251953, 22.938066482543945, 23.019128799438477, 23.099578857421875,
        23.179439544677734, 23.258728027343750, 23.337465286254883, 23.415666580200195, 23.493349075317383,
        23.570529937744140};

    const auto metadata = Metadata(main_metadata_file, lat_tie_points_file, lon_tie_points_file);

    const auto& lat_tie_points = metadata.GetLatTiePointGrid();
    const auto& lon_tie_points = metadata.GetLonTiePointGrid();
    const size_t expected_width{21};
    const size_t expected_height{6};
    EXPECT_THAT(lat_tie_points->GetGridWidth(), Eq(expected_width));
    EXPECT_THAT(lat_tie_points->GetGridHeight(), Eq(expected_height));

    for (size_t i = 0; i < expected_lat_tie_points.size(); i++) {
        EXPECT_THAT(lat_tie_points->GetGridData()->GetElemFloatAt(i), FloatEq(expected_lat_tie_points[i]));
    }

    for (size_t i = 0; i < expected_lon_tie_points.size(); i++) {
        EXPECT_THAT(lon_tie_points->GetGridData()->GetElemFloatAt(i), FloatEq(expected_lon_tie_points[i]));
    }

    const auto& metadata_fields = metadata.GetMetadata();
    EXPECT_THAT(metadata_fields.range_spacing, DoubleEq(2.329562));
    EXPECT_THAT(metadata_fields.first_near_lat, DoubleEq(58.21324157714844));
    EXPECT_THAT(metadata_fields.first_near_long, DoubleEq(21.98597526550293));
    EXPECT_THAT(metadata_fields.first_far_lat, DoubleEq(58.392906188964844));
    EXPECT_THAT(metadata_fields.first_far_long, DoubleEq(23.64056968688965));
    EXPECT_THAT(metadata_fields.last_near_lat, DoubleEq(58.3963737487793));
    EXPECT_THAT(metadata_fields.last_near_long, DoubleEq(21.90845489501953));
    EXPECT_THAT(metadata_fields.last_far_lat, DoubleEq(58.57649612426758));
    EXPECT_THAT(metadata_fields.last_far_long, DoubleEq(23.571735382080078));

    EXPECT_THAT(metadata_fields.avg_scene_height, DoubleEq(23.65084248584435));
    EXPECT_THAT(metadata_fields.line_time_interval, DoubleEq(0.002055556299999998));

    EXPECT_THAT(metadata_fields.slant_range_to_first_pixel, DoubleEq(799303.6132771898));

    EXPECT_THAT(metadata_fields.radar_frequency, DoubleEq(5405.000454334349));

    const auto expected_first_line_time = Utc::Parse("15-JUL-2019 16:04:43.800577");
    const auto expected_last_line_time = Utc::Parse("15-JUL-2019 16:04:46.885967");
    EXPECT_THAT(metadata_fields.first_line_time->GetMjd(), DoubleEq(expected_first_line_time->GetMjd()));
    EXPECT_THAT(metadata_fields.last_line_time->GetMjd(), DoubleEq(expected_last_line_time->GetMjd()));

    EXPECT_THAT(metadata_fields.azimuth_spacing, DoubleEq(13.91157));

    std::vector<OrbitStateVector> const expected_orbit_state_vectors{
        {std::make_shared<Utc>(7135, 57873, 800577), 3727040.7077331543, 1103842.85256958, 5902738.6076049805,
         -5180.233733266592, -3857.165526404977, 3982.913521885872},
        {std::make_shared<Utc>(7135, 57874, 800577), 3721858.106201172, 1099985.447479248, 5906718.189788818,
         -5184.967764496803, -3857.643955528736, 3976.251023232937},
        {std::make_shared<Utc>(7135, 57875, 800577), 3716670.7736206055, 1096127.5664367676, 5910691.107452393,
         -5189.69604575634, -3858.1173707023263, 3969.5840579867363},
        {std::make_shared<Utc>(7135, 57876, 800577), 3711478.7157592773, 1092269.2145080566, 5914657.356109619,
         -5194.418571084738, -3858.58577227965, 3962.91263371706},
        {std::make_shared<Utc>(7135, 57877, 800577), 3706281.938354492, 1088410.3966064453, 5918616.931213379,
         -5199.135334461927, -3859.049160607159, 3956.2367580533028},
        {std::make_shared<Utc>(7135, 57878, 800577), 3701080.4472961426, 1084551.117767334, 5922569.8283081055,
         -5203.846330046654, -3859.507536031306, 3949.556438267231},
        {std::make_shared<Utc>(7135, 57879, 800577), 3695874.248046875, 1080691.3831481934, 5926516.043060303,
         -5208.551551610231, -3859.960898909718, 3942.871682405472},
        {std::make_shared<Utc>(7135, 57880, 800577), 3690663.346801758, 1076831.197692871, 5930455.570983887,
         -5213.250993400812, -3860.409249585122, 3936.1824974417686},
        {std::make_shared<Utc>(7135, 57881, 800577), 3685447.748901367, 1072970.5662841797, 5934388.407653809,
         -5217.944649487734, -3860.8525884114206, 3929.48889118433},
        {std::make_shared<Utc>(7135, 57882, 800577), 3680227.4594726562, 1069109.4940490723, 5938314.547668457,
         -5222.632513016462, -3861.2909148856997, 3922.79087048769},
        {std::make_shared<Utc>(7135, 57883, 800577), 3675002.485107422, 1065247.9860839844, 5942233.987091064,
         -5227.31457850337, -3861.7242300510406, 3916.088443696499},
        {std::make_shared<Utc>(7135, 57884, 800577), 3669772.831604004, 1061386.0473632812, 5946146.722106934,
         -5231.990840405226, -3862.1525345370173, 3909.3816180825233},
        {std::make_shared<Utc>(7135, 57885, 800577), 3664538.5048217773, 1057523.6827697754, 5950052.748199463,
         -5236.661292940378, -3862.5758287496865, 3902.670401632786},
        {std::make_shared<Utc>(7135, 57886, 800577), 3659299.51071167, 1053660.8973388672, 5953952.061065674,
         -5241.3259299993515, -3862.994113110006, 3895.954801738262},
        {std::make_shared<Utc>(7135, 57887, 800577), 3654055.8549804688, 1049797.696258545, 5957844.65625,
         -5245.9847458302975, -3863.407388020307, 3889.234825849533},
        {std::make_shared<Utc>(7135, 57888, 800577), 3648807.543395996, 1045934.0843505859, 5961730.5294799805,
         -5250.637734413147, -3863.815653901547, 3882.5104818344116},
        {std::make_shared<Utc>(7135, 57889, 800577), 3643554.5819091797, 1042070.066619873, 5965609.676239014,
         -5255.2848897874355, -3864.2189111709595, 3875.7817772626877},
        {std::make_shared<Utc>(7135, 57890, 800577), 3638296.9763183594, 1038205.6481628418, 5969482.092254639,
         -5259.926206290722, -3864.617160242051, 3869.0487194657326},
        {std::make_shared<Utc>(7135, 57891, 800577), 3633034.732269287, 1034340.8339538574, 5973347.773223877,
         -5264.561677783728, -3865.0104015246034, 3862.3113163113594},
        {std::make_shared<Utc>(7135, 57892, 800577), 3627767.8550720215, 1030475.6289978027, 5977206.713653564,
         -5269.191297829151, -3865.3986346274614, 3855.5695744156837},
        {std::make_shared<Utc>(7135, 57893, 800577), 3622496.35055542, 1026610.0380859375, 5981058.91027832,
         -5273.815061092377, -3865.7818606197834, 3848.8235016465187},
        {std::make_shared<Utc>(7135, 57894, 800577), 3617220.2257385254, 1022744.0666809082, 5984904.358581543,
         -5278.432961523533, -3866.160080164671, 3842.073106765747},
        {std::make_shared<Utc>(7135, 57895, 800577), 3611939.486022949, 1018877.7195739746, 5988743.054382324,
         -5283.044993638992, -3866.533293746412, 3835.318396925926}};

    const size_t expected_orbit_vector_size{expected_orbit_state_vectors.size()};
    ASSERT_THAT(metadata_fields.orbit_state_vectors2, SizeIs(expected_orbit_vector_size));
    for (size_t i = 0; i < expected_orbit_vector_size; i++) {
        const auto& exp = expected_orbit_state_vectors.at(i);
        const auto& res = metadata_fields.orbit_state_vectors2.at(i);
        ASSERT_THAT(exp.time_mjd_, DoubleEq(res.time_mjd_));
        ASSERT_THAT(exp.x_pos_, DoubleEq(res.x_pos_));
        ASSERT_THAT(exp.y_pos_, DoubleEq(res.y_pos_));
        ASSERT_THAT(exp.z_pos_, DoubleEq(res.z_pos_));
        ASSERT_THAT(exp.x_vel_, DoubleEq(res.x_vel_));
        ASSERT_THAT(exp.y_vel_, DoubleEq(res.y_vel_));
        ASSERT_THAT(exp.z_vel_, DoubleEq(res.z_vel_));
    }
}
}  // namespace