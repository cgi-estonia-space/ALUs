# Dockerfile to build a manylinux 2014 compliant compiler for ppc64le.
# Based on Dockerfile.rbe.ubuntu16.04-manylinux2010
#
# Builds a devtoolset gcc/libstdc++ that targets manylinux 2014 compatible
# glibc (2.17) and system libstdc++ (4.8).
#
# To push a new version, run:
# $ docker build -f Dockerfile.rbe.cuda10.0-cudnn7-ubuntu18.04-manylinux2014.ppc64le
#  --tag "ibmcom/tensorflow-ppc64le/devel-cuda10.0-cudnn7-ubuntu18.04-manylinux2014" .
# $ docker push ibmcom/tensorflow-ppc64le/devel-cuda10.0-cudnn7-ubuntu18.04-manylinux2014

FROM nvidia/cuda-ppc64le:10.0-cudnn7-devel-ubuntu18.04

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
      bzip2 \
      cpio \
      file \
      flex \
      g++ \
      make \
      patch \
      rpm2cpio \
      unar \
      wget \
      tar \
      xz-utils \
      && \
    rm -rf /var/lib/apt/lists/*

ADD devtoolset/fixlinks.sh fixlinks.sh
ADD devtoolset/build_devtoolset_ppc64le.sh build_devtoolset.sh
ADD devtoolset/rpm-patch.sh rpm-patch.sh

# Set up a sysroot for glibc 2.19 / libstdc++ 4.8 / devtoolset-7 in /dt7.
RUN /build_devtoolset.sh devtoolset-7 /dt7
# Set up a sysroot for glibc 2.19 / libstdc++ 4.8 / devtoolset-8 in /dt8.
RUN /build_devtoolset.sh devtoolset-8 /dt8

# Copy and run the install scripts.
COPY install/*.sh /install/
ARG DEBIAN_FRONTEND=noninteractive
RUN /install/install_bootstrap_deb_packages.sh
RUN /install/install_deb_packages.sh
RUN /install/install_openblas_ppc64le.sh
RUN /install/install_hdf5_ppc64le.sh
#RUN /install/install_clang.sh #no apt repo for clang on ppc64le
RUN /install/install_bazel_from_source.sh
RUN /install/install_pip_packages.sh

# TODO(klimek): Figure out a better way to get the right include paths
# forwarded when we install new packages.
RUN ln -s "/usr/include/powerpc64le-linux-gnu/python3.6m" "/dt7/usr/include/powerpc64le-linux-gnu/python3.6m"
RUN ln -s "/usr/include/powerpc64le-linux-gnu/python3.6m" "/dt8/usr/include/powerpc64le-linux-gnu/python3.6m"
