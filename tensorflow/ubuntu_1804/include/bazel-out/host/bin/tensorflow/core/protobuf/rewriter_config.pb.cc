// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#include "tensorflow/core/protobuf/rewriter_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifierConfig_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto;
namespace tensorflow {
class AutoParallelOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoParallelOptions> _instance;
} _AutoParallelOptions_default_instance_;
class ScopedAllocatorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScopedAllocatorOptions> _instance;
} _ScopedAllocatorOptions_default_instance_;
class RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse> _instance;
} _RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_;
class RewriterConfig_CustomGraphOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewriterConfig_CustomGraphOptimizer> _instance;
} _RewriterConfig_CustomGraphOptimizer_default_instance_;
class RewriterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewriterConfig> _instance;
} _RewriterConfig_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutoParallelOptions_default_instance_;
    new (ptr) ::tensorflow::AutoParallelOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutoParallelOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RewriterConfig_default_instance_;
    new (ptr) ::tensorflow::RewriterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RewriterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {
      &scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
      &scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
      &scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
      &scc_info_VerifierConfig_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RewriterConfig_CustomGraphOptimizer_default_instance_;
    new (ptr) ::tensorflow::RewriterConfig_CustomGraphOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RewriterConfig_CustomGraphOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {
      &scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse();
  }
  ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {
      &scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ScopedAllocatorOptions_default_instance_;
    new (ptr) ::tensorflow::ScopedAllocatorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ScopedAllocatorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutoParallelOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutoParallelOptions, enable_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutoParallelOptions, num_replicas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ScopedAllocatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ScopedAllocatorOptions, enable_op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer, parameter_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, layout_optimizer_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, constant_folding_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, shape_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, remapping_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, arithmetic_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, dependency_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, loop_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, function_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, debug_stripper_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, disable_model_pruning_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, scoped_allocator_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, pin_to_host_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, implementation_selector_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, auto_mixed_precision_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, disable_meta_optimizer_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, meta_optimizer_iterations_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, min_graph_nodes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, memory_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, memory_optimizer_target_node_name_scope_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, meta_optimizer_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, auto_parallel_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, fail_on_optimizer_errors_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, scoped_allocator_opts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, optimizers_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, custom_optimizers_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, inter_optimizer_verifier_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, post_optimization_verifier_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::AutoParallelOptions)},
  { 7, -1, sizeof(::tensorflow::ScopedAllocatorOptions)},
  { 13, 20, sizeof(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse)},
  { 22, -1, sizeof(::tensorflow::RewriterConfig_CustomGraphOptimizer)},
  { 29, -1, sizeof(::tensorflow::RewriterConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutoParallelOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ScopedAllocatorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RewriterConfig_CustomGraphOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RewriterConfig_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[] =
  "\n.tensorflow/core/protobuf/rewriter_conf"
  "ig.proto\022\ntensorflow\032*tensorflow/core/fr"
  "amework/attr_value.proto\032.tensorflow/cor"
  "e/protobuf/verifier_config.proto\";\n\023Auto"
  "ParallelOptions\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_r"
  "eplicas\030\002 \001(\005\"+\n\026ScopedAllocatorOptions\022"
  "\021\n\tenable_op\030\001 \003(\t\"\210\020\n\016RewriterConfig\022;\n"
  "\020layout_optimizer\030\001 \001(\0162!.tensorflow.Rew"
  "riterConfig.Toggle\022;\n\020constant_folding\030\003"
  " \001(\0162!.tensorflow.RewriterConfig.Toggle\022"
  "=\n\022shape_optimization\030\r \001(\0162!.tensorflow"
  ".RewriterConfig.Toggle\0224\n\tremapping\030\016 \001("
  "\0162!.tensorflow.RewriterConfig.Toggle\022B\n\027"
  "arithmetic_optimization\030\007 \001(\0162!.tensorfl"
  "ow.RewriterConfig.Toggle\022B\n\027dependency_o"
  "ptimization\030\010 \001(\0162!.tensorflow.RewriterC"
  "onfig.Toggle\022<\n\021loop_optimization\030\t \001(\0162"
  "!.tensorflow.RewriterConfig.Toggle\022@\n\025fu"
  "nction_optimization\030\n \001(\0162!.tensorflow.R"
  "ewriterConfig.Toggle\0229\n\016debug_stripper\030\013"
  " \001(\0162!.tensorflow.RewriterConfig.Toggle\022"
  "\035\n\025disable_model_pruning\030\002 \001(\010\022H\n\035scoped"
  "_allocator_optimization\030\017 \001(\0162!.tensorfl"
  "ow.RewriterConfig.Toggle\022C\n\030pin_to_host_"
  "optimization\030\022 \001(\0162!.tensorflow.Rewriter"
  "Config.Toggle\022B\n\027implementation_selector"
  "\030\026 \001(\0162!.tensorflow.RewriterConfig.Toggl"
  "e\022\?\n\024auto_mixed_precision\030\027 \001(\0162!.tensor"
  "flow.RewriterConfig.Toggle\022\036\n\026disable_me"
  "ta_optimizer\030\023 \001(\010\022O\n\031meta_optimizer_ite"
  "rations\030\014 \001(\0162,.tensorflow.RewriterConfi"
  "g.NumIterationsType\022\027\n\017min_graph_nodes\030\021"
  " \001(\005\022B\n\023memory_optimization\030\004 \001(\0162%.tens"
  "orflow.RewriterConfig.MemOptType\022/\n\'memo"
  "ry_optimizer_target_node_name_scope\030\006 \001("
  "\t\022!\n\031meta_optimizer_timeout_ms\030\024 \001(\003\0226\n\r"
  "auto_parallel\030\005 \001(\0132\037.tensorflow.AutoPar"
  "allelOptions\022 \n\030fail_on_optimizer_errors"
  "\030\025 \001(\010\022A\n\025scoped_allocator_opts\030\020 \001(\0132\"."
  "tensorflow.ScopedAllocatorOptions\022\022\n\nopt"
  "imizers\030d \003(\t\022K\n\021custom_optimizers\030\310\001 \003("
  "\0132/.tensorflow.RewriterConfig.CustomGrap"
  "hOptimizer\022D\n\037inter_optimizer_verifier_c"
  "onfig\030\254\002 \001(\0132\032.tensorflow.VerifierConfig"
  "\022F\n!post_optimization_verifier_config\030\255\002"
  " \001(\0132\032.tensorflow.VerifierConfig\032\312\001\n\024Cus"
  "tomGraphOptimizer\022\014\n\004name\030\001 \001(\t\022X\n\rparam"
  "eter_map\030\002 \003(\0132A.tensorflow.RewriterConf"
  "ig.CustomGraphOptimizer.ParameterMapEntr"
  "y\032J\n\021ParameterMapEntry\022\013\n\003key\030\001 \001(\t\022$\n\005v"
  "alue\030\002 \001(\0132\025.tensorflow.AttrValue:\0028\001\"6\n"
  "\006Toggle\022\013\n\007DEFAULT\020\000\022\006\n\002ON\020\001\022\007\n\003OFF\020\002\022\016\n"
  "\nAGGRESSIVE\020\003\"<\n\021NumIterationsType\022\025\n\021DE"
  "FAULT_NUM_ITERS\020\000\022\007\n\003ONE\020\001\022\007\n\003TWO\020\002\"\237\001\n\n"
  "MemOptType\022\023\n\017DEFAULT_MEM_OPT\020\000\022\016\n\nNO_ME"
  "M_OPT\020\001\022\n\n\006MANUAL\020\002\022\027\n\023SWAPPING_HEURISTI"
  "CS\020\004\022\034\n\030RECOMPUTATION_HEURISTICS\020\005\022\031\n\025SC"
  "HEDULING_HEURISTICS\020\006\022\016\n\nHEURISTICS\020\003B\177\n"
  "\030org.tensorflow.frameworkB\024RewriterConfi"
  "gProtosP\001ZHgithub.com/tensorflow/tensorf"
  "low/tensorflow/go/core/core_protos_go_pr"
  "oto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_sccs[5] = {
  &scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto, "tensorflow/core/protobuf/rewriter_config.proto", 2454,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewriterConfig_Toggle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[0];
}
bool RewriterConfig_Toggle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewriterConfig_Toggle RewriterConfig::DEFAULT;
constexpr RewriterConfig_Toggle RewriterConfig::ON;
constexpr RewriterConfig_Toggle RewriterConfig::OFF;
constexpr RewriterConfig_Toggle RewriterConfig::AGGRESSIVE;
constexpr RewriterConfig_Toggle RewriterConfig::Toggle_MIN;
constexpr RewriterConfig_Toggle RewriterConfig::Toggle_MAX;
constexpr int RewriterConfig::Toggle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewriterConfig_NumIterationsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[1];
}
bool RewriterConfig_NumIterationsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewriterConfig_NumIterationsType RewriterConfig::DEFAULT_NUM_ITERS;
constexpr RewriterConfig_NumIterationsType RewriterConfig::ONE;
constexpr RewriterConfig_NumIterationsType RewriterConfig::TWO;
constexpr RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MIN;
constexpr RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MAX;
constexpr int RewriterConfig::NumIterationsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewriterConfig_MemOptType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[2];
}
bool RewriterConfig_MemOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewriterConfig_MemOptType RewriterConfig::DEFAULT_MEM_OPT;
constexpr RewriterConfig_MemOptType RewriterConfig::NO_MEM_OPT;
constexpr RewriterConfig_MemOptType RewriterConfig::MANUAL;
constexpr RewriterConfig_MemOptType RewriterConfig::SWAPPING_HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::RECOMPUTATION_HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::SCHEDULING_HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::MemOptType_MIN;
constexpr RewriterConfig_MemOptType RewriterConfig::MemOptType_MAX;
constexpr int RewriterConfig::MemOptType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AutoParallelOptions::InitAsDefaultInstance() {
}
class AutoParallelOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoParallelOptions::kEnableFieldNumber;
const int AutoParallelOptions::kNumReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoParallelOptions::AutoParallelOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(const AutoParallelOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_replicas_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
}

AutoParallelOptions::~AutoParallelOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.AutoParallelOptions)
  SharedDtor();
}

void AutoParallelOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void AutoParallelOptions::ArenaDtor(void* object) {
  AutoParallelOptions* _this = reinterpret_cast< AutoParallelOptions* >(object);
  (void)_this;
}
void AutoParallelOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoParallelOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoParallelOptions& AutoParallelOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AutoParallelOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutoParallelOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AutoParallelOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_replicas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AutoParallelOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutoParallelOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_replicas = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutoParallelOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutoParallelOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AutoParallelOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutoParallelOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_replicas(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.AutoParallelOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoParallelOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutoParallelOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_replicas(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutoParallelOptions)
  return target;
}

size_t AutoParallelOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutoParallelOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_replicas());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoParallelOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoParallelOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoParallelOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutoParallelOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutoParallelOptions)
    MergeFrom(*source);
  }
}

void AutoParallelOptions::MergeFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.num_replicas() != 0) {
    set_num_replicas(from.num_replicas());
  }
}

void AutoParallelOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoParallelOptions::CopyFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoParallelOptions::IsInitialized() const {
  return true;
}

void AutoParallelOptions::Swap(AutoParallelOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AutoParallelOptions* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void AutoParallelOptions::UnsafeArenaSwap(AutoParallelOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AutoParallelOptions::InternalSwap(AutoParallelOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
  swap(num_replicas_, other->num_replicas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoParallelOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScopedAllocatorOptions::InitAsDefaultInstance() {
}
class ScopedAllocatorOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScopedAllocatorOptions::kEnableOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScopedAllocatorOptions::ScopedAllocatorOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ScopedAllocatorOptions)
}
ScopedAllocatorOptions::ScopedAllocatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  enable_op_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ScopedAllocatorOptions)
}
ScopedAllocatorOptions::ScopedAllocatorOptions(const ScopedAllocatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      enable_op_(from.enable_op_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ScopedAllocatorOptions)
}

void ScopedAllocatorOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
}

ScopedAllocatorOptions::~ScopedAllocatorOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ScopedAllocatorOptions)
  SharedDtor();
}

void ScopedAllocatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ScopedAllocatorOptions::ArenaDtor(void* object) {
  ScopedAllocatorOptions* _this = reinterpret_cast< ScopedAllocatorOptions* >(object);
  (void)_this;
}
void ScopedAllocatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScopedAllocatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScopedAllocatorOptions& ScopedAllocatorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScopedAllocatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ScopedAllocatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_op_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScopedAllocatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string enable_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_enable_op(), ptr, ctx, "tensorflow.ScopedAllocatorOptions.enable_op");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScopedAllocatorOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ScopedAllocatorOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string enable_op = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_enable_op()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->enable_op(this->enable_op_size() - 1).data(),
            static_cast<int>(this->enable_op(this->enable_op_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.ScopedAllocatorOptions.enable_op"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ScopedAllocatorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ScopedAllocatorOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScopedAllocatorOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ScopedAllocatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  for (int i = 0, n = this->enable_op_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enable_op(i).data(), static_cast<int>(this->enable_op(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->enable_op(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ScopedAllocatorOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScopedAllocatorOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ScopedAllocatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  for (int i = 0, n = this->enable_op_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->enable_op(i).data(), static_cast<int>(this->enable_op(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->enable_op(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ScopedAllocatorOptions)
  return target;
}

size_t ScopedAllocatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ScopedAllocatorOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->enable_op_size());
  for (int i = 0, n = this->enable_op_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->enable_op(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScopedAllocatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ScopedAllocatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ScopedAllocatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScopedAllocatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ScopedAllocatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ScopedAllocatorOptions)
    MergeFrom(*source);
  }
}

void ScopedAllocatorOptions::MergeFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ScopedAllocatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enable_op_.MergeFrom(from.enable_op_);
}

void ScopedAllocatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScopedAllocatorOptions::CopyFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopedAllocatorOptions::IsInitialized() const {
  return true;
}

void ScopedAllocatorOptions::Swap(ScopedAllocatorOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ScopedAllocatorOptions* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ScopedAllocatorOptions::UnsafeArenaSwap(ScopedAllocatorOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ScopedAllocatorOptions::InternalSwap(ScopedAllocatorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  enable_op_.InternalSwap(CastToBase(&other->enable_op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopedAllocatorOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse() {}
RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MergeFrom(const RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RewriterConfig_CustomGraphOptimizer::InitAsDefaultInstance() {
}
class RewriterConfig_CustomGraphOptimizer::HasBitSetters {
 public:
};

void RewriterConfig_CustomGraphOptimizer::clear_parameter_map() {
  parameter_map_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig_CustomGraphOptimizer::kNameFieldNumber;
const int RewriterConfig_CustomGraphOptimizer::kParameterMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  parameter_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(const RewriterConfig_CustomGraphOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameter_map_.MergeFrom(from.parameter_map_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

void RewriterConfig_CustomGraphOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RewriterConfig_CustomGraphOptimizer::~RewriterConfig_CustomGraphOptimizer() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
  SharedDtor();
}

void RewriterConfig_CustomGraphOptimizer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewriterConfig_CustomGraphOptimizer::ArenaDtor(void* object) {
  RewriterConfig_CustomGraphOptimizer* _this = reinterpret_cast< RewriterConfig_CustomGraphOptimizer* >(object);
  (void)_this;
}
void RewriterConfig_CustomGraphOptimizer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriterConfig_CustomGraphOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewriterConfig_CustomGraphOptimizer& RewriterConfig_CustomGraphOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RewriterConfig_CustomGraphOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_map_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewriterConfig_CustomGraphOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.AttrValue> parameter_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameter_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewriterConfig_CustomGraphOptimizer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.CustomGraphOptimizer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.AttrValue> parameter_map = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse,
              std::string, ::tensorflow::AttrValue,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue > > parser(&parameter_map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewriterConfig_CustomGraphOptimizer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->parameter_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->parameter_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->parameter_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it) {
        RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriterConfig_CustomGraphOptimizer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->parameter_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (false &&
        this->parameter_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->parameter_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->parameter_map().begin();
          it != this->parameter_map().end(); ++it) {
        RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return target;
}

size_t RewriterConfig_CustomGraphOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->parameter_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
      it = this->parameter_map().begin();
      it != this->parameter_map().end(); ++it) {
    RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig_CustomGraphOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriterConfig_CustomGraphOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig.CustomGraphOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
    MergeFrom(*source);
  }
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_map_.MergeFrom(from.parameter_map_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig_CustomGraphOptimizer::IsInitialized() const {
  return true;
}

void RewriterConfig_CustomGraphOptimizer::Swap(RewriterConfig_CustomGraphOptimizer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig_CustomGraphOptimizer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RewriterConfig_CustomGraphOptimizer::UnsafeArenaSwap(RewriterConfig_CustomGraphOptimizer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig_CustomGraphOptimizer::InternalSwap(RewriterConfig_CustomGraphOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parameter_map_.Swap(&other->parameter_map_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriterConfig_CustomGraphOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewriterConfig::InitAsDefaultInstance() {
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->auto_parallel_ = const_cast< ::tensorflow::AutoParallelOptions*>(
      ::tensorflow::AutoParallelOptions::internal_default_instance());
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->scoped_allocator_opts_ = const_cast< ::tensorflow::ScopedAllocatorOptions*>(
      ::tensorflow::ScopedAllocatorOptions::internal_default_instance());
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->inter_optimizer_verifier_config_ = const_cast< ::tensorflow::VerifierConfig*>(
      ::tensorflow::VerifierConfig::internal_default_instance());
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->post_optimization_verifier_config_ = const_cast< ::tensorflow::VerifierConfig*>(
      ::tensorflow::VerifierConfig::internal_default_instance());
}
class RewriterConfig::HasBitSetters {
 public:
  static const ::tensorflow::AutoParallelOptions& auto_parallel(const RewriterConfig* msg);
  static const ::tensorflow::ScopedAllocatorOptions& scoped_allocator_opts(const RewriterConfig* msg);
  static const ::tensorflow::VerifierConfig& inter_optimizer_verifier_config(const RewriterConfig* msg);
  static const ::tensorflow::VerifierConfig& post_optimization_verifier_config(const RewriterConfig* msg);
};

const ::tensorflow::AutoParallelOptions&
RewriterConfig::HasBitSetters::auto_parallel(const RewriterConfig* msg) {
  return *msg->auto_parallel_;
}
const ::tensorflow::ScopedAllocatorOptions&
RewriterConfig::HasBitSetters::scoped_allocator_opts(const RewriterConfig* msg) {
  return *msg->scoped_allocator_opts_;
}
const ::tensorflow::VerifierConfig&
RewriterConfig::HasBitSetters::inter_optimizer_verifier_config(const RewriterConfig* msg) {
  return *msg->inter_optimizer_verifier_config_;
}
const ::tensorflow::VerifierConfig&
RewriterConfig::HasBitSetters::post_optimization_verifier_config(const RewriterConfig* msg) {
  return *msg->post_optimization_verifier_config_;
}
void RewriterConfig::unsafe_arena_set_allocated_auto_parallel(
    ::tensorflow::AutoParallelOptions* auto_parallel) {
  if (GetArenaNoVirtual() == nullptr) {
    delete auto_parallel_;
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}
void RewriterConfig::unsafe_arena_set_allocated_scoped_allocator_opts(
    ::tensorflow::ScopedAllocatorOptions* scoped_allocator_opts) {
  if (GetArenaNoVirtual() == nullptr) {
    delete scoped_allocator_opts_;
  }
  scoped_allocator_opts_ = scoped_allocator_opts;
  if (scoped_allocator_opts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.scoped_allocator_opts)
}
void RewriterConfig::unsafe_arena_set_allocated_inter_optimizer_verifier_config(
    ::tensorflow::VerifierConfig* inter_optimizer_verifier_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inter_optimizer_verifier_config_;
  }
  inter_optimizer_verifier_config_ = inter_optimizer_verifier_config;
  if (inter_optimizer_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.inter_optimizer_verifier_config)
}
void RewriterConfig::clear_inter_optimizer_verifier_config() {
  if (GetArenaNoVirtual() == nullptr && inter_optimizer_verifier_config_ != nullptr) {
    delete inter_optimizer_verifier_config_;
  }
  inter_optimizer_verifier_config_ = nullptr;
}
void RewriterConfig::unsafe_arena_set_allocated_post_optimization_verifier_config(
    ::tensorflow::VerifierConfig* post_optimization_verifier_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete post_optimization_verifier_config_;
  }
  post_optimization_verifier_config_ = post_optimization_verifier_config;
  if (post_optimization_verifier_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.post_optimization_verifier_config)
}
void RewriterConfig::clear_post_optimization_verifier_config() {
  if (GetArenaNoVirtual() == nullptr && post_optimization_verifier_config_ != nullptr) {
    delete post_optimization_verifier_config_;
  }
  post_optimization_verifier_config_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig::kLayoutOptimizerFieldNumber;
const int RewriterConfig::kConstantFoldingFieldNumber;
const int RewriterConfig::kShapeOptimizationFieldNumber;
const int RewriterConfig::kRemappingFieldNumber;
const int RewriterConfig::kArithmeticOptimizationFieldNumber;
const int RewriterConfig::kDependencyOptimizationFieldNumber;
const int RewriterConfig::kLoopOptimizationFieldNumber;
const int RewriterConfig::kFunctionOptimizationFieldNumber;
const int RewriterConfig::kDebugStripperFieldNumber;
const int RewriterConfig::kDisableModelPruningFieldNumber;
const int RewriterConfig::kScopedAllocatorOptimizationFieldNumber;
const int RewriterConfig::kPinToHostOptimizationFieldNumber;
const int RewriterConfig::kImplementationSelectorFieldNumber;
const int RewriterConfig::kAutoMixedPrecisionFieldNumber;
const int RewriterConfig::kDisableMetaOptimizerFieldNumber;
const int RewriterConfig::kMetaOptimizerIterationsFieldNumber;
const int RewriterConfig::kMinGraphNodesFieldNumber;
const int RewriterConfig::kMemoryOptimizationFieldNumber;
const int RewriterConfig::kMemoryOptimizerTargetNodeNameScopeFieldNumber;
const int RewriterConfig::kMetaOptimizerTimeoutMsFieldNumber;
const int RewriterConfig::kAutoParallelFieldNumber;
const int RewriterConfig::kFailOnOptimizerErrorsFieldNumber;
const int RewriterConfig::kScopedAllocatorOptsFieldNumber;
const int RewriterConfig::kOptimizersFieldNumber;
const int RewriterConfig::kCustomOptimizersFieldNumber;
const int RewriterConfig::kInterOptimizerVerifierConfigFieldNumber;
const int RewriterConfig::kPostOptimizationVerifierConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig::RewriterConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  optimizers_(arena),
  custom_optimizers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(const RewriterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      optimizers_(from.optimizers_),
      custom_optimizers_(from.custom_optimizers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.memory_optimizer_target_node_name_scope().size() > 0) {
    memory_optimizer_target_node_name_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memory_optimizer_target_node_name_scope(),
      GetArenaNoVirtual());
  }
  if (from.has_auto_parallel()) {
    auto_parallel_ = new ::tensorflow::AutoParallelOptions(*from.auto_parallel_);
  } else {
    auto_parallel_ = nullptr;
  }
  if (from.has_scoped_allocator_opts()) {
    scoped_allocator_opts_ = new ::tensorflow::ScopedAllocatorOptions(*from.scoped_allocator_opts_);
  } else {
    scoped_allocator_opts_ = nullptr;
  }
  if (from.has_inter_optimizer_verifier_config()) {
    inter_optimizer_verifier_config_ = new ::tensorflow::VerifierConfig(*from.inter_optimizer_verifier_config_);
  } else {
    inter_optimizer_verifier_config_ = nullptr;
  }
  if (from.has_post_optimization_verifier_config()) {
    post_optimization_verifier_config_ = new ::tensorflow::VerifierConfig(*from.post_optimization_verifier_config_);
  } else {
    post_optimization_verifier_config_ = nullptr;
  }
  ::memcpy(&layout_optimizer_, &from.layout_optimizer_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_mixed_precision_) -
    reinterpret_cast<char*>(&layout_optimizer_)) + sizeof(auto_mixed_precision_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_parallel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_mixed_precision_) -
      reinterpret_cast<char*>(&auto_parallel_)) + sizeof(auto_mixed_precision_));
}

RewriterConfig::~RewriterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig)
  SharedDtor();
}

void RewriterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  memory_optimizer_target_node_name_scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auto_parallel_;
  if (this != internal_default_instance()) delete scoped_allocator_opts_;
  if (this != internal_default_instance()) delete inter_optimizer_verifier_config_;
  if (this != internal_default_instance()) delete post_optimization_verifier_config_;
}

void RewriterConfig::ArenaDtor(void* object) {
  RewriterConfig* _this = reinterpret_cast< RewriterConfig* >(object);
  (void)_this;
}
void RewriterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewriterConfig& RewriterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RewriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optimizers_.Clear();
  custom_optimizers_.Clear();
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && auto_parallel_ != nullptr) {
    delete auto_parallel_;
  }
  auto_parallel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scoped_allocator_opts_ != nullptr) {
    delete scoped_allocator_opts_;
  }
  scoped_allocator_opts_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inter_optimizer_verifier_config_ != nullptr) {
    delete inter_optimizer_verifier_config_;
  }
  inter_optimizer_verifier_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && post_optimization_verifier_config_ != nullptr) {
    delete post_optimization_verifier_config_;
  }
  post_optimization_verifier_config_ = nullptr;
  ::memset(&layout_optimizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_mixed_precision_) -
      reinterpret_cast<char*>(&layout_optimizer_)) + sizeof(auto_mixed_precision_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RewriterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_layout_optimizer(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // bool disable_model_pruning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_model_pruning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_constant_folding(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_memory_optimization(static_cast<::tensorflow::RewriterConfig_MemOptType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_auto_parallel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memory_optimizer_target_node_name_scope = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_memory_optimizer_target_node_name_scope(), ptr, ctx, "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_arithmetic_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dependency_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_loop_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_function_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_debug_stripper(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_meta_optimizer_iterations(static_cast<::tensorflow::RewriterConfig_NumIterationsType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_shape_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle remapping = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_remapping(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_scoped_allocator_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_scoped_allocator_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_graph_nodes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          min_graph_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_pin_to_host_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // bool disable_meta_optimizer = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          disable_meta_optimizer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 meta_optimizer_timeout_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          meta_optimizer_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fail_on_optimizer_errors = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          fail_on_optimizer_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_implementation_selector(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_auto_mixed_precision(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // repeated string optimizers = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_optimizers(), ptr, ctx, "tensorflow.RewriterConfig.optimizers");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 1698);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_custom_optimizers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 3266);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_inter_optimizer_verifier_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_post_optimization_verifier_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RewriterConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_layout_optimizer(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_model_pruning = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_model_pruning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constant_folding(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_memory_optimization(static_cast< ::tensorflow::RewriterConfig_MemOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_parallel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memory_optimizer_target_node_name_scope = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_memory_optimizer_target_node_name_scope()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->memory_optimizer_target_node_name_scope().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_arithmetic_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dependency_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_loop_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_function_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_debug_stripper(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_meta_optimizer_iterations(static_cast< ::tensorflow::RewriterConfig_NumIterationsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_shape_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle remapping = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_remapping(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_scoped_allocator_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scoped_allocator_opts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_graph_nodes = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_graph_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pin_to_host_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_meta_optimizer = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_meta_optimizer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 meta_optimizer_timeout_ms = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &meta_optimizer_timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fail_on_optimizer_errors = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_on_optimizer_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_implementation_selector(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_mixed_precision(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string optimizers = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_optimizers()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->optimizers(this->optimizers_size() - 1).data(),
            static_cast<int>(this->optimizers(this->optimizers_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.optimizers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
      case 200: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_custom_optimizers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
      case 300: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inter_optimizer_verifier_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
      case 301: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_post_optimization_verifier_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RewriterConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->layout_optimizer(), output);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->disable_model_pruning(), output);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->constant_folding(), output);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->memory_optimization(), output);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::auto_parallel(this), output);
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->memory_optimizer_target_node_name_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->memory_optimizer_target_node_name_scope(), output);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->arithmetic_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->dependency_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->loop_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->function_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->debug_stripper(), output);
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->meta_optimizer_iterations(), output);
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->shape_optimization(), output);
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->remapping(), output);
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->scoped_allocator_optimization(), output);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::scoped_allocator_opts(this), output);
  }

  // int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->min_graph_nodes(), output);
  }

  // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->pin_to_host_optimization(), output);
  }

  // bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->disable_meta_optimizer(), output);
  }

  // int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->meta_optimizer_timeout_ms(), output);
  }

  // bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->fail_on_optimizer_errors(), output);
  }

  // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->implementation_selector(), output);
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->auto_mixed_precision(), output);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), static_cast<int>(this->optimizers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      100, this->optimizers(i), output);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_optimizers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      200,
      this->custom_optimizers(static_cast<int>(i)),
      output);
  }

  // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, HasBitSetters::inter_optimizer_verifier_config(this), output);
  }

  // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, HasBitSetters::post_optimization_verifier_config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriterConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->layout_optimizer(), target);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->disable_model_pruning(), target);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->constant_folding(), target);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->memory_optimization(), target);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::auto_parallel(this), target);
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->memory_optimizer_target_node_name_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->memory_optimizer_target_node_name_scope(), target);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->arithmetic_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->dependency_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->loop_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->function_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->debug_stripper(), target);
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->meta_optimizer_iterations(), target);
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->shape_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->remapping(), target);
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->scoped_allocator_optimization(), target);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::scoped_allocator_opts(this), target);
  }

  // int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->min_graph_nodes(), target);
  }

  // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->pin_to_host_optimization(), target);
  }

  // bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->disable_meta_optimizer(), target);
  }

  // int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->meta_optimizer_timeout_ms(), target);
  }

  // bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->fail_on_optimizer_errors(), target);
  }

  // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->implementation_selector(), target);
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->auto_mixed_precision(), target);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), static_cast<int>(this->optimizers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(100, this->optimizers(i), target);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_optimizers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        200, this->custom_optimizers(static_cast<int>(i)), target);
  }

  // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        300, HasBitSetters::inter_optimizer_verifier_config(this), target);
  }

  // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        301, HasBitSetters::post_optimization_verifier_config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig)
  return target;
}

size_t RewriterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string optimizers = 100;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->optimizers_size());
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->optimizers(i));
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_optimizers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->custom_optimizers(static_cast<int>(i)));
    }
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->memory_optimizer_target_node_name_scope());
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_parallel_);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scoped_allocator_opts_);
  }

  // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inter_optimizer_verifier_config_);
  }

  // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_optimization_verifier_config_);
  }

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->layout_optimizer());
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->constant_folding());
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->memory_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->arithmetic_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dependency_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->loop_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->function_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->debug_stripper());
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->meta_optimizer_iterations());
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->shape_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->remapping());
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    total_size += 2 + 1;
  }

  // bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    total_size += 2 + 1;
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->scoped_allocator_optimization());
  }

  // int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_graph_nodes());
  }

  // int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->meta_optimizer_timeout_ms());
  }

  // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pin_to_host_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->implementation_selector());
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->auto_mixed_precision());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig)
    MergeFrom(*source);
  }
}

void RewriterConfig::MergeFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optimizers_.MergeFrom(from.optimizers_);
  custom_optimizers_.MergeFrom(from.custom_optimizers_);
  if (from.memory_optimizer_target_node_name_scope().size() > 0) {
    set_memory_optimizer_target_node_name_scope(from.memory_optimizer_target_node_name_scope());
  }
  if (from.has_auto_parallel()) {
    mutable_auto_parallel()->::tensorflow::AutoParallelOptions::MergeFrom(from.auto_parallel());
  }
  if (from.has_scoped_allocator_opts()) {
    mutable_scoped_allocator_opts()->::tensorflow::ScopedAllocatorOptions::MergeFrom(from.scoped_allocator_opts());
  }
  if (from.has_inter_optimizer_verifier_config()) {
    mutable_inter_optimizer_verifier_config()->::tensorflow::VerifierConfig::MergeFrom(from.inter_optimizer_verifier_config());
  }
  if (from.has_post_optimization_verifier_config()) {
    mutable_post_optimization_verifier_config()->::tensorflow::VerifierConfig::MergeFrom(from.post_optimization_verifier_config());
  }
  if (from.layout_optimizer() != 0) {
    set_layout_optimizer(from.layout_optimizer());
  }
  if (from.constant_folding() != 0) {
    set_constant_folding(from.constant_folding());
  }
  if (from.memory_optimization() != 0) {
    set_memory_optimization(from.memory_optimization());
  }
  if (from.arithmetic_optimization() != 0) {
    set_arithmetic_optimization(from.arithmetic_optimization());
  }
  if (from.dependency_optimization() != 0) {
    set_dependency_optimization(from.dependency_optimization());
  }
  if (from.loop_optimization() != 0) {
    set_loop_optimization(from.loop_optimization());
  }
  if (from.function_optimization() != 0) {
    set_function_optimization(from.function_optimization());
  }
  if (from.debug_stripper() != 0) {
    set_debug_stripper(from.debug_stripper());
  }
  if (from.meta_optimizer_iterations() != 0) {
    set_meta_optimizer_iterations(from.meta_optimizer_iterations());
  }
  if (from.shape_optimization() != 0) {
    set_shape_optimization(from.shape_optimization());
  }
  if (from.remapping() != 0) {
    set_remapping(from.remapping());
  }
  if (from.disable_model_pruning() != 0) {
    set_disable_model_pruning(from.disable_model_pruning());
  }
  if (from.disable_meta_optimizer() != 0) {
    set_disable_meta_optimizer(from.disable_meta_optimizer());
  }
  if (from.fail_on_optimizer_errors() != 0) {
    set_fail_on_optimizer_errors(from.fail_on_optimizer_errors());
  }
  if (from.scoped_allocator_optimization() != 0) {
    set_scoped_allocator_optimization(from.scoped_allocator_optimization());
  }
  if (from.min_graph_nodes() != 0) {
    set_min_graph_nodes(from.min_graph_nodes());
  }
  if (from.meta_optimizer_timeout_ms() != 0) {
    set_meta_optimizer_timeout_ms(from.meta_optimizer_timeout_ms());
  }
  if (from.pin_to_host_optimization() != 0) {
    set_pin_to_host_optimization(from.pin_to_host_optimization());
  }
  if (from.implementation_selector() != 0) {
    set_implementation_selector(from.implementation_selector());
  }
  if (from.auto_mixed_precision() != 0) {
    set_auto_mixed_precision(from.auto_mixed_precision());
  }
}

void RewriterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig::CopyFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig::IsInitialized() const {
  return true;
}

void RewriterConfig::Swap(RewriterConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void RewriterConfig::UnsafeArenaSwap(RewriterConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig::InternalSwap(RewriterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  optimizers_.InternalSwap(CastToBase(&other->optimizers_));
  CastToBase(&custom_optimizers_)->InternalSwap(CastToBase(&other->custom_optimizers_));
  memory_optimizer_target_node_name_scope_.Swap(&other->memory_optimizer_target_node_name_scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auto_parallel_, other->auto_parallel_);
  swap(scoped_allocator_opts_, other->scoped_allocator_opts_);
  swap(inter_optimizer_verifier_config_, other->inter_optimizer_verifier_config_);
  swap(post_optimization_verifier_config_, other->post_optimization_verifier_config_);
  swap(layout_optimizer_, other->layout_optimizer_);
  swap(constant_folding_, other->constant_folding_);
  swap(memory_optimization_, other->memory_optimization_);
  swap(arithmetic_optimization_, other->arithmetic_optimization_);
  swap(dependency_optimization_, other->dependency_optimization_);
  swap(loop_optimization_, other->loop_optimization_);
  swap(function_optimization_, other->function_optimization_);
  swap(debug_stripper_, other->debug_stripper_);
  swap(meta_optimizer_iterations_, other->meta_optimizer_iterations_);
  swap(shape_optimization_, other->shape_optimization_);
  swap(remapping_, other->remapping_);
  swap(disable_model_pruning_, other->disable_model_pruning_);
  swap(disable_meta_optimizer_, other->disable_meta_optimizer_);
  swap(fail_on_optimizer_errors_, other->fail_on_optimizer_errors_);
  swap(scoped_allocator_optimization_, other->scoped_allocator_optimization_);
  swap(min_graph_nodes_, other->min_graph_nodes_);
  swap(meta_optimizer_timeout_ms_, other->meta_optimizer_timeout_ms_);
  swap(pin_to_host_optimization_, other->pin_to_host_optimization_);
  swap(implementation_selector_, other->implementation_selector_);
  swap(auto_mixed_precision_, other->auto_mixed_precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::AutoParallelOptions* Arena::CreateMaybeMessage< ::tensorflow::AutoParallelOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutoParallelOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ScopedAllocatorOptions* Arena::CreateMaybeMessage< ::tensorflow::ScopedAllocatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ScopedAllocatorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RewriterConfig_CustomGraphOptimizer* Arena::CreateMaybeMessage< ::tensorflow::RewriterConfig_CustomGraphOptimizer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RewriterConfig_CustomGraphOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RewriterConfig* Arena::CreateMaybeMessage< ::tensorflow::RewriterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RewriterConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
