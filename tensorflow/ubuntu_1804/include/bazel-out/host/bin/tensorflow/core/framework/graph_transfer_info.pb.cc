// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph_transfer_info.proto

#include "tensorflow/core/framework/graph_transfer_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
namespace tensorflow {
class GraphTransferNodeInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferNodeInput> _instance;
} _GraphTransferNodeInput_default_instance_;
class GraphTransferNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferNodeInfo> _instance;
} _GraphTransferNodeInfo_default_instance_;
class GraphTransferConstNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferConstNodeInfo> _instance;
} _GraphTransferConstNodeInfo_default_instance_;
class GraphTransferNodeInputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferNodeInputInfo> _instance;
} _GraphTransferNodeInputInfo_default_instance_;
class GraphTransferNodeOutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferNodeOutputInfo> _instance;
} _GraphTransferNodeOutputInfo_default_instance_;
class GraphTransferGraphInputNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferGraphInputNodeInfo> _instance;
} _GraphTransferGraphInputNodeInfo_default_instance_;
class GraphTransferGraphOutputNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferGraphOutputNodeInfo> _instance;
} _GraphTransferGraphOutputNodeInfo_default_instance_;
class GraphTransferInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTransferInfo> _instance;
} _GraphTransferInfo_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferConstNodeInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferConstNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferConstNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferGraphInputNodeInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferGraphInputNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferGraphInputNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferGraphOutputNodeInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferGraphOutputNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferGraphOutputNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GraphTransferInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_GraphTransferInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_GraphTransferInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {
      &scc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
      &scc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
      &scc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
      &scc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
      &scc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
      &scc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferNodeInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferNodeInput_default_instance_;
    new (ptr) ::tensorflow::GraphTransferNodeInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferNodeInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferNodeInputInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferNodeInputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferNodeInputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {
      &scc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphTransferNodeOutputInfo_default_instance_;
    new (ptr) ::tensorflow::GraphTransferNodeOutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphTransferNodeOutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInput, node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInput, output_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, type_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, soc_op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, padding_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, input_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, output_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, data_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInputInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInputInfo, node_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeOutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeOutputInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeOutputInfo, max_byte_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, const_node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, node_input_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, node_output_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, graph_input_node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, graph_output_node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, destination_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::GraphTransferNodeInput)},
  { 7, -1, sizeof(::tensorflow::GraphTransferNodeInfo)},
  { 19, -1, sizeof(::tensorflow::GraphTransferConstNodeInfo)},
  { 29, -1, sizeof(::tensorflow::GraphTransferNodeInputInfo)},
  { 36, -1, sizeof(::tensorflow::GraphTransferNodeOutputInfo)},
  { 43, -1, sizeof(::tensorflow::GraphTransferGraphInputNodeInfo)},
  { 51, -1, sizeof(::tensorflow::GraphTransferGraphOutputNodeInfo)},
  { 59, -1, sizeof(::tensorflow::GraphTransferInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferNodeInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferConstNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferNodeInputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferNodeOutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferGraphInputNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferGraphOutputNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphTransferInfo_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[] =
  "\n3tensorflow/core/framework/graph_transf"
  "er_info.proto\022\ntensorflow\032%tensorflow/co"
  "re/framework/types.proto\">\n\026GraphTransfe"
  "rNodeInput\022\017\n\007node_id\030\001 \001(\005\022\023\n\013output_po"
  "rt\030\002 \001(\005\"\233\001\n\025GraphTransferNodeInfo\022\014\n\004na"
  "me\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\021\n\ttype_name\030\003"
  " \001(\t\022\021\n\tsoc_op_id\030\004 \001(\005\022\022\n\npadding_id\030\005 "
  "\001(\005\022\023\n\013input_count\030\006 \001(\005\022\024\n\014output_count"
  "\030\007 \001(\005\"}\n\032GraphTransferConstNodeInfo\022\014\n\004"
  "name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\r\n\005shape\030\003 \003"
  "(\003\022\014\n\004data\030\004 \001(\014\022#\n\005dtype\030\005 \001(\0162\024.tensor"
  "flow.DataType\"e\n\032GraphTransferNodeInputI"
  "nfo\022\017\n\007node_id\030\001 \001(\005\0226\n\nnode_input\030\002 \003(\013"
  "2\".tensorflow.GraphTransferNodeInput\"E\n\033"
  "GraphTransferNodeOutputInfo\022\017\n\007node_id\030\001"
  " \001(\005\022\025\n\rmax_byte_size\030\002 \003(\005\"c\n\037GraphTran"
  "sferGraphInputNodeInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005"
  "shape\030\002 \003(\003\022#\n\005dtype\030\003 \001(\0162\024.tensorflow."
  "DataType\"d\n GraphTransferGraphOutputNode"
  "Info\022\014\n\004name\030\001 \001(\t\022\r\n\005shape\030\002 \003(\003\022#\n\005dty"
  "pe\030\003 \001(\0162\024.tensorflow.DataType\"\215\004\n\021Graph"
  "TransferInfo\0224\n\tnode_info\030\001 \003(\0132!.tensor"
  "flow.GraphTransferNodeInfo\022\?\n\017const_node"
  "_info\030\002 \003(\0132&.tensorflow.GraphTransferCo"
  "nstNodeInfo\022\?\n\017node_input_info\030\003 \003(\0132&.t"
  "ensorflow.GraphTransferNodeInputInfo\022A\n\020"
  "node_output_info\030\004 \003(\0132\'.tensorflow.Grap"
  "hTransferNodeOutputInfo\022J\n\025graph_input_n"
  "ode_info\030\005 \003(\0132+.tensorflow.GraphTransfe"
  "rGraphInputNodeInfo\022L\n\026graph_output_node"
  "_info\030\006 \003(\0132,.tensorflow.GraphTransferGr"
  "aphOutputNodeInfo\022>\n\013destination\030\007 \001(\0162)"
  ".tensorflow.GraphTransferInfo.Destinatio"
  "n\"#\n\013Destination\022\007\n\003NOP\020\000\022\013\n\007HEXAGON\020\001B\223"
  "\001\n\030org.tensorflow.frameworkB\026GraphTransf"
  "erInfoProtoP\001ZZgithub.com/tensorflow/ten"
  "sorflow/tensorflow/go/core/framework/gra"
  "ph_transfer_info_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_sccs[8] = {
  &scc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
  &scc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto, "tensorflow/core/framework/graph_transfer_info.proto", 1516,
  &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto, 8, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphTransferInfo_Destination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[0];
}
bool GraphTransferInfo_Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GraphTransferInfo_Destination GraphTransferInfo::NOP;
constexpr GraphTransferInfo_Destination GraphTransferInfo::HEXAGON;
constexpr GraphTransferInfo_Destination GraphTransferInfo::Destination_MIN;
constexpr GraphTransferInfo_Destination GraphTransferInfo::Destination_MAX;
constexpr int GraphTransferInfo::Destination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GraphTransferNodeInput::InitAsDefaultInstance() {
}
class GraphTransferNodeInput::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeInput::kNodeIdFieldNumber;
const int GraphTransferNodeInput::kOutputPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeInput::GraphTransferNodeInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeInput)
}
GraphTransferNodeInput::GraphTransferNodeInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInput)
}
GraphTransferNodeInput::GraphTransferNodeInput(const GraphTransferNodeInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_port_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(output_port_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInput)
}

void GraphTransferNodeInput::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_port_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(output_port_));
}

GraphTransferNodeInput::~GraphTransferNodeInput() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInput)
  SharedDtor();
}

void GraphTransferNodeInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GraphTransferNodeInput::ArenaDtor(void* object) {
  GraphTransferNodeInput* _this = reinterpret_cast< GraphTransferNodeInput* >(object);
  (void)_this;
}
void GraphTransferNodeInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferNodeInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferNodeInput& GraphTransferNodeInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferNodeInput_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferNodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_port_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(output_port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferNodeInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferNodeInput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeInput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 output_port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferNodeInput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // int32 output_port = 2;
  if (this->output_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->output_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeInput)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferNodeInput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // int32 output_port = 2;
  if (this->output_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->output_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInput)
  return target;
}

size_t GraphTransferNodeInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // int32 output_port = 2;
  if (this->output_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->output_port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferNodeInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferNodeInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferNodeInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeInput)
    MergeFrom(*source);
  }
}

void GraphTransferNodeInput::MergeFrom(const GraphTransferNodeInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.output_port() != 0) {
    set_output_port(from.output_port());
  }
}

void GraphTransferNodeInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeInput::CopyFrom(const GraphTransferNodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInput::IsInitialized() const {
  return true;
}

void GraphTransferNodeInput::Swap(GraphTransferNodeInput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeInput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferNodeInput::UnsafeArenaSwap(GraphTransferNodeInput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeInput::InternalSwap(GraphTransferNodeInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_id_, other->node_id_);
  swap(output_port_, other->output_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferNodeInfo::InitAsDefaultInstance() {
}
class GraphTransferNodeInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeInfo::kNameFieldNumber;
const int GraphTransferNodeInfo::kNodeIdFieldNumber;
const int GraphTransferNodeInfo::kTypeNameFieldNumber;
const int GraphTransferNodeInfo::kSocOpIdFieldNumber;
const int GraphTransferNodeInfo::kPaddingIdFieldNumber;
const int GraphTransferNodeInfo::kInputCountFieldNumber;
const int GraphTransferNodeInfo::kOutputCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeInfo::GraphTransferNodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeInfo)
}
GraphTransferNodeInfo::GraphTransferNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInfo)
}
GraphTransferNodeInfo::GraphTransferNodeInfo(const GraphTransferNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.type_name().size() > 0) {
    type_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_count_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(output_count_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInfo)
}

void GraphTransferNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_count_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(output_count_));
}

GraphTransferNodeInfo::~GraphTransferNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInfo)
  SharedDtor();
}

void GraphTransferNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphTransferNodeInfo::ArenaDtor(void* object) {
  GraphTransferNodeInfo* _this = reinterpret_cast< GraphTransferNodeInfo* >(object);
  (void)_this;
}
void GraphTransferNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferNodeInfo& GraphTransferNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_count_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(output_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.GraphTransferNodeInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type_name(), ptr, ctx, "tensorflow.GraphTransferNodeInfo.type_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 soc_op_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          soc_op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 padding_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          padding_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 input_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          input_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          output_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferNodeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type_name().data(), static_cast<int>(this->type_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferNodeInfo.type_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 soc_op_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &soc_op_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 padding_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 input_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 output_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferNodeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // string type_name = 3;
  if (this->type_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), static_cast<int>(this->type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.type_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_name(), output);
  }

  // int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->soc_op_id(), output);
  }

  // int32 padding_id = 5;
  if (this->padding_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->padding_id(), output);
  }

  // int32 input_count = 6;
  if (this->input_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->input_count(), output);
  }

  // int32 output_count = 7;
  if (this->output_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->output_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferNodeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // string type_name = 3;
  if (this->type_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type_name().data(), static_cast<int>(this->type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.type_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  // int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->soc_op_id(), target);
  }

  // int32 padding_id = 5;
  if (this->padding_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->padding_id(), target);
  }

  // int32 input_count = 6;
  if (this->input_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->input_count(), target);
  }

  // int32 output_count = 7;
  if (this->output_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->output_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInfo)
  return target;
}

size_t GraphTransferNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type_name = 3;
  if (this->type_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type_name());
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // int32 soc_op_id = 4;
  if (this->soc_op_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->soc_op_id());
  }

  // int32 padding_id = 5;
  if (this->padding_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->padding_id());
  }

  // int32 input_count = 6;
  if (this->input_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->input_count());
  }

  // int32 output_count = 7;
  if (this->output_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->output_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferNodeInfo::MergeFrom(const GraphTransferNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.type_name().size() > 0) {
    set_type_name(from.type_name());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.soc_op_id() != 0) {
    set_soc_op_id(from.soc_op_id());
  }
  if (from.padding_id() != 0) {
    set_padding_id(from.padding_id());
  }
  if (from.input_count() != 0) {
    set_input_count(from.input_count());
  }
  if (from.output_count() != 0) {
    set_output_count(from.output_count());
  }
}

void GraphTransferNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeInfo::CopyFrom(const GraphTransferNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferNodeInfo::Swap(GraphTransferNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferNodeInfo::UnsafeArenaSwap(GraphTransferNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeInfo::InternalSwap(GraphTransferNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_name_.Swap(&other->type_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(soc_op_id_, other->soc_op_id_);
  swap(padding_id_, other->padding_id_);
  swap(input_count_, other->input_count_);
  swap(output_count_, other->output_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferConstNodeInfo::InitAsDefaultInstance() {
}
class GraphTransferConstNodeInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferConstNodeInfo::kNameFieldNumber;
const int GraphTransferConstNodeInfo::kNodeIdFieldNumber;
const int GraphTransferConstNodeInfo::kShapeFieldNumber;
const int GraphTransferConstNodeInfo::kDataFieldNumber;
const int GraphTransferConstNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferConstNodeInfo::GraphTransferConstNodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferConstNodeInfo)
}
GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferConstNodeInfo)
}
GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(const GraphTransferConstNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferConstNodeInfo)
}

void GraphTransferConstNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(dtype_));
}

GraphTransferConstNodeInfo::~GraphTransferConstNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferConstNodeInfo)
  SharedDtor();
}

void GraphTransferConstNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphTransferConstNodeInfo::ArenaDtor(void* object) {
  GraphTransferConstNodeInfo* _this = reinterpret_cast< GraphTransferConstNodeInfo* >(object);
  (void)_this;
}
void GraphTransferConstNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferConstNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferConstNodeInfo& GraphTransferConstNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferConstNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferConstNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferConstNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(dtype_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferConstNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.GraphTransferConstNodeInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferConstNodeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferConstNodeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferConstNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferConstNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferConstNodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferConstNodeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferConstNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferConstNodeInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // repeated int64 shape = 3;
  if (this->shape_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->dtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferConstNodeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferConstNodeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferConstNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferConstNodeInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // repeated int64 shape = 3;
  if (this->shape_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape_, target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->dtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferConstNodeInfo)
  return target;
}

size_t GraphTransferConstNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferConstNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  // .tensorflow.DataType dtype = 5;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferConstNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferConstNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferConstNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferConstNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferConstNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferConstNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferConstNodeInfo::MergeFrom(const GraphTransferConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferConstNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferConstNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferConstNodeInfo::CopyFrom(const GraphTransferConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferConstNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferConstNodeInfo::Swap(GraphTransferConstNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferConstNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferConstNodeInfo::UnsafeArenaSwap(GraphTransferConstNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferConstNodeInfo::InternalSwap(GraphTransferConstNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferConstNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferNodeInputInfo::InitAsDefaultInstance() {
}
class GraphTransferNodeInputInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeInputInfo::kNodeIdFieldNumber;
const int GraphTransferNodeInputInfo::kNodeInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeInputInfo::GraphTransferNodeInputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeInputInfo)
}
GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  node_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInputInfo)
}
GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(const GraphTransferNodeInputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_input_(from.node_input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInputInfo)
}

void GraphTransferNodeInputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  node_id_ = 0;
}

GraphTransferNodeInputInfo::~GraphTransferNodeInputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInputInfo)
  SharedDtor();
}

void GraphTransferNodeInputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GraphTransferNodeInputInfo::ArenaDtor(void* object) {
  GraphTransferNodeInputInfo* _this = reinterpret_cast< GraphTransferNodeInputInfo* >(object);
  (void)_this;
}
void GraphTransferNodeInputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferNodeInputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferNodeInputInfo& GraphTransferNodeInputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferNodeInputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferNodeInputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_input_.Clear();
  node_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferNodeInputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_node_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferNodeInputInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeInputInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_node_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeInputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeInputInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferNodeInputInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeInputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_input_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->node_input(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeInputInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferNodeInputInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_input_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->node_input(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInputInfo)
  return target;
}

size_t GraphTransferNodeInputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInputInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->node_input_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->node_input(static_cast<int>(i)));
    }
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferNodeInputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeInputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferNodeInputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferNodeInputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeInputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeInputInfo)
    MergeFrom(*source);
  }
}

void GraphTransferNodeInputInfo::MergeFrom(const GraphTransferNodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_input_.MergeFrom(from.node_input_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void GraphTransferNodeInputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeInputInfo::CopyFrom(const GraphTransferNodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInputInfo::IsInitialized() const {
  return true;
}

void GraphTransferNodeInputInfo::Swap(GraphTransferNodeInputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeInputInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferNodeInputInfo::UnsafeArenaSwap(GraphTransferNodeInputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeInputInfo::InternalSwap(GraphTransferNodeInputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&node_input_)->InternalSwap(CastToBase(&other->node_input_));
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeInputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferNodeOutputInfo::InitAsDefaultInstance() {
}
class GraphTransferNodeOutputInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferNodeOutputInfo::kNodeIdFieldNumber;
const int GraphTransferNodeOutputInfo::kMaxByteSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferNodeOutputInfo)
}
GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  max_byte_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeOutputInfo)
}
GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(const GraphTransferNodeOutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      max_byte_size_(from.max_byte_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeOutputInfo)
}

void GraphTransferNodeOutputInfo::SharedCtor() {
  node_id_ = 0;
}

GraphTransferNodeOutputInfo::~GraphTransferNodeOutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeOutputInfo)
  SharedDtor();
}

void GraphTransferNodeOutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GraphTransferNodeOutputInfo::ArenaDtor(void* object) {
  GraphTransferNodeOutputInfo* _this = reinterpret_cast< GraphTransferNodeOutputInfo* >(object);
  (void)_this;
}
void GraphTransferNodeOutputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferNodeOutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferNodeOutputInfo& GraphTransferNodeOutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferNodeOutputInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferNodeOutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeOutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_byte_size_.Clear();
  node_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferNodeOutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 max_byte_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_max_byte_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_max_byte_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferNodeOutputInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferNodeOutputInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 node_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 max_byte_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_max_byte_size())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_max_byte_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferNodeOutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferNodeOutputInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferNodeOutputInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferNodeOutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // repeated int32 max_byte_size = 2;
  if (this->max_byte_size_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_max_byte_size_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->max_byte_size_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->max_byte_size(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferNodeOutputInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferNodeOutputInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeOutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // repeated int32 max_byte_size = 2;
  if (this->max_byte_size_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _max_byte_size_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->max_byte_size_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeOutputInfo)
  return target;
}

size_t GraphTransferNodeOutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeOutputInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 max_byte_size = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->max_byte_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _max_byte_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->node_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferNodeOutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferNodeOutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferNodeOutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferNodeOutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferNodeOutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferNodeOutputInfo)
    MergeFrom(*source);
  }
}

void GraphTransferNodeOutputInfo::MergeFrom(const GraphTransferNodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeOutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  max_byte_size_.MergeFrom(from.max_byte_size_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void GraphTransferNodeOutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferNodeOutputInfo::CopyFrom(const GraphTransferNodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeOutputInfo::IsInitialized() const {
  return true;
}

void GraphTransferNodeOutputInfo::Swap(GraphTransferNodeOutputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferNodeOutputInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferNodeOutputInfo::UnsafeArenaSwap(GraphTransferNodeOutputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferNodeOutputInfo::InternalSwap(GraphTransferNodeOutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  max_byte_size_.InternalSwap(&other->max_byte_size_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeOutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferGraphInputNodeInfo::InitAsDefaultInstance() {
}
class GraphTransferGraphInputNodeInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferGraphInputNodeInfo::kNameFieldNumber;
const int GraphTransferGraphInputNodeInfo::kShapeFieldNumber;
const int GraphTransferGraphInputNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}
GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}
GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(const GraphTransferGraphInputNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}

void GraphTransferGraphInputNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

GraphTransferGraphInputNodeInfo::~GraphTransferGraphInputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferGraphInputNodeInfo)
  SharedDtor();
}

void GraphTransferGraphInputNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphTransferGraphInputNodeInfo::ArenaDtor(void* object) {
  GraphTransferGraphInputNodeInfo* _this = reinterpret_cast< GraphTransferGraphInputNodeInfo* >(object);
  (void)_this;
}
void GraphTransferGraphInputNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferGraphInputNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferGraphInputNodeInfo& GraphTransferGraphInputNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferGraphInputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferGraphInputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferGraphInputNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferGraphInputNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.GraphTransferGraphInputNodeInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferGraphInputNodeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferGraphInputNodeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferGraphInputNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferGraphInputNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferGraphInputNodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferGraphInputNodeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferGraphInputNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphInputNodeInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferGraphInputNodeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferGraphInputNodeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferGraphInputNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphInputNodeInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape_, target);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferGraphInputNodeInfo)
  return target;
}

size_t GraphTransferGraphInputNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferGraphInputNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferGraphInputNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferGraphInputNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferGraphInputNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferGraphInputNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferGraphInputNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferGraphInputNodeInfo::MergeFrom(const GraphTransferGraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferGraphInputNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferGraphInputNodeInfo::CopyFrom(const GraphTransferGraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferGraphInputNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferGraphInputNodeInfo::Swap(GraphTransferGraphInputNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferGraphInputNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferGraphInputNodeInfo::UnsafeArenaSwap(GraphTransferGraphInputNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferGraphInputNodeInfo::InternalSwap(GraphTransferGraphInputNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferGraphInputNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferGraphOutputNodeInfo::InitAsDefaultInstance() {
}
class GraphTransferGraphOutputNodeInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferGraphOutputNodeInfo::kNameFieldNumber;
const int GraphTransferGraphOutputNodeInfo::kShapeFieldNumber;
const int GraphTransferGraphOutputNodeInfo::kDtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}
GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}
GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(const GraphTransferGraphOutputNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}

void GraphTransferGraphOutputNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

GraphTransferGraphOutputNodeInfo::~GraphTransferGraphOutputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferGraphOutputNodeInfo)
  SharedDtor();
}

void GraphTransferGraphOutputNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphTransferGraphOutputNodeInfo::ArenaDtor(void* object) {
  GraphTransferGraphOutputNodeInfo* _this = reinterpret_cast< GraphTransferGraphOutputNodeInfo* >(object);
  (void)_this;
}
void GraphTransferGraphOutputNodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferGraphOutputNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferGraphOutputNodeInfo& GraphTransferGraphOutputNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferGraphOutputNodeInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferGraphOutputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferGraphOutputNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.GraphTransferGraphOutputNodeInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferGraphOutputNodeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphTransferGraphOutputNodeInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 shape = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferGraphOutputNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferGraphOutputNodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferGraphOutputNodeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphOutputNodeInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->dtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferGraphOutputNodeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferGraphOutputNodeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphOutputNodeInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int64 shape = 2;
  if (this->shape_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape_, target);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->dtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferGraphOutputNodeInfo)
  return target;
}

size_t GraphTransferGraphOutputNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferGraphOutputNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferGraphOutputNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferGraphOutputNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferGraphOutputNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferGraphOutputNodeInfo)
    MergeFrom(*source);
  }
}

void GraphTransferGraphOutputNodeInfo::MergeFrom(const GraphTransferGraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void GraphTransferGraphOutputNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferGraphOutputNodeInfo::CopyFrom(const GraphTransferGraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferGraphOutputNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferGraphOutputNodeInfo::Swap(GraphTransferGraphOutputNodeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferGraphOutputNodeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferGraphOutputNodeInfo::UnsafeArenaSwap(GraphTransferGraphOutputNodeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferGraphOutputNodeInfo::InternalSwap(GraphTransferGraphOutputNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferGraphOutputNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTransferInfo::InitAsDefaultInstance() {
}
class GraphTransferInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphTransferInfo::kNodeInfoFieldNumber;
const int GraphTransferInfo::kConstNodeInfoFieldNumber;
const int GraphTransferInfo::kNodeInputInfoFieldNumber;
const int GraphTransferInfo::kNodeOutputInfoFieldNumber;
const int GraphTransferInfo::kGraphInputNodeInfoFieldNumber;
const int GraphTransferInfo::kGraphOutputNodeInfoFieldNumber;
const int GraphTransferInfo::kDestinationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphTransferInfo::GraphTransferInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphTransferInfo)
}
GraphTransferInfo::GraphTransferInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  node_info_(arena),
  const_node_info_(arena),
  node_input_info_(arena),
  node_output_info_(arena),
  graph_input_node_info_(arena),
  graph_output_node_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo)
}
GraphTransferInfo::GraphTransferInfo(const GraphTransferInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_info_(from.node_info_),
      const_node_info_(from.const_node_info_),
      node_input_info_(from.node_input_info_),
      node_output_info_(from.node_output_info_),
      graph_input_node_info_(from.graph_input_node_info_),
      graph_output_node_info_(from.graph_output_node_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_ = from.destination_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo)
}

void GraphTransferInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTransferInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  destination_ = 0;
}

GraphTransferInfo::~GraphTransferInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo)
  SharedDtor();
}

void GraphTransferInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GraphTransferInfo::ArenaDtor(void* object) {
  GraphTransferInfo* _this = reinterpret_cast< GraphTransferInfo* >(object);
  (void)_this;
}
void GraphTransferInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphTransferInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTransferInfo& GraphTransferInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTransferInfo_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphTransferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_info_.Clear();
  const_node_info_.Clear();
  node_input_info_.Clear();
  node_output_info_.Clear();
  graph_input_node_info_.Clear();
  graph_output_node_info_.Clear();
  destination_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphTransferInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_const_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_node_input_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_node_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_graph_input_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_graph_output_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphTransferInfo.Destination destination = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_destination(static_cast<::tensorflow::GraphTransferInfo_Destination>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphTransferInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphTransferInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_const_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_node_input_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_node_output_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_graph_input_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_graph_output_node_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphTransferInfo.Destination destination = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_destination(static_cast< ::tensorflow::GraphTransferInfo_Destination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphTransferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphTransferInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphTransferInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphTransferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_info(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->const_node_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->const_node_info(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_input_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->node_input_info(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_output_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->node_output_info(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->graph_input_node_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->graph_input_node_info(static_cast<int>(i)),
      output);
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->graph_output_node_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->graph_output_node_info(static_cast<int>(i)),
      output);
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->destination(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphTransferInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTransferInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_info(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->const_node_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->const_node_info(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_input_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->node_input_info(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_output_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->node_output_info(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->graph_input_node_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->graph_input_node_info(static_cast<int>(i)), target);
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->graph_output_node_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->graph_output_node_info(static_cast<int>(i)), target);
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->destination(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo)
  return target;
}

size_t GraphTransferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->node_info(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->const_node_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->const_node_info(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->node_input_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->node_input_info(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->node_output_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->node_output_info(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_input_node_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->graph_input_node_info(static_cast<int>(i)));
    }
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->graph_output_node_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->graph_output_node_info(static_cast<int>(i)));
    }
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->destination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->destination());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTransferInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphTransferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTransferInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTransferInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphTransferInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphTransferInfo)
    MergeFrom(*source);
  }
}

void GraphTransferInfo::MergeFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_info_.MergeFrom(from.node_info_);
  const_node_info_.MergeFrom(from.const_node_info_);
  node_input_info_.MergeFrom(from.node_input_info_);
  node_output_info_.MergeFrom(from.node_output_info_);
  graph_input_node_info_.MergeFrom(from.graph_input_node_info_);
  graph_output_node_info_.MergeFrom(from.graph_output_node_info_);
  if (from.destination() != 0) {
    set_destination(from.destination());
  }
}

void GraphTransferInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTransferInfo::CopyFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo::Swap(GraphTransferInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphTransferInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphTransferInfo::UnsafeArenaSwap(GraphTransferInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphTransferInfo::InternalSwap(GraphTransferInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&node_info_)->InternalSwap(CastToBase(&other->node_info_));
  CastToBase(&const_node_info_)->InternalSwap(CastToBase(&other->const_node_info_));
  CastToBase(&node_input_info_)->InternalSwap(CastToBase(&other->node_input_info_));
  CastToBase(&node_output_info_)->InternalSwap(CastToBase(&other->node_output_info_));
  CastToBase(&graph_input_node_info_)->InternalSwap(CastToBase(&other->graph_input_node_info_));
  CastToBase(&graph_output_node_info_)->InternalSwap(CastToBase(&other->graph_output_node_info_));
  swap(destination_, other->destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeInput* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeInput >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferConstNodeInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferConstNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferConstNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeInputInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeInputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeInputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeOutputInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeOutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeOutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferGraphInputNodeInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferGraphInputNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferGraphInputNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferGraphOutputNodeInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferGraphOutputNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferGraphOutputNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphTransferInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
