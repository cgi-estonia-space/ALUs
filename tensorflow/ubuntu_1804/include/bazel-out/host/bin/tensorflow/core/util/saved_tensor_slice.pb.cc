// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/saved_tensor_slice.proto

#include "tensorflow/core/util/saved_tensor_slice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorSliceProto_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fversions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionDef_tensorflow_2fcore_2fframework_2fversions_2eproto;
namespace tensorflow {
class SavedSliceMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavedSliceMeta> _instance;
} _SavedSliceMeta_default_instance_;
class SavedTensorSliceMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavedTensorSliceMeta> _instance;
} _SavedTensorSliceMeta_default_instance_;
class SavedSliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavedSlice> _instance;
} _SavedSlice_default_instance_;
class SavedTensorSlicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SavedTensorSlices> _instance;
} _SavedTensorSlices_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SavedSlice_default_instance_;
    new (ptr) ::tensorflow::SavedSlice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SavedSlice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto}, {
      &scc_info_TensorSliceProto_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SavedSliceMeta_default_instance_;
    new (ptr) ::tensorflow::SavedSliceMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SavedSliceMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_TensorSliceProto_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto.base,}};

static void InitDefaultsscc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SavedTensorSliceMeta_default_instance_;
    new (ptr) ::tensorflow::SavedTensorSliceMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SavedTensorSliceMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto}, {
      &scc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,
      &scc_info_VersionDef_tensorflow_2fcore_2fframework_2fversions_2eproto.base,}};

static void InitDefaultsscc_info_SavedTensorSlices_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SavedTensorSlices_default_instance_;
    new (ptr) ::tensorflow::SavedTensorSlices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SavedTensorSlices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedTensorSlices_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SavedTensorSlices_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto}, {
      &scc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,
      &scc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, slice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, slice_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, meta_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::SavedSliceMeta)},
  { 9, -1, sizeof(::tensorflow::SavedTensorSliceMeta)},
  { 16, -1, sizeof(::tensorflow::SavedSlice)},
  { 24, -1, sizeof(::tensorflow::SavedTensorSlices)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedSliceMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedTensorSliceMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SavedTensorSlices_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[] =
  "\n-tensorflow/core/util/saved_tensor_slic"
  "e.proto\022\ntensorflow\032,tensorflow/core/fra"
  "mework/tensor_shape.proto\032,tensorflow/co"
  "re/framework/tensor_slice.proto\032&tensorf"
  "low/core/framework/tensor.proto\032%tensorf"
  "low/core/framework/types.proto\032(tensorfl"
  "ow/core/framework/versions.proto\"\234\001\n\016Sav"
  "edSliceMeta\022\014\n\004name\030\001 \001(\t\022+\n\005shape\030\002 \001(\013"
  "2\034.tensorflow.TensorShapeProto\022\"\n\004type\030\003"
  " \001(\0162\024.tensorflow.DataType\022+\n\005slice\030\004 \003("
  "\0132\034.tensorflow.TensorSliceProto\"l\n\024Saved"
  "TensorSliceMeta\022*\n\006tensor\030\001 \003(\0132\032.tensor"
  "flow.SavedSliceMeta\022(\n\010versions\030\002 \001(\0132\026."
  "tensorflow.VersionDef\"n\n\nSavedSlice\022\014\n\004n"
  "ame\030\001 \001(\t\022+\n\005slice\030\002 \001(\0132\034.tensorflow.Te"
  "nsorSliceProto\022%\n\004data\030\003 \001(\0132\027.tensorflo"
  "w.TensorProto\"i\n\021SavedTensorSlices\022.\n\004me"
  "ta\030\001 \001(\0132 .tensorflow.SavedTensorSliceMe"
  "ta\022$\n\004data\030\002 \001(\0132\026.tensorflow.SavedSlice"
  "B2\n\023org.tensorflow.utilB\026SavedTensorSlic"
  "eProtosP\001\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_deps[5] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fversions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_sccs[4] = {
  &scc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,
  &scc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,
  &scc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,
  &scc_info_SavedTensorSlices_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = {
  &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, "tensorflow/core/util/saved_tensor_slice.proto", 820,
  &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once, descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_sccs, descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_deps, 4, 5,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, 4, file_level_enum_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, file_level_service_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto), true);
namespace tensorflow {

// ===================================================================

void SavedSliceMeta::InitAsDefaultInstance() {
  ::tensorflow::_SavedSliceMeta_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
class SavedSliceMeta::HasBitSetters {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const SavedSliceMeta* msg);
};

const ::tensorflow::TensorShapeProto&
SavedSliceMeta::HasBitSetters::shape(const SavedSliceMeta* msg) {
  return *msg->shape_;
}
void SavedSliceMeta::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == nullptr) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSliceMeta.shape)
}
void SavedSliceMeta::clear_shape() {
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
void SavedSliceMeta::clear_slice() {
  slice_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedSliceMeta::kNameFieldNumber;
const int SavedSliceMeta::kShapeFieldNumber;
const int SavedSliceMeta::kTypeFieldNumber;
const int SavedSliceMeta::kSliceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedSliceMeta::SavedSliceMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedSliceMeta)
}
SavedSliceMeta::SavedSliceMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  slice_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSliceMeta)
}
SavedSliceMeta::SavedSliceMeta(const SavedSliceMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      slice_(from.slice_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSliceMeta)
}

void SavedSliceMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(type_));
}

SavedSliceMeta::~SavedSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSliceMeta)
  SharedDtor();
}

void SavedSliceMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void SavedSliceMeta::ArenaDtor(void* object) {
  SavedSliceMeta* _this = reinterpret_cast< SavedSliceMeta* >(object);
  (void)_this;
}
void SavedSliceMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedSliceMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavedSliceMeta& SavedSliceMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavedSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  return *internal_default_instance();
}


void SavedSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SavedSliceMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.SavedSliceMeta.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorSliceProto slice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_slice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SavedSliceMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedSliceMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.SavedSliceMeta.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TensorSliceProto slice = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_slice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedSliceMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedSliceMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SavedSliceMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSliceMeta.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::shape(this), output);
  }

  // .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slice_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->slice(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SavedSliceMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedSliceMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSliceMeta.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::shape(this), target);
  }

  // .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slice_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->slice(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSliceMeta)
  return target;
}

size_t SavedSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSliceMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorSliceProto slice = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->slice_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->slice(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .tensorflow.DataType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedSliceMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedSliceMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedSliceMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedSliceMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedSliceMeta)
    MergeFrom(*source);
  }
}

void SavedSliceMeta::MergeFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slice_.MergeFrom(from.slice_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SavedSliceMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedSliceMeta::CopyFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSliceMeta::IsInitialized() const {
  return true;
}

void SavedSliceMeta::Swap(SavedSliceMeta* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedSliceMeta* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SavedSliceMeta::UnsafeArenaSwap(SavedSliceMeta* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedSliceMeta::InternalSwap(SavedSliceMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&slice_)->InternalSwap(CastToBase(&other->slice_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSliceMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SavedTensorSliceMeta::InitAsDefaultInstance() {
  ::tensorflow::_SavedTensorSliceMeta_default_instance_._instance.get_mutable()->versions_ = const_cast< ::tensorflow::VersionDef*>(
      ::tensorflow::VersionDef::internal_default_instance());
}
class SavedTensorSliceMeta::HasBitSetters {
 public:
  static const ::tensorflow::VersionDef& versions(const SavedTensorSliceMeta* msg);
};

const ::tensorflow::VersionDef&
SavedTensorSliceMeta::HasBitSetters::versions(const SavedTensorSliceMeta* msg) {
  return *msg->versions_;
}
void SavedTensorSliceMeta::unsafe_arena_set_allocated_versions(
    ::tensorflow::VersionDef* versions) {
  if (GetArenaNoVirtual() == nullptr) {
    delete versions_;
  }
  versions_ = versions;
  if (versions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedTensorSliceMeta.versions)
}
void SavedTensorSliceMeta::clear_versions() {
  if (GetArenaNoVirtual() == nullptr && versions_ != nullptr) {
    delete versions_;
  }
  versions_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedTensorSliceMeta::kTensorFieldNumber;
const int SavedTensorSliceMeta::kVersionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedTensorSliceMeta::SavedTensorSliceMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedTensorSliceMeta)
}
SavedTensorSliceMeta::SavedTensorSliceMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSliceMeta)
}
SavedTensorSliceMeta::SavedTensorSliceMeta(const SavedTensorSliceMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tensor_(from.tensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_versions()) {
    versions_ = new ::tensorflow::VersionDef(*from.versions_);
  } else {
    versions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSliceMeta)
}

void SavedTensorSliceMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  versions_ = nullptr;
}

SavedTensorSliceMeta::~SavedTensorSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSliceMeta)
  SharedDtor();
}

void SavedTensorSliceMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete versions_;
}

void SavedTensorSliceMeta::ArenaDtor(void* object) {
  SavedTensorSliceMeta* _this = reinterpret_cast< SavedTensorSliceMeta* >(object);
  (void)_this;
}
void SavedTensorSliceMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedTensorSliceMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavedTensorSliceMeta& SavedTensorSliceMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavedTensorSliceMeta_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  return *internal_default_instance();
}


void SavedTensorSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensor_.Clear();
  if (GetArenaNoVirtual() == nullptr && versions_ != nullptr) {
    delete versions_;
  }
  versions_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SavedTensorSliceMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.SavedSliceMeta tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VersionDef versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_versions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SavedTensorSliceMeta::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedTensorSliceMeta)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.SavedSliceMeta tensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VersionDef versions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedTensorSliceMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedTensorSliceMeta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SavedTensorSliceMeta::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedTensorSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tensor(static_cast<int>(i)),
      output);
  }

  // .tensorflow.VersionDef versions = 2;
  if (this->has_versions()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::versions(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SavedTensorSliceMeta)
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedTensorSliceMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSliceMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tensor(static_cast<int>(i)), target);
  }

  // .tensorflow.VersionDef versions = 2;
  if (this->has_versions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::versions(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSliceMeta)
  return target;
}

size_t SavedTensorSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSliceMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tensor(static_cast<int>(i)));
    }
  }

  // .tensorflow.VersionDef versions = 2;
  if (this->has_versions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *versions_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTensorSliceMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedTensorSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedTensorSliceMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedTensorSliceMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedTensorSliceMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedTensorSliceMeta)
    MergeFrom(*source);
  }
}

void SavedTensorSliceMeta::MergeFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSliceMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensor_.MergeFrom(from.tensor_);
  if (from.has_versions()) {
    mutable_versions()->::tensorflow::VersionDef::MergeFrom(from.versions());
  }
}

void SavedTensorSliceMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedTensorSliceMeta::CopyFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTensorSliceMeta::IsInitialized() const {
  return true;
}

void SavedTensorSliceMeta::Swap(SavedTensorSliceMeta* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedTensorSliceMeta* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SavedTensorSliceMeta::UnsafeArenaSwap(SavedTensorSliceMeta* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedTensorSliceMeta::InternalSwap(SavedTensorSliceMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tensor_)->InternalSwap(CastToBase(&other->tensor_));
  swap(versions_, other->versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedTensorSliceMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SavedSlice::InitAsDefaultInstance() {
  ::tensorflow::_SavedSlice_default_instance_._instance.get_mutable()->slice_ = const_cast< ::tensorflow::TensorSliceProto*>(
      ::tensorflow::TensorSliceProto::internal_default_instance());
  ::tensorflow::_SavedSlice_default_instance_._instance.get_mutable()->data_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class SavedSlice::HasBitSetters {
 public:
  static const ::tensorflow::TensorSliceProto& slice(const SavedSlice* msg);
  static const ::tensorflow::TensorProto& data(const SavedSlice* msg);
};

const ::tensorflow::TensorSliceProto&
SavedSlice::HasBitSetters::slice(const SavedSlice* msg) {
  return *msg->slice_;
}
const ::tensorflow::TensorProto&
SavedSlice::HasBitSetters::data(const SavedSlice* msg) {
  return *msg->data_;
}
void SavedSlice::unsafe_arena_set_allocated_slice(
    ::tensorflow::TensorSliceProto* slice) {
  if (GetArenaNoVirtual() == nullptr) {
    delete slice_;
  }
  slice_ = slice;
  if (slice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSlice.slice)
}
void SavedSlice::clear_slice() {
  if (GetArenaNoVirtual() == nullptr && slice_ != nullptr) {
    delete slice_;
  }
  slice_ = nullptr;
}
void SavedSlice::unsafe_arena_set_allocated_data(
    ::tensorflow::TensorProto* data) {
  if (GetArenaNoVirtual() == nullptr) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedSlice.data)
}
void SavedSlice::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedSlice::kNameFieldNumber;
const int SavedSlice::kSliceFieldNumber;
const int SavedSlice::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedSlice::SavedSlice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedSlice)
}
SavedSlice::SavedSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSlice)
}
SavedSlice::SavedSlice(const SavedSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_slice()) {
    slice_ = new ::tensorflow::TensorSliceProto(*from.slice_);
  } else {
    slice_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::tensorflow::TensorProto(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSlice)
}

void SavedSlice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&slice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&slice_)) + sizeof(data_));
}

SavedSlice::~SavedSlice() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSlice)
  SharedDtor();
}

void SavedSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete slice_;
  if (this != internal_default_instance()) delete data_;
}

void SavedSlice::ArenaDtor(void* object) {
  SavedSlice* _this = reinterpret_cast< SavedSlice* >(object);
  (void)_this;
}
void SavedSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavedSlice& SavedSlice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavedSlice_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  return *internal_default_instance();
}


void SavedSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && slice_ != nullptr) {
    delete slice_;
  }
  slice_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SavedSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.SavedSlice.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorSliceProto slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_slice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SavedSlice::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedSlice)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.SavedSlice.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorSliceProto slice = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_slice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorProto data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedSlice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedSlice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SavedSlice::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSlice.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::slice(this), output);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SavedSlice)
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedSlice::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSlice.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::slice(this), target);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSlice)
  return target;
}

size_t SavedSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSlice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->has_slice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slice_);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedSlice)
    MergeFrom(*source);
  }
}

void SavedSlice::MergeFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_slice()) {
    mutable_slice()->::tensorflow::TensorSliceProto::MergeFrom(from.slice());
  }
  if (from.has_data()) {
    mutable_data()->::tensorflow::TensorProto::MergeFrom(from.data());
  }
}

void SavedSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedSlice::CopyFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSlice::IsInitialized() const {
  return true;
}

void SavedSlice::Swap(SavedSlice* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedSlice* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SavedSlice::UnsafeArenaSwap(SavedSlice* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedSlice::InternalSwap(SavedSlice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(slice_, other->slice_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSlice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SavedTensorSlices::InitAsDefaultInstance() {
  ::tensorflow::_SavedTensorSlices_default_instance_._instance.get_mutable()->meta_ = const_cast< ::tensorflow::SavedTensorSliceMeta*>(
      ::tensorflow::SavedTensorSliceMeta::internal_default_instance());
  ::tensorflow::_SavedTensorSlices_default_instance_._instance.get_mutable()->data_ = const_cast< ::tensorflow::SavedSlice*>(
      ::tensorflow::SavedSlice::internal_default_instance());
}
class SavedTensorSlices::HasBitSetters {
 public:
  static const ::tensorflow::SavedTensorSliceMeta& meta(const SavedTensorSlices* msg);
  static const ::tensorflow::SavedSlice& data(const SavedTensorSlices* msg);
};

const ::tensorflow::SavedTensorSliceMeta&
SavedTensorSlices::HasBitSetters::meta(const SavedTensorSlices* msg) {
  return *msg->meta_;
}
const ::tensorflow::SavedSlice&
SavedTensorSlices::HasBitSetters::data(const SavedTensorSlices* msg) {
  return *msg->data_;
}
void SavedTensorSlices::unsafe_arena_set_allocated_meta(
    ::tensorflow::SavedTensorSliceMeta* meta) {
  if (GetArenaNoVirtual() == nullptr) {
    delete meta_;
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedTensorSlices.meta)
}
void SavedTensorSlices::unsafe_arena_set_allocated_data(
    ::tensorflow::SavedSlice* data) {
  if (GetArenaNoVirtual() == nullptr) {
    delete data_;
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.SavedTensorSlices.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SavedTensorSlices::kMetaFieldNumber;
const int SavedTensorSlices::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SavedTensorSlices::SavedTensorSlices()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SavedTensorSlices)
}
SavedTensorSlices::SavedTensorSlices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSlices)
}
SavedTensorSlices::SavedTensorSlices(const SavedTensorSlices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::tensorflow::SavedTensorSliceMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::tensorflow::SavedSlice(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSlices)
}

void SavedTensorSlices::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SavedTensorSlices_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(data_));
}

SavedTensorSlices::~SavedTensorSlices() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSlices)
  SharedDtor();
}

void SavedTensorSlices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete data_;
}

void SavedTensorSlices::ArenaDtor(void* object) {
  SavedTensorSlices* _this = reinterpret_cast< SavedTensorSlices* >(object);
  (void)_this;
}
void SavedTensorSlices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SavedTensorSlices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SavedTensorSlices& SavedTensorSlices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SavedTensorSlices_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto.base);
  return *internal_default_instance();
}


void SavedTensorSlices::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSlices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SavedTensorSlices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.SavedTensorSliceMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SavedSlice data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SavedTensorSlices::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SavedTensorSlices)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.SavedTensorSliceMeta meta = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.SavedSlice data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SavedTensorSlices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SavedTensorSlices)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SavedTensorSlices::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SavedTensorSlices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::meta(this), output);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SavedTensorSlices)
}

::PROTOBUF_NAMESPACE_ID::uint8* SavedTensorSlices::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSlices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::meta(this), target);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSlices)
  return target;
}

size_t SavedTensorSlices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSlices)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SavedTensorSlices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SavedTensorSlices)
  GOOGLE_DCHECK_NE(&from, this);
  const SavedTensorSlices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SavedTensorSlices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SavedTensorSlices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SavedTensorSlices)
    MergeFrom(*source);
  }
}

void SavedTensorSlices::MergeFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSlices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_meta()) {
    mutable_meta()->::tensorflow::SavedTensorSliceMeta::MergeFrom(from.meta());
  }
  if (from.has_data()) {
    mutable_data()->::tensorflow::SavedSlice::MergeFrom(from.data());
  }
}

void SavedTensorSlices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedTensorSlices::CopyFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTensorSlices::IsInitialized() const {
  return true;
}

void SavedTensorSlices::Swap(SavedTensorSlices* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SavedTensorSlices* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SavedTensorSlices::UnsafeArenaSwap(SavedTensorSlices* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SavedTensorSlices::InternalSwap(SavedTensorSlices* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedTensorSlices::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SavedSliceMeta* Arena::CreateMaybeMessage< ::tensorflow::SavedSliceMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedSliceMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedTensorSliceMeta* Arena::CreateMaybeMessage< ::tensorflow::SavedTensorSliceMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedTensorSliceMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedSlice* Arena::CreateMaybeMessage< ::tensorflow::SavedSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedTensorSlices* Arena::CreateMaybeMessage< ::tensorflow::SavedTensorSlices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedTensorSlices >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
