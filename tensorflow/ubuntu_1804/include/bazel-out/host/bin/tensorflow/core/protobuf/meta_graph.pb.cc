// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/meta_graph.proto

#include "tensorflow/core/protobuf/meta_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetaGraphDef_CollectionDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetaGraphDef_SignatureDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpList_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fsaved_5fobject_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SavedObjectGraph_tensorflow_2fcore_2fprotobuf_2fsaved_5fobject_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaverDef_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDef_InputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDef_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
namespace tensorflow {
class MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse> _instance;
} _MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_default_instance_;
class MetaGraphDef_MetaInfoDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaGraphDef_MetaInfoDef> _instance;
} _MetaGraphDef_MetaInfoDef_default_instance_;
class MetaGraphDef_CollectionDefEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaGraphDef_CollectionDefEntry_DoNotUse> _instance;
} _MetaGraphDef_CollectionDefEntry_DoNotUse_default_instance_;
class MetaGraphDef_SignatureDefEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaGraphDef_SignatureDefEntry_DoNotUse> _instance;
} _MetaGraphDef_SignatureDefEntry_DoNotUse_default_instance_;
class MetaGraphDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaGraphDef> _instance;
} _MetaGraphDef_default_instance_;
class CollectionDef_NodeListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionDef_NodeList> _instance;
} _CollectionDef_NodeList_default_instance_;
class CollectionDef_BytesListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionDef_BytesList> _instance;
} _CollectionDef_BytesList_default_instance_;
class CollectionDef_Int64ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionDef_Int64List> _instance;
} _CollectionDef_Int64List_default_instance_;
class CollectionDef_FloatListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionDef_FloatList> _instance;
} _CollectionDef_FloatList_default_instance_;
class CollectionDef_AnyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionDef_AnyList> _instance;
} _CollectionDef_AnyList_default_instance_;
class CollectionDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionDef> _instance;
  const ::tensorflow::CollectionDef_NodeList* node_list_;
  const ::tensorflow::CollectionDef_BytesList* bytes_list_;
  const ::tensorflow::CollectionDef_Int64List* int64_list_;
  const ::tensorflow::CollectionDef_FloatList* float_list_;
  const ::tensorflow::CollectionDef_AnyList* any_list_;
} _CollectionDef_default_instance_;
class TensorInfo_CooSparseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorInfo_CooSparse> _instance;
} _TensorInfo_CooSparse_default_instance_;
class TensorInfo_CompositeTensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorInfo_CompositeTensor> _instance;
} _TensorInfo_CompositeTensor_default_instance_;
class TensorInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorInfo> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  const ::tensorflow::TensorInfo_CooSparse* coo_sparse_;
  const ::tensorflow::TensorInfo_CompositeTensor* composite_tensor_;
} _TensorInfo_default_instance_;
class SignatureDef_InputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDef_InputsEntry_DoNotUse> _instance;
} _SignatureDef_InputsEntry_DoNotUse_default_instance_;
class SignatureDef_OutputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDef_OutputsEntry_DoNotUse> _instance;
} _SignatureDef_OutputsEntry_DoNotUse_default_instance_;
class SignatureDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignatureDef> _instance;
} _SignatureDef_default_instance_;
class AssetFileDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssetFileDef> _instance;
} _AssetFileDef_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AssetFileDef_default_instance_;
    new (ptr) ::tensorflow::AssetFileDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AssetFileDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CollectionDef_default_instance_;
    new (ptr) ::tensorflow::CollectionDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CollectionDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CollectionDef_AnyList_default_instance_;
    new (ptr) ::tensorflow::CollectionDef_AnyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CollectionDef_AnyList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CollectionDef_BytesList_default_instance_;
    new (ptr) ::tensorflow::CollectionDef_BytesList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CollectionDef_BytesList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CollectionDef_FloatList_default_instance_;
    new (ptr) ::tensorflow::CollectionDef_FloatList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CollectionDef_FloatList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CollectionDef_Int64List_default_instance_;
    new (ptr) ::tensorflow::CollectionDef_Int64List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CollectionDef_Int64List::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CollectionDef_NodeList_default_instance_;
    new (ptr) ::tensorflow::CollectionDef_NodeList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CollectionDef_NodeList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_MetaGraphDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MetaGraphDef_default_instance_;
    new (ptr) ::tensorflow::MetaGraphDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MetaGraphDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MetaGraphDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_MetaGraphDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_GraphDef_tensorflow_2fcore_2fframework_2fgraph_2eproto.base,
      &scc_info_SaverDef_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto.base,
      &scc_info_MetaGraphDef_CollectionDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_MetaGraphDef_SignatureDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_SavedObjectGraph_tensorflow_2fcore_2fprotobuf_2fsaved_5fobject_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_MetaGraphDef_CollectionDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MetaGraphDef_CollectionDefEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse();
  }
  ::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetaGraphDef_CollectionDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetaGraphDef_CollectionDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MetaGraphDef_MetaInfoDef_default_instance_;
    new (ptr) ::tensorflow::MetaGraphDef_MetaInfoDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MetaGraphDef_MetaInfoDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_OpList_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse();
  }
  ::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_MetaGraphDef_SignatureDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MetaGraphDef_SignatureDefEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse();
  }
  ::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetaGraphDef_SignatureDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetaGraphDef_SignatureDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SignatureDef_default_instance_;
    new (ptr) ::tensorflow::SignatureDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SignatureDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_SignatureDef_InputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_SignatureDef_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDef_InputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SignatureDef_InputsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::SignatureDef_InputsEntry_DoNotUse();
  }
  ::tensorflow::SignatureDef_InputsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDef_InputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SignatureDef_InputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_SignatureDef_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SignatureDef_OutputsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::SignatureDef_OutputsEntry_DoNotUse();
  }
  ::tensorflow::SignatureDef_OutputsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignatureDef_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SignatureDef_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorInfo_CompositeTensor_default_instance_;
    new (ptr) ::tensorflow::TensorInfo_CompositeTensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::tensorflow::_TensorInfo_default_instance_;
    new (ptr) ::tensorflow::TensorInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorInfo_CompositeTensor::InitAsDefaultInstance();
  ::tensorflow::TensorInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {
      &scc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_DictValue_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_TensorInfo_CooSparse_default_instance_;
    new (ptr) ::tensorflow::TensorInfo_CooSparse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::TensorInfo_CooSparse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, meta_graph_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, stripped_op_list_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, any_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, tags_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, tensorflow_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, tensorflow_git_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, stripped_default_attrs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_MetaInfoDef, function_aliases_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, meta_info_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, saver_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, collection_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, signature_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, asset_file_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetaGraphDef, object_graph_def_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_NodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_NodeList, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_BytesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_BytesList, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_Int64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_Int64List, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_FloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_FloatList, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_AnyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef_AnyList, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::CollectionDefDefaultTypeInternal, node_list_),
  offsetof(::tensorflow::CollectionDefDefaultTypeInternal, bytes_list_),
  offsetof(::tensorflow::CollectionDefDefaultTypeInternal, int64_list_),
  offsetof(::tensorflow::CollectionDefDefaultTypeInternal, float_list_),
  offsetof(::tensorflow::CollectionDefDefaultTypeInternal, any_list_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CollectionDef, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CooSparse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CooSparse, values_tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CooSparse, indices_tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CooSparse, dense_shape_tensor_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CompositeTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CompositeTensor, type_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo_CompositeTensor, components_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::TensorInfoDefaultTypeInternal, name_),
  offsetof(::tensorflow::TensorInfoDefaultTypeInternal, coo_sparse_),
  offsetof(::tensorflow::TensorInfoDefaultTypeInternal, composite_tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo, dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo, tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorInfo, encoding_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_InputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_InputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_InputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_InputsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_OutputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_OutputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_OutputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef_OutputsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef, inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef, outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SignatureDef, method_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AssetFileDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AssetFileDef, tensor_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AssetFileDef, filename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse)},
  { 9, -1, sizeof(::tensorflow::MetaGraphDef_MetaInfoDef)},
  { 22, 29, sizeof(::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse)},
  { 31, 38, sizeof(::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse)},
  { 40, -1, sizeof(::tensorflow::MetaGraphDef)},
  { 52, -1, sizeof(::tensorflow::CollectionDef_NodeList)},
  { 58, -1, sizeof(::tensorflow::CollectionDef_BytesList)},
  { 64, -1, sizeof(::tensorflow::CollectionDef_Int64List)},
  { 70, -1, sizeof(::tensorflow::CollectionDef_FloatList)},
  { 76, -1, sizeof(::tensorflow::CollectionDef_AnyList)},
  { 82, -1, sizeof(::tensorflow::CollectionDef)},
  { 93, -1, sizeof(::tensorflow::TensorInfo_CooSparse)},
  { 101, -1, sizeof(::tensorflow::TensorInfo_CompositeTensor)},
  { 108, -1, sizeof(::tensorflow::TensorInfo)},
  { 119, 126, sizeof(::tensorflow::SignatureDef_InputsEntry_DoNotUse)},
  { 128, 135, sizeof(::tensorflow::SignatureDef_OutputsEntry_DoNotUse)},
  { 137, -1, sizeof(::tensorflow::SignatureDef)},
  { 145, -1, sizeof(::tensorflow::AssetFileDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MetaGraphDef_MetaInfoDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MetaGraphDef_CollectionDefEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MetaGraphDef_SignatureDefEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MetaGraphDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CollectionDef_NodeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CollectionDef_BytesList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CollectionDef_Int64List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CollectionDef_FloatList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CollectionDef_AnyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CollectionDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TensorInfo_CooSparse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TensorInfo_CompositeTensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_TensorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SignatureDef_InputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SignatureDef_OutputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SignatureDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AssetFileDef_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto[] =
  "\n)tensorflow/core/protobuf/meta_graph.pr"
  "oto\022\ntensorflow\032\031google/protobuf/any.pro"
  "to\032%tensorflow/core/framework/graph.prot"
  "o\032&tensorflow/core/framework/op_def.prot"
  "o\032,tensorflow/core/framework/tensor_shap"
  "e.proto\032%tensorflow/core/framework/types"
  ".proto\0321tensorflow/core/protobuf/saved_o"
  "bject_graph.proto\032$tensorflow/core/proto"
  "buf/saver.proto\032%tensorflow/core/protobu"
  "f/struct.proto\"\250\007\n\014MetaGraphDef\022;\n\rmeta_"
  "info_def\030\001 \001(\0132$.tensorflow.MetaGraphDef"
  ".MetaInfoDef\022\'\n\tgraph_def\030\002 \001(\0132\024.tensor"
  "flow.GraphDef\022\'\n\tsaver_def\030\003 \001(\0132\024.tenso"
  "rflow.SaverDef\022C\n\016collection_def\030\004 \003(\0132+"
  ".tensorflow.MetaGraphDef.CollectionDefEn"
  "try\022A\n\rsignature_def\030\005 \003(\0132*.tensorflow."
  "MetaGraphDef.SignatureDefEntry\0220\n\016asset_"
  "file_def\030\006 \003(\0132\030.tensorflow.AssetFileDef"
  "\0226\n\020object_graph_def\030\007 \001(\0132\034.tensorflow."
  "SavedObjectGraph\032\366\002\n\013MetaInfoDef\022\032\n\022meta"
  "_graph_version\030\001 \001(\t\022,\n\020stripped_op_list"
  "\030\002 \001(\0132\022.tensorflow.OpList\022&\n\010any_info\030\003"
  " \001(\0132\024.google.protobuf.Any\022\014\n\004tags\030\004 \003(\t"
  "\022\032\n\022tensorflow_version\030\005 \001(\t\022\036\n\026tensorfl"
  "ow_git_version\030\006 \001(\t\022\036\n\026stripped_default"
  "_attrs\030\007 \001(\010\022S\n\020function_aliases\030\010 \003(\01329"
  ".tensorflow.MetaGraphDef.MetaInfoDef.Fun"
  "ctionAliasesEntry\0326\n\024FunctionAliasesEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032O\n\022Col"
  "lectionDefEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 "
  "\001(\0132\031.tensorflow.CollectionDef:\0028\001\032M\n\021Si"
  "gnatureDefEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 "
  "\001(\0132\030.tensorflow.SignatureDef:\0028\001\"\337\003\n\rCo"
  "llectionDef\0227\n\tnode_list\030\001 \001(\0132\".tensorf"
  "low.CollectionDef.NodeListH\000\0229\n\nbytes_li"
  "st\030\002 \001(\0132#.tensorflow.CollectionDef.Byte"
  "sListH\000\0229\n\nint64_list\030\003 \001(\0132#.tensorflow"
  ".CollectionDef.Int64ListH\000\0229\n\nfloat_list"
  "\030\004 \001(\0132#.tensorflow.CollectionDef.FloatL"
  "istH\000\0225\n\010any_list\030\005 \001(\0132!.tensorflow.Col"
  "lectionDef.AnyListH\000\032\031\n\010NodeList\022\r\n\005valu"
  "e\030\001 \003(\t\032\032\n\tBytesList\022\r\n\005value\030\001 \003(\014\032\036\n\tI"
  "nt64List\022\021\n\005value\030\001 \003(\003B\002\020\001\032\036\n\tFloatList"
  "\022\021\n\005value\030\001 \003(\002B\002\020\001\032.\n\007AnyList\022#\n\005value\030"
  "\001 \003(\0132\024.google.protobuf.AnyB\006\n\004kind\"\321\003\n\n"
  "TensorInfo\022\016\n\004name\030\001 \001(\tH\000\0226\n\ncoo_sparse"
  "\030\004 \001(\0132 .tensorflow.TensorInfo.CooSparse"
  "H\000\022B\n\020composite_tensor\030\005 \001(\0132&.tensorflo"
  "w.TensorInfo.CompositeTensorH\000\022#\n\005dtype\030"
  "\002 \001(\0162\024.tensorflow.DataType\0222\n\014tensor_sh"
  "ape\030\003 \001(\0132\034.tensorflow.TensorShapeProto\032"
  "e\n\tCooSparse\022\032\n\022values_tensor_name\030\001 \001(\t"
  "\022\033\n\023indices_tensor_name\030\002 \001(\t\022\037\n\027dense_s"
  "hape_tensor_name\030\003 \001(\t\032k\n\017CompositeTenso"
  "r\022,\n\ttype_spec\030\001 \001(\0132\031.tensorflow.TypeSp"
  "ecProto\022*\n\ncomponents\030\002 \003(\0132\026.tensorflow"
  ".TensorInfoB\n\n\010encoding\"\240\002\n\014SignatureDef"
  "\0224\n\006inputs\030\001 \003(\0132$.tensorflow.SignatureD"
  "ef.InputsEntry\0226\n\007outputs\030\002 \003(\0132%.tensor"
  "flow.SignatureDef.OutputsEntry\022\023\n\013method"
  "_name\030\003 \001(\t\032E\n\013InputsEntry\022\013\n\003key\030\001 \001(\t\022"
  "%\n\005value\030\002 \001(\0132\026.tensorflow.TensorInfo:\002"
  "8\001\032F\n\014OutputsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value"
  "\030\002 \001(\0132\026.tensorflow.TensorInfo:\0028\001\"M\n\014As"
  "setFileDef\022+\n\013tensor_info\030\001 \001(\0132\026.tensor"
  "flow.TensorInfo\022\020\n\010filename\030\002 \001(\tBz\n\030org"
  ".tensorflow.frameworkB\017MetaGraphProtosP\001"
  "ZHgithub.com/tensorflow/tensorflow/tenso"
  "rflow/go/core/core_protos_go_proto\370\001\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_deps[8] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fop_5fdef_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaved_5fobject_5fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_sccs[17] = {
  &scc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_MetaGraphDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_MetaGraphDef_CollectionDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_MetaGraphDef_SignatureDefEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_SignatureDef_InputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_SignatureDef_OutputsEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
  &scc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto, "tensorflow/core/protobuf/meta_graph.proto", 2765,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto_deps, 17, 8,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto, 18, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto), true);
namespace tensorflow {

// ===================================================================

MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse() {}
MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MergeFrom(const MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MetaGraphDef_MetaInfoDef::InitAsDefaultInstance() {
  ::tensorflow::_MetaGraphDef_MetaInfoDef_default_instance_._instance.get_mutable()->stripped_op_list_ = const_cast< ::tensorflow::OpList*>(
      ::tensorflow::OpList::internal_default_instance());
  ::tensorflow::_MetaGraphDef_MetaInfoDef_default_instance_._instance.get_mutable()->any_info_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class MetaGraphDef_MetaInfoDef::HasBitSetters {
 public:
  static const ::tensorflow::OpList& stripped_op_list(const MetaGraphDef_MetaInfoDef* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& any_info(const MetaGraphDef_MetaInfoDef* msg);
};

const ::tensorflow::OpList&
MetaGraphDef_MetaInfoDef::HasBitSetters::stripped_op_list(const MetaGraphDef_MetaInfoDef* msg) {
  return *msg->stripped_op_list_;
}
const PROTOBUF_NAMESPACE_ID::Any&
MetaGraphDef_MetaInfoDef::HasBitSetters::any_info(const MetaGraphDef_MetaInfoDef* msg) {
  return *msg->any_info_;
}
void MetaGraphDef_MetaInfoDef::unsafe_arena_set_allocated_stripped_op_list(
    ::tensorflow::OpList* stripped_op_list) {
  if (GetArenaNoVirtual() == nullptr) {
    delete stripped_op_list_;
  }
  stripped_op_list_ = stripped_op_list;
  if (stripped_op_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetaGraphDef.MetaInfoDef.stripped_op_list)
}
void MetaGraphDef_MetaInfoDef::clear_stripped_op_list() {
  if (GetArenaNoVirtual() == nullptr && stripped_op_list_ != nullptr) {
    delete stripped_op_list_;
  }
  stripped_op_list_ = nullptr;
}
void MetaGraphDef_MetaInfoDef::unsafe_arena_set_allocated_any_info(
    PROTOBUF_NAMESPACE_ID::Any* any_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete any_info_;
  }
  any_info_ = any_info;
  if (any_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetaGraphDef.MetaInfoDef.any_info)
}
void MetaGraphDef_MetaInfoDef::clear_any_info() {
  if (GetArenaNoVirtual() == nullptr && any_info_ != nullptr) {
    delete any_info_;
  }
  any_info_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaGraphDef_MetaInfoDef::kMetaGraphVersionFieldNumber;
const int MetaGraphDef_MetaInfoDef::kStrippedOpListFieldNumber;
const int MetaGraphDef_MetaInfoDef::kAnyInfoFieldNumber;
const int MetaGraphDef_MetaInfoDef::kTagsFieldNumber;
const int MetaGraphDef_MetaInfoDef::kTensorflowVersionFieldNumber;
const int MetaGraphDef_MetaInfoDef::kTensorflowGitVersionFieldNumber;
const int MetaGraphDef_MetaInfoDef::kStrippedDefaultAttrsFieldNumber;
const int MetaGraphDef_MetaInfoDef::kFunctionAliasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaGraphDef_MetaInfoDef::MetaGraphDef_MetaInfoDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MetaGraphDef.MetaInfoDef)
}
MetaGraphDef_MetaInfoDef::MetaGraphDef_MetaInfoDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  tags_(arena),
  function_aliases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MetaGraphDef.MetaInfoDef)
}
MetaGraphDef_MetaInfoDef::MetaGraphDef_MetaInfoDef(const MetaGraphDef_MetaInfoDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  function_aliases_.MergeFrom(from.function_aliases_);
  meta_graph_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.meta_graph_version().size() > 0) {
    meta_graph_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meta_graph_version(),
      GetArenaNoVirtual());
  }
  tensorflow_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensorflow_version().size() > 0) {
    tensorflow_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensorflow_version(),
      GetArenaNoVirtual());
  }
  tensorflow_git_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.tensorflow_git_version().size() > 0) {
    tensorflow_git_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tensorflow_git_version(),
      GetArenaNoVirtual());
  }
  if (from.has_stripped_op_list()) {
    stripped_op_list_ = new ::tensorflow::OpList(*from.stripped_op_list_);
  } else {
    stripped_op_list_ = nullptr;
  }
  if (from.has_any_info()) {
    any_info_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_info_);
  } else {
    any_info_ = nullptr;
  }
  stripped_default_attrs_ = from.stripped_default_attrs_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MetaGraphDef.MetaInfoDef)
}

void MetaGraphDef_MetaInfoDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  meta_graph_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensorflow_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensorflow_git_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stripped_op_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripped_default_attrs_) -
      reinterpret_cast<char*>(&stripped_op_list_)) + sizeof(stripped_default_attrs_));
}

MetaGraphDef_MetaInfoDef::~MetaGraphDef_MetaInfoDef() {
  // @@protoc_insertion_point(destructor:tensorflow.MetaGraphDef.MetaInfoDef)
  SharedDtor();
}

void MetaGraphDef_MetaInfoDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  meta_graph_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensorflow_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensorflow_git_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stripped_op_list_;
  if (this != internal_default_instance()) delete any_info_;
}

void MetaGraphDef_MetaInfoDef::ArenaDtor(void* object) {
  MetaGraphDef_MetaInfoDef* _this = reinterpret_cast< MetaGraphDef_MetaInfoDef* >(object);
  (void)_this;
}
void MetaGraphDef_MetaInfoDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaGraphDef_MetaInfoDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaGraphDef_MetaInfoDef& MetaGraphDef_MetaInfoDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaGraphDef_MetaInfoDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MetaGraphDef_MetaInfoDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MetaGraphDef.MetaInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  function_aliases_.Clear();
  meta_graph_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tensorflow_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tensorflow_git_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && stripped_op_list_ != nullptr) {
    delete stripped_op_list_;
  }
  stripped_op_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && any_info_ != nullptr) {
    delete any_info_;
  }
  any_info_ = nullptr;
  stripped_default_attrs_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetaGraphDef_MetaInfoDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string meta_graph_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_meta_graph_version(), ptr, ctx, "tensorflow.MetaGraphDef.MetaInfoDef.meta_graph_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.OpList stripped_op_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_stripped_op_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any any_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_any_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_tags(), ptr, ctx, "tensorflow.MetaGraphDef.MetaInfoDef.tags");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // string tensorflow_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensorflow_version(), ptr, ctx, "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensorflow_git_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tensorflow_git_version(), ptr, ctx, "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_git_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stripped_default_attrs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          stripped_default_attrs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> function_aliases = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&function_aliases_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetaGraphDef_MetaInfoDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MetaGraphDef.MetaInfoDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string meta_graph_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_graph_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->meta_graph_version().data(), static_cast<int>(this->meta_graph_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.MetaInfoDef.meta_graph_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.OpList stripped_op_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stripped_op_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any any_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.MetaInfoDef.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensorflow_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensorflow_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensorflow_version().data(), static_cast<int>(this->tensorflow_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tensorflow_git_version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tensorflow_git_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tensorflow_git_version().data(), static_cast<int>(this->tensorflow_git_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_git_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stripped_default_attrs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stripped_default_attrs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> function_aliases = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&function_aliases_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.MetaInfoDef.FunctionAliasesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.MetaInfoDef.FunctionAliasesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MetaGraphDef.MetaInfoDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MetaGraphDef.MetaInfoDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetaGraphDef_MetaInfoDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MetaGraphDef.MetaInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string meta_graph_version = 1;
  if (this->meta_graph_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->meta_graph_version().data(), static_cast<int>(this->meta_graph_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.meta_graph_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->meta_graph_version(), output);
  }

  // .tensorflow.OpList stripped_op_list = 2;
  if (this->has_stripped_op_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::stripped_op_list(this), output);
  }

  // .google.protobuf.Any any_info = 3;
  if (this->has_any_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::any_info(this), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.tags");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // string tensorflow_version = 5;
  if (this->tensorflow_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensorflow_version().data(), static_cast<int>(this->tensorflow_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tensorflow_version(), output);
  }

  // string tensorflow_git_version = 6;
  if (this->tensorflow_git_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensorflow_git_version().data(), static_cast<int>(this->tensorflow_git_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_git_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->tensorflow_git_version(), output);
  }

  // bool stripped_default_attrs = 7;
  if (this->stripped_default_attrs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->stripped_default_attrs(), output);
  }

  // map<string, string> function_aliases = 8;
  if (!this->function_aliases().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.MetaInfoDef.FunctionAliasesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.MetaInfoDef.FunctionAliasesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->function_aliases().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->function_aliases().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->function_aliases().begin();
          it != this->function_aliases().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(8, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->function_aliases().begin();
          it != this->function_aliases().end(); ++it) {
        MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(8, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MetaGraphDef.MetaInfoDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaGraphDef_MetaInfoDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MetaGraphDef.MetaInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string meta_graph_version = 1;
  if (this->meta_graph_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->meta_graph_version().data(), static_cast<int>(this->meta_graph_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.meta_graph_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->meta_graph_version(), target);
  }

  // .tensorflow.OpList stripped_op_list = 2;
  if (this->has_stripped_op_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::stripped_op_list(this), target);
  }

  // .google.protobuf.Any any_info = 3;
  if (this->has_any_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::any_info(this), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.tags");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // string tensorflow_version = 5;
  if (this->tensorflow_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensorflow_version().data(), static_cast<int>(this->tensorflow_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->tensorflow_version(), target);
  }

  // string tensorflow_git_version = 6;
  if (this->tensorflow_git_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tensorflow_git_version().data(), static_cast<int>(this->tensorflow_git_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetaGraphDef.MetaInfoDef.tensorflow_git_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->tensorflow_git_version(), target);
  }

  // bool stripped_default_attrs = 7;
  if (this->stripped_default_attrs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->stripped_default_attrs(), target);
  }

  // map<string, string> function_aliases = 8;
  if (!this->function_aliases().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.MetaInfoDef.FunctionAliasesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.MetaInfoDef.FunctionAliasesEntry.value");
      }
    };

    if (false &&
        this->function_aliases().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->function_aliases().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->function_aliases().begin();
          it != this->function_aliases().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(8, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->function_aliases().begin();
          it != this->function_aliases().end(); ++it) {
        MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(8, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MetaGraphDef.MetaInfoDef)
  return target;
}

size_t MetaGraphDef_MetaInfoDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MetaGraphDef.MetaInfoDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // map<string, string> function_aliases = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->function_aliases_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->function_aliases().begin();
      it != this->function_aliases().end(); ++it) {
    MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string meta_graph_version = 1;
  if (this->meta_graph_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->meta_graph_version());
  }

  // string tensorflow_version = 5;
  if (this->tensorflow_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensorflow_version());
  }

  // string tensorflow_git_version = 6;
  if (this->tensorflow_git_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tensorflow_git_version());
  }

  // .tensorflow.OpList stripped_op_list = 2;
  if (this->has_stripped_op_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stripped_op_list_);
  }

  // .google.protobuf.Any any_info = 3;
  if (this->has_any_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_info_);
  }

  // bool stripped_default_attrs = 7;
  if (this->stripped_default_attrs() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaGraphDef_MetaInfoDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MetaGraphDef.MetaInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaGraphDef_MetaInfoDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaGraphDef_MetaInfoDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MetaGraphDef.MetaInfoDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MetaGraphDef.MetaInfoDef)
    MergeFrom(*source);
  }
}

void MetaGraphDef_MetaInfoDef::MergeFrom(const MetaGraphDef_MetaInfoDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MetaGraphDef.MetaInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  function_aliases_.MergeFrom(from.function_aliases_);
  if (from.meta_graph_version().size() > 0) {
    set_meta_graph_version(from.meta_graph_version());
  }
  if (from.tensorflow_version().size() > 0) {
    set_tensorflow_version(from.tensorflow_version());
  }
  if (from.tensorflow_git_version().size() > 0) {
    set_tensorflow_git_version(from.tensorflow_git_version());
  }
  if (from.has_stripped_op_list()) {
    mutable_stripped_op_list()->::tensorflow::OpList::MergeFrom(from.stripped_op_list());
  }
  if (from.has_any_info()) {
    mutable_any_info()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.any_info());
  }
  if (from.stripped_default_attrs() != 0) {
    set_stripped_default_attrs(from.stripped_default_attrs());
  }
}

void MetaGraphDef_MetaInfoDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MetaGraphDef.MetaInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaGraphDef_MetaInfoDef::CopyFrom(const MetaGraphDef_MetaInfoDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MetaGraphDef.MetaInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaGraphDef_MetaInfoDef::IsInitialized() const {
  return true;
}

void MetaGraphDef_MetaInfoDef::Swap(MetaGraphDef_MetaInfoDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MetaGraphDef_MetaInfoDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MetaGraphDef_MetaInfoDef::UnsafeArenaSwap(MetaGraphDef_MetaInfoDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MetaGraphDef_MetaInfoDef::InternalSwap(MetaGraphDef_MetaInfoDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  function_aliases_.Swap(&other->function_aliases_);
  meta_graph_version_.Swap(&other->meta_graph_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tensorflow_version_.Swap(&other->tensorflow_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tensorflow_git_version_.Swap(&other->tensorflow_git_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stripped_op_list_, other->stripped_op_list_);
  swap(any_info_, other->any_info_);
  swap(stripped_default_attrs_, other->stripped_default_attrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaGraphDef_MetaInfoDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MetaGraphDef_CollectionDefEntry_DoNotUse::MetaGraphDef_CollectionDefEntry_DoNotUse() {}
MetaGraphDef_CollectionDefEntry_DoNotUse::MetaGraphDef_CollectionDefEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaGraphDef_CollectionDefEntry_DoNotUse::MergeFrom(const MetaGraphDef_CollectionDefEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaGraphDef_CollectionDefEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MetaGraphDef_CollectionDefEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

MetaGraphDef_SignatureDefEntry_DoNotUse::MetaGraphDef_SignatureDefEntry_DoNotUse() {}
MetaGraphDef_SignatureDefEntry_DoNotUse::MetaGraphDef_SignatureDefEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MetaGraphDef_SignatureDefEntry_DoNotUse::MergeFrom(const MetaGraphDef_SignatureDefEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MetaGraphDef_SignatureDefEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MetaGraphDef_SignatureDefEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MetaGraphDef::InitAsDefaultInstance() {
  ::tensorflow::_MetaGraphDef_default_instance_._instance.get_mutable()->meta_info_def_ = const_cast< ::tensorflow::MetaGraphDef_MetaInfoDef*>(
      ::tensorflow::MetaGraphDef_MetaInfoDef::internal_default_instance());
  ::tensorflow::_MetaGraphDef_default_instance_._instance.get_mutable()->graph_def_ = const_cast< ::tensorflow::GraphDef*>(
      ::tensorflow::GraphDef::internal_default_instance());
  ::tensorflow::_MetaGraphDef_default_instance_._instance.get_mutable()->saver_def_ = const_cast< ::tensorflow::SaverDef*>(
      ::tensorflow::SaverDef::internal_default_instance());
  ::tensorflow::_MetaGraphDef_default_instance_._instance.get_mutable()->object_graph_def_ = const_cast< ::tensorflow::SavedObjectGraph*>(
      ::tensorflow::SavedObjectGraph::internal_default_instance());
}
class MetaGraphDef::HasBitSetters {
 public:
  static const ::tensorflow::MetaGraphDef_MetaInfoDef& meta_info_def(const MetaGraphDef* msg);
  static const ::tensorflow::GraphDef& graph_def(const MetaGraphDef* msg);
  static const ::tensorflow::SaverDef& saver_def(const MetaGraphDef* msg);
  static const ::tensorflow::SavedObjectGraph& object_graph_def(const MetaGraphDef* msg);
};

const ::tensorflow::MetaGraphDef_MetaInfoDef&
MetaGraphDef::HasBitSetters::meta_info_def(const MetaGraphDef* msg) {
  return *msg->meta_info_def_;
}
const ::tensorflow::GraphDef&
MetaGraphDef::HasBitSetters::graph_def(const MetaGraphDef* msg) {
  return *msg->graph_def_;
}
const ::tensorflow::SaverDef&
MetaGraphDef::HasBitSetters::saver_def(const MetaGraphDef* msg) {
  return *msg->saver_def_;
}
const ::tensorflow::SavedObjectGraph&
MetaGraphDef::HasBitSetters::object_graph_def(const MetaGraphDef* msg) {
  return *msg->object_graph_def_;
}
void MetaGraphDef::unsafe_arena_set_allocated_meta_info_def(
    ::tensorflow::MetaGraphDef_MetaInfoDef* meta_info_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete meta_info_def_;
  }
  meta_info_def_ = meta_info_def;
  if (meta_info_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetaGraphDef.meta_info_def)
}
void MetaGraphDef::unsafe_arena_set_allocated_graph_def(
    ::tensorflow::GraphDef* graph_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete graph_def_;
  }
  graph_def_ = graph_def;
  if (graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetaGraphDef.graph_def)
}
void MetaGraphDef::clear_graph_def() {
  if (GetArenaNoVirtual() == nullptr && graph_def_ != nullptr) {
    delete graph_def_;
  }
  graph_def_ = nullptr;
}
void MetaGraphDef::unsafe_arena_set_allocated_saver_def(
    ::tensorflow::SaverDef* saver_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete saver_def_;
  }
  saver_def_ = saver_def;
  if (saver_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetaGraphDef.saver_def)
}
void MetaGraphDef::clear_saver_def() {
  if (GetArenaNoVirtual() == nullptr && saver_def_ != nullptr) {
    delete saver_def_;
  }
  saver_def_ = nullptr;
}
void MetaGraphDef::unsafe_arena_set_allocated_object_graph_def(
    ::tensorflow::SavedObjectGraph* object_graph_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete object_graph_def_;
  }
  object_graph_def_ = object_graph_def;
  if (object_graph_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MetaGraphDef.object_graph_def)
}
void MetaGraphDef::clear_object_graph_def() {
  if (GetArenaNoVirtual() == nullptr && object_graph_def_ != nullptr) {
    delete object_graph_def_;
  }
  object_graph_def_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaGraphDef::kMetaInfoDefFieldNumber;
const int MetaGraphDef::kGraphDefFieldNumber;
const int MetaGraphDef::kSaverDefFieldNumber;
const int MetaGraphDef::kCollectionDefFieldNumber;
const int MetaGraphDef::kSignatureDefFieldNumber;
const int MetaGraphDef::kAssetFileDefFieldNumber;
const int MetaGraphDef::kObjectGraphDefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaGraphDef::MetaGraphDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MetaGraphDef)
}
MetaGraphDef::MetaGraphDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  collection_def_(arena),
  signature_def_(arena),
  asset_file_def_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MetaGraphDef)
}
MetaGraphDef::MetaGraphDef(const MetaGraphDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      asset_file_def_(from.asset_file_def_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_def_.MergeFrom(from.collection_def_);
  signature_def_.MergeFrom(from.signature_def_);
  if (from.has_meta_info_def()) {
    meta_info_def_ = new ::tensorflow::MetaGraphDef_MetaInfoDef(*from.meta_info_def_);
  } else {
    meta_info_def_ = nullptr;
  }
  if (from.has_graph_def()) {
    graph_def_ = new ::tensorflow::GraphDef(*from.graph_def_);
  } else {
    graph_def_ = nullptr;
  }
  if (from.has_saver_def()) {
    saver_def_ = new ::tensorflow::SaverDef(*from.saver_def_);
  } else {
    saver_def_ = nullptr;
  }
  if (from.has_object_graph_def()) {
    object_graph_def_ = new ::tensorflow::SavedObjectGraph(*from.object_graph_def_);
  } else {
    object_graph_def_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MetaGraphDef)
}

void MetaGraphDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaGraphDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  ::memset(&meta_info_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_graph_def_) -
      reinterpret_cast<char*>(&meta_info_def_)) + sizeof(object_graph_def_));
}

MetaGraphDef::~MetaGraphDef() {
  // @@protoc_insertion_point(destructor:tensorflow.MetaGraphDef)
  SharedDtor();
}

void MetaGraphDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete meta_info_def_;
  if (this != internal_default_instance()) delete graph_def_;
  if (this != internal_default_instance()) delete saver_def_;
  if (this != internal_default_instance()) delete object_graph_def_;
}

void MetaGraphDef::ArenaDtor(void* object) {
  MetaGraphDef* _this = reinterpret_cast< MetaGraphDef* >(object);
  (void)_this;
}
void MetaGraphDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaGraphDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaGraphDef& MetaGraphDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaGraphDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void MetaGraphDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MetaGraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_def_.Clear();
  signature_def_.Clear();
  asset_file_def_.Clear();
  if (GetArenaNoVirtual() == nullptr && meta_info_def_ != nullptr) {
    delete meta_info_def_;
  }
  meta_info_def_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && graph_def_ != nullptr) {
    delete graph_def_;
  }
  graph_def_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && saver_def_ != nullptr) {
    delete saver_def_;
  }
  saver_def_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && object_graph_def_ != nullptr) {
    delete object_graph_def_;
  }
  object_graph_def_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetaGraphDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.MetaGraphDef.MetaInfoDef meta_info_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_meta_info_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.GraphDef graph_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_graph_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SaverDef saver_def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_saver_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.CollectionDef> collection_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&collection_def_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.SignatureDef> signature_def = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&signature_def_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.AssetFileDef asset_file_def = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_asset_file_def(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SavedObjectGraph object_graph_def = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_object_graph_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetaGraphDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MetaGraphDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.MetaGraphDef.MetaInfoDef meta_info_def = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_info_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.GraphDef graph_def = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.SaverDef saver_def = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_saver_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.CollectionDef> collection_def = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          MetaGraphDef_CollectionDefEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MetaGraphDef_CollectionDefEntry_DoNotUse,
              std::string, ::tensorflow::CollectionDef,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef > > parser(&collection_def_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.CollectionDefEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.SignatureDef> signature_def = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          MetaGraphDef_SignatureDefEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              MetaGraphDef_SignatureDefEntry_DoNotUse,
              std::string, ::tensorflow::SignatureDef,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef > > parser(&signature_def_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MetaGraphDef.SignatureDefEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.AssetFileDef asset_file_def = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_asset_file_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.SavedObjectGraph object_graph_def = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_graph_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MetaGraphDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MetaGraphDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetaGraphDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MetaGraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.MetaGraphDef.MetaInfoDef meta_info_def = 1;
  if (this->has_meta_info_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::meta_info_def(this), output);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::graph_def(this), output);
  }

  // .tensorflow.SaverDef saver_def = 3;
  if (this->has_saver_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::saver_def(this), output);
  }

  // map<string, .tensorflow.CollectionDef> collection_def = 4;
  if (!this->collection_def().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.CollectionDefEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->collection_def().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->collection_def().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_iterator
          it = this->collection_def().begin();
          it != this->collection_def().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MetaGraphDef_CollectionDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_iterator
          it = this->collection_def().begin();
          it != this->collection_def().end(); ++it) {
        MetaGraphDef_CollectionDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(4, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .tensorflow.SignatureDef> signature_def = 5;
  if (!this->signature_def().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.SignatureDefEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->signature_def().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->signature_def().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
          it = this->signature_def().begin();
          it != this->signature_def().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MetaGraphDef_SignatureDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
          it = this->signature_def().begin();
          it != this->signature_def().end(); ++it) {
        MetaGraphDef_SignatureDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(5, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .tensorflow.AssetFileDef asset_file_def = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->asset_file_def_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->asset_file_def(static_cast<int>(i)),
      output);
  }

  // .tensorflow.SavedObjectGraph object_graph_def = 7;
  if (this->has_object_graph_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::object_graph_def(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MetaGraphDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaGraphDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MetaGraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.MetaGraphDef.MetaInfoDef meta_info_def = 1;
  if (this->has_meta_info_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::meta_info_def(this), target);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::graph_def(this), target);
  }

  // .tensorflow.SaverDef saver_def = 3;
  if (this->has_saver_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::saver_def(this), target);
  }

  // map<string, .tensorflow.CollectionDef> collection_def = 4;
  if (!this->collection_def().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.CollectionDefEntry.key");
      }
    };

    if (false &&
        this->collection_def().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->collection_def().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_iterator
          it = this->collection_def().begin();
          it != this->collection_def().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MetaGraphDef_CollectionDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_iterator
          it = this->collection_def().begin();
          it != this->collection_def().end(); ++it) {
        MetaGraphDef_CollectionDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .tensorflow.SignatureDef> signature_def = 5;
  if (!this->signature_def().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.MetaGraphDef.SignatureDefEntry.key");
      }
    };

    if (false &&
        this->signature_def().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->signature_def().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
          it = this->signature_def().begin();
          it != this->signature_def().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        MetaGraphDef_SignatureDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
          it = this->signature_def().begin();
          it != this->signature_def().end(); ++it) {
        MetaGraphDef_SignatureDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .tensorflow.AssetFileDef asset_file_def = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->asset_file_def_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->asset_file_def(static_cast<int>(i)), target);
  }

  // .tensorflow.SavedObjectGraph object_graph_def = 7;
  if (this->has_object_graph_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::object_graph_def(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MetaGraphDef)
  return target;
}

size_t MetaGraphDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MetaGraphDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.CollectionDef> collection_def = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->collection_def_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::CollectionDef >::const_iterator
      it = this->collection_def().begin();
      it != this->collection_def().end(); ++it) {
    MetaGraphDef_CollectionDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<string, .tensorflow.SignatureDef> signature_def = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->signature_def_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::SignatureDef >::const_iterator
      it = this->signature_def().begin();
      it != this->signature_def().end(); ++it) {
    MetaGraphDef_SignatureDefEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // repeated .tensorflow.AssetFileDef asset_file_def = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->asset_file_def_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->asset_file_def(static_cast<int>(i)));
    }
  }

  // .tensorflow.MetaGraphDef.MetaInfoDef meta_info_def = 1;
  if (this->has_meta_info_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_info_def_);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->has_graph_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_def_);
  }

  // .tensorflow.SaverDef saver_def = 3;
  if (this->has_saver_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saver_def_);
  }

  // .tensorflow.SavedObjectGraph object_graph_def = 7;
  if (this->has_object_graph_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_graph_def_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaGraphDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MetaGraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaGraphDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaGraphDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MetaGraphDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MetaGraphDef)
    MergeFrom(*source);
  }
}

void MetaGraphDef::MergeFrom(const MetaGraphDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MetaGraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_def_.MergeFrom(from.collection_def_);
  signature_def_.MergeFrom(from.signature_def_);
  asset_file_def_.MergeFrom(from.asset_file_def_);
  if (from.has_meta_info_def()) {
    mutable_meta_info_def()->::tensorflow::MetaGraphDef_MetaInfoDef::MergeFrom(from.meta_info_def());
  }
  if (from.has_graph_def()) {
    mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(from.graph_def());
  }
  if (from.has_saver_def()) {
    mutable_saver_def()->::tensorflow::SaverDef::MergeFrom(from.saver_def());
  }
  if (from.has_object_graph_def()) {
    mutable_object_graph_def()->::tensorflow::SavedObjectGraph::MergeFrom(from.object_graph_def());
  }
}

void MetaGraphDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MetaGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaGraphDef::CopyFrom(const MetaGraphDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MetaGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaGraphDef::IsInitialized() const {
  return true;
}

void MetaGraphDef::Swap(MetaGraphDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MetaGraphDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MetaGraphDef::UnsafeArenaSwap(MetaGraphDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MetaGraphDef::InternalSwap(MetaGraphDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_def_.Swap(&other->collection_def_);
  signature_def_.Swap(&other->signature_def_);
  CastToBase(&asset_file_def_)->InternalSwap(CastToBase(&other->asset_file_def_));
  swap(meta_info_def_, other->meta_info_def_);
  swap(graph_def_, other->graph_def_);
  swap(saver_def_, other->saver_def_);
  swap(object_graph_def_, other->object_graph_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaGraphDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionDef_NodeList::InitAsDefaultInstance() {
}
class CollectionDef_NodeList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionDef_NodeList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionDef_NodeList::CollectionDef_NodeList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CollectionDef.NodeList)
}
CollectionDef_NodeList::CollectionDef_NodeList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CollectionDef.NodeList)
}
CollectionDef_NodeList::CollectionDef_NodeList(const CollectionDef_NodeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CollectionDef.NodeList)
}

void CollectionDef_NodeList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
}

CollectionDef_NodeList::~CollectionDef_NodeList() {
  // @@protoc_insertion_point(destructor:tensorflow.CollectionDef.NodeList)
  SharedDtor();
}

void CollectionDef_NodeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CollectionDef_NodeList::ArenaDtor(void* object) {
  CollectionDef_NodeList* _this = reinterpret_cast< CollectionDef_NodeList* >(object);
  (void)_this;
}
void CollectionDef_NodeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionDef_NodeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionDef_NodeList& CollectionDef_NodeList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionDef_NodeList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CollectionDef_NodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CollectionDef.NodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionDef_NodeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_value(), ptr, ctx, "tensorflow.CollectionDef.NodeList.value");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionDef_NodeList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CollectionDef.NodeList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value(this->value_size() - 1).data(),
            static_cast<int>(this->value(this->value_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.CollectionDef.NodeList.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CollectionDef.NodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CollectionDef.NodeList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionDef_NodeList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CollectionDef.NodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value(i).data(), static_cast<int>(this->value(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CollectionDef.NodeList.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CollectionDef.NodeList)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionDef_NodeList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CollectionDef.NodeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value(i).data(), static_cast<int>(this->value(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CollectionDef.NodeList.value");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CollectionDef.NodeList)
  return target;
}

size_t CollectionDef_NodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CollectionDef.NodeList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->value_size());
  for (int i = 0, n = this->value_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionDef_NodeList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CollectionDef.NodeList)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionDef_NodeList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionDef_NodeList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CollectionDef.NodeList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CollectionDef.NodeList)
    MergeFrom(*source);
  }
}

void CollectionDef_NodeList::MergeFrom(const CollectionDef_NodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CollectionDef.NodeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void CollectionDef_NodeList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CollectionDef.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionDef_NodeList::CopyFrom(const CollectionDef_NodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CollectionDef.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionDef_NodeList::IsInitialized() const {
  return true;
}

void CollectionDef_NodeList::Swap(CollectionDef_NodeList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CollectionDef_NodeList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CollectionDef_NodeList::UnsafeArenaSwap(CollectionDef_NodeList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CollectionDef_NodeList::InternalSwap(CollectionDef_NodeList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(CastToBase(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionDef_NodeList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionDef_BytesList::InitAsDefaultInstance() {
}
class CollectionDef_BytesList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionDef_BytesList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionDef_BytesList::CollectionDef_BytesList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CollectionDef.BytesList)
}
CollectionDef_BytesList::CollectionDef_BytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CollectionDef.BytesList)
}
CollectionDef_BytesList::CollectionDef_BytesList(const CollectionDef_BytesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CollectionDef.BytesList)
}

void CollectionDef_BytesList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
}

CollectionDef_BytesList::~CollectionDef_BytesList() {
  // @@protoc_insertion_point(destructor:tensorflow.CollectionDef.BytesList)
  SharedDtor();
}

void CollectionDef_BytesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CollectionDef_BytesList::ArenaDtor(void* object) {
  CollectionDef_BytesList* _this = reinterpret_cast< CollectionDef_BytesList* >(object);
  (void)_this;
}
void CollectionDef_BytesList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionDef_BytesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionDef_BytesList& CollectionDef_BytesList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionDef_BytesList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CollectionDef_BytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CollectionDef.BytesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionDef_BytesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_value(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionDef_BytesList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CollectionDef.BytesList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CollectionDef.BytesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CollectionDef.BytesList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionDef_BytesList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CollectionDef.BytesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CollectionDef.BytesList)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionDef_BytesList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CollectionDef.BytesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->value(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CollectionDef.BytesList)
  return target;
}

size_t CollectionDef_BytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CollectionDef.BytesList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->value_size());
  for (int i = 0, n = this->value_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionDef_BytesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CollectionDef.BytesList)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionDef_BytesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionDef_BytesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CollectionDef.BytesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CollectionDef.BytesList)
    MergeFrom(*source);
  }
}

void CollectionDef_BytesList::MergeFrom(const CollectionDef_BytesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CollectionDef.BytesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void CollectionDef_BytesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CollectionDef.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionDef_BytesList::CopyFrom(const CollectionDef_BytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CollectionDef.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionDef_BytesList::IsInitialized() const {
  return true;
}

void CollectionDef_BytesList::Swap(CollectionDef_BytesList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CollectionDef_BytesList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CollectionDef_BytesList::UnsafeArenaSwap(CollectionDef_BytesList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CollectionDef_BytesList::InternalSwap(CollectionDef_BytesList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(CastToBase(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionDef_BytesList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionDef_Int64List::InitAsDefaultInstance() {
}
class CollectionDef_Int64List::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionDef_Int64List::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionDef_Int64List::CollectionDef_Int64List()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CollectionDef.Int64List)
}
CollectionDef_Int64List::CollectionDef_Int64List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CollectionDef.Int64List)
}
CollectionDef_Int64List::CollectionDef_Int64List(const CollectionDef_Int64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CollectionDef.Int64List)
}

void CollectionDef_Int64List::SharedCtor() {
}

CollectionDef_Int64List::~CollectionDef_Int64List() {
  // @@protoc_insertion_point(destructor:tensorflow.CollectionDef.Int64List)
  SharedDtor();
}

void CollectionDef_Int64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CollectionDef_Int64List::ArenaDtor(void* object) {
  CollectionDef_Int64List* _this = reinterpret_cast< CollectionDef_Int64List* >(object);
  (void)_this;
}
void CollectionDef_Int64List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionDef_Int64List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionDef_Int64List& CollectionDef_Int64List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionDef_Int64List_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CollectionDef_Int64List::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CollectionDef.Int64List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionDef_Int64List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionDef_Int64List::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CollectionDef.Int64List)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 value = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CollectionDef.Int64List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CollectionDef.Int64List)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionDef_Int64List::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CollectionDef.Int64List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CollectionDef.Int64List)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionDef_Int64List::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CollectionDef.Int64List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _value_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CollectionDef.Int64List)
  return target;
}

size_t CollectionDef_Int64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CollectionDef.Int64List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionDef_Int64List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CollectionDef.Int64List)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionDef_Int64List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionDef_Int64List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CollectionDef.Int64List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CollectionDef.Int64List)
    MergeFrom(*source);
  }
}

void CollectionDef_Int64List::MergeFrom(const CollectionDef_Int64List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CollectionDef.Int64List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void CollectionDef_Int64List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CollectionDef.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionDef_Int64List::CopyFrom(const CollectionDef_Int64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CollectionDef.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionDef_Int64List::IsInitialized() const {
  return true;
}

void CollectionDef_Int64List::Swap(CollectionDef_Int64List* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CollectionDef_Int64List* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CollectionDef_Int64List::UnsafeArenaSwap(CollectionDef_Int64List* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CollectionDef_Int64List::InternalSwap(CollectionDef_Int64List* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionDef_Int64List::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionDef_FloatList::InitAsDefaultInstance() {
}
class CollectionDef_FloatList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionDef_FloatList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionDef_FloatList::CollectionDef_FloatList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CollectionDef.FloatList)
}
CollectionDef_FloatList::CollectionDef_FloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CollectionDef.FloatList)
}
CollectionDef_FloatList::CollectionDef_FloatList(const CollectionDef_FloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CollectionDef.FloatList)
}

void CollectionDef_FloatList::SharedCtor() {
}

CollectionDef_FloatList::~CollectionDef_FloatList() {
  // @@protoc_insertion_point(destructor:tensorflow.CollectionDef.FloatList)
  SharedDtor();
}

void CollectionDef_FloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CollectionDef_FloatList::ArenaDtor(void* object) {
  CollectionDef_FloatList* _this = reinterpret_cast< CollectionDef_FloatList* >(object);
  (void)_this;
}
void CollectionDef_FloatList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionDef_FloatList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionDef_FloatList& CollectionDef_FloatList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionDef_FloatList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CollectionDef_FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CollectionDef.FloatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionDef_FloatList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionDef_FloatList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CollectionDef.FloatList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CollectionDef.FloatList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CollectionDef.FloatList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionDef_FloatList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CollectionDef.FloatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CollectionDef.FloatList)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionDef_FloatList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CollectionDef.FloatList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _value_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CollectionDef.FloatList)
  return target;
}

size_t CollectionDef_FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CollectionDef.FloatList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionDef_FloatList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CollectionDef.FloatList)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionDef_FloatList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionDef_FloatList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CollectionDef.FloatList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CollectionDef.FloatList)
    MergeFrom(*source);
  }
}

void CollectionDef_FloatList::MergeFrom(const CollectionDef_FloatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CollectionDef.FloatList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void CollectionDef_FloatList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CollectionDef.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionDef_FloatList::CopyFrom(const CollectionDef_FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CollectionDef.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionDef_FloatList::IsInitialized() const {
  return true;
}

void CollectionDef_FloatList::Swap(CollectionDef_FloatList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CollectionDef_FloatList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CollectionDef_FloatList::UnsafeArenaSwap(CollectionDef_FloatList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CollectionDef_FloatList::InternalSwap(CollectionDef_FloatList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionDef_FloatList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionDef_AnyList::InitAsDefaultInstance() {
}
class CollectionDef_AnyList::HasBitSetters {
 public:
};

void CollectionDef_AnyList::clear_value() {
  value_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionDef_AnyList::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionDef_AnyList::CollectionDef_AnyList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CollectionDef.AnyList)
}
CollectionDef_AnyList::CollectionDef_AnyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CollectionDef.AnyList)
}
CollectionDef_AnyList::CollectionDef_AnyList(const CollectionDef_AnyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CollectionDef.AnyList)
}

void CollectionDef_AnyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
}

CollectionDef_AnyList::~CollectionDef_AnyList() {
  // @@protoc_insertion_point(destructor:tensorflow.CollectionDef.AnyList)
  SharedDtor();
}

void CollectionDef_AnyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CollectionDef_AnyList::ArenaDtor(void* object) {
  CollectionDef_AnyList* _this = reinterpret_cast< CollectionDef_AnyList* >(object);
  (void)_this;
}
void CollectionDef_AnyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionDef_AnyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionDef_AnyList& CollectionDef_AnyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionDef_AnyList_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CollectionDef_AnyList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CollectionDef.AnyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionDef_AnyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionDef_AnyList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CollectionDef.AnyList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.Any value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CollectionDef.AnyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CollectionDef.AnyList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionDef_AnyList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CollectionDef.AnyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->value(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CollectionDef.AnyList)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionDef_AnyList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CollectionDef.AnyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->value(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CollectionDef.AnyList)
  return target;
}

size_t CollectionDef_AnyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CollectionDef.AnyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionDef_AnyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CollectionDef.AnyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionDef_AnyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionDef_AnyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CollectionDef.AnyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CollectionDef.AnyList)
    MergeFrom(*source);
  }
}

void CollectionDef_AnyList::MergeFrom(const CollectionDef_AnyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CollectionDef.AnyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void CollectionDef_AnyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CollectionDef.AnyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionDef_AnyList::CopyFrom(const CollectionDef_AnyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CollectionDef.AnyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionDef_AnyList::IsInitialized() const {
  return true;
}

void CollectionDef_AnyList::Swap(CollectionDef_AnyList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CollectionDef_AnyList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CollectionDef_AnyList::UnsafeArenaSwap(CollectionDef_AnyList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CollectionDef_AnyList::InternalSwap(CollectionDef_AnyList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionDef_AnyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionDef::InitAsDefaultInstance() {
  ::tensorflow::_CollectionDef_default_instance_.node_list_ = const_cast< ::tensorflow::CollectionDef_NodeList*>(
      ::tensorflow::CollectionDef_NodeList::internal_default_instance());
  ::tensorflow::_CollectionDef_default_instance_.bytes_list_ = const_cast< ::tensorflow::CollectionDef_BytesList*>(
      ::tensorflow::CollectionDef_BytesList::internal_default_instance());
  ::tensorflow::_CollectionDef_default_instance_.int64_list_ = const_cast< ::tensorflow::CollectionDef_Int64List*>(
      ::tensorflow::CollectionDef_Int64List::internal_default_instance());
  ::tensorflow::_CollectionDef_default_instance_.float_list_ = const_cast< ::tensorflow::CollectionDef_FloatList*>(
      ::tensorflow::CollectionDef_FloatList::internal_default_instance());
  ::tensorflow::_CollectionDef_default_instance_.any_list_ = const_cast< ::tensorflow::CollectionDef_AnyList*>(
      ::tensorflow::CollectionDef_AnyList::internal_default_instance());
}
class CollectionDef::HasBitSetters {
 public:
  static const ::tensorflow::CollectionDef_NodeList& node_list(const CollectionDef* msg);
  static const ::tensorflow::CollectionDef_BytesList& bytes_list(const CollectionDef* msg);
  static const ::tensorflow::CollectionDef_Int64List& int64_list(const CollectionDef* msg);
  static const ::tensorflow::CollectionDef_FloatList& float_list(const CollectionDef* msg);
  static const ::tensorflow::CollectionDef_AnyList& any_list(const CollectionDef* msg);
};

const ::tensorflow::CollectionDef_NodeList&
CollectionDef::HasBitSetters::node_list(const CollectionDef* msg) {
  return *msg->kind_.node_list_;
}
const ::tensorflow::CollectionDef_BytesList&
CollectionDef::HasBitSetters::bytes_list(const CollectionDef* msg) {
  return *msg->kind_.bytes_list_;
}
const ::tensorflow::CollectionDef_Int64List&
CollectionDef::HasBitSetters::int64_list(const CollectionDef* msg) {
  return *msg->kind_.int64_list_;
}
const ::tensorflow::CollectionDef_FloatList&
CollectionDef::HasBitSetters::float_list(const CollectionDef* msg) {
  return *msg->kind_.float_list_;
}
const ::tensorflow::CollectionDef_AnyList&
CollectionDef::HasBitSetters::any_list(const CollectionDef* msg) {
  return *msg->kind_.any_list_;
}
void CollectionDef::set_allocated_node_list(::tensorflow::CollectionDef_NodeList* node_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (node_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_list);
    if (message_arena != submessage_arena) {
      node_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_list, submessage_arena);
    }
    set_has_node_list();
    kind_.node_list_ = node_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CollectionDef.node_list)
}
void CollectionDef::set_allocated_bytes_list(::tensorflow::CollectionDef_BytesList* bytes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (bytes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bytes_list);
    if (message_arena != submessage_arena) {
      bytes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_list, submessage_arena);
    }
    set_has_bytes_list();
    kind_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CollectionDef.bytes_list)
}
void CollectionDef::set_allocated_int64_list(::tensorflow::CollectionDef_Int64List* int64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (int64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int64_list);
    if (message_arena != submessage_arena) {
      int64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64_list, submessage_arena);
    }
    set_has_int64_list();
    kind_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CollectionDef.int64_list)
}
void CollectionDef::set_allocated_float_list(::tensorflow::CollectionDef_FloatList* float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(float_list);
    if (message_arena != submessage_arena) {
      float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_list, submessage_arena);
    }
    set_has_float_list();
    kind_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CollectionDef.float_list)
}
void CollectionDef::set_allocated_any_list(::tensorflow::CollectionDef_AnyList* any_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (any_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(any_list);
    if (message_arena != submessage_arena) {
      any_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_list, submessage_arena);
    }
    set_has_any_list();
    kind_.any_list_ = any_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CollectionDef.any_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollectionDef::kNodeListFieldNumber;
const int CollectionDef::kBytesListFieldNumber;
const int CollectionDef::kInt64ListFieldNumber;
const int CollectionDef::kFloatListFieldNumber;
const int CollectionDef::kAnyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollectionDef::CollectionDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CollectionDef)
}
CollectionDef::CollectionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CollectionDef)
}
CollectionDef::CollectionDef(const CollectionDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kNodeList: {
      mutable_node_list()->::tensorflow::CollectionDef_NodeList::MergeFrom(from.node_list());
      break;
    }
    case kBytesList: {
      mutable_bytes_list()->::tensorflow::CollectionDef_BytesList::MergeFrom(from.bytes_list());
      break;
    }
    case kInt64List: {
      mutable_int64_list()->::tensorflow::CollectionDef_Int64List::MergeFrom(from.int64_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::tensorflow::CollectionDef_FloatList::MergeFrom(from.float_list());
      break;
    }
    case kAnyList: {
      mutable_any_list()->::tensorflow::CollectionDef_AnyList::MergeFrom(from.any_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CollectionDef)
}

void CollectionDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  clear_has_kind();
}

CollectionDef::~CollectionDef() {
  // @@protoc_insertion_point(destructor:tensorflow.CollectionDef)
  SharedDtor();
}

void CollectionDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void CollectionDef::ArenaDtor(void* object) {
  CollectionDef* _this = reinterpret_cast< CollectionDef* >(object);
  (void)_this;
}
void CollectionDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CollectionDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionDef& CollectionDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CollectionDef::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.CollectionDef)
  switch (kind_case()) {
    case kNodeList: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.node_list_;
      }
      break;
    }
    case kBytesList: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.bytes_list_;
      }
      break;
    }
    case kInt64List: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.int64_list_;
      }
      break;
    }
    case kFloatList: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.float_list_;
      }
      break;
    }
    case kAnyList: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.any_list_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void CollectionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CollectionDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CollectionDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.CollectionDef.NodeList node_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_node_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CollectionDef.BytesList bytes_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_bytes_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CollectionDef.Int64List int64_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_int64_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CollectionDef.FloatList float_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_float_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.CollectionDef.AnyList any_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_any_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CollectionDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CollectionDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.CollectionDef.NodeList node_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_node_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CollectionDef.BytesList bytes_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CollectionDef.Int64List int64_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_int64_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CollectionDef.FloatList float_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_float_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.CollectionDef.AnyList any_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_any_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CollectionDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CollectionDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CollectionDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CollectionDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CollectionDef.NodeList node_list = 1;
  if (has_node_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node_list(this), output);
  }

  // .tensorflow.CollectionDef.BytesList bytes_list = 2;
  if (has_bytes_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bytes_list(this), output);
  }

  // .tensorflow.CollectionDef.Int64List int64_list = 3;
  if (has_int64_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::int64_list(this), output);
  }

  // .tensorflow.CollectionDef.FloatList float_list = 4;
  if (has_float_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::float_list(this), output);
  }

  // .tensorflow.CollectionDef.AnyList any_list = 5;
  if (has_any_list()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::any_list(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.CollectionDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CollectionDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CollectionDef.NodeList node_list = 1;
  if (has_node_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node_list(this), target);
  }

  // .tensorflow.CollectionDef.BytesList bytes_list = 2;
  if (has_bytes_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bytes_list(this), target);
  }

  // .tensorflow.CollectionDef.Int64List int64_list = 3;
  if (has_int64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::int64_list(this), target);
  }

  // .tensorflow.CollectionDef.FloatList float_list = 4;
  if (has_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::float_list(this), target);
  }

  // .tensorflow.CollectionDef.AnyList any_list = 5;
  if (has_any_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::any_list(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CollectionDef)
  return target;
}

size_t CollectionDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CollectionDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .tensorflow.CollectionDef.NodeList node_list = 1;
    case kNodeList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.node_list_);
      break;
    }
    // .tensorflow.CollectionDef.BytesList bytes_list = 2;
    case kBytesList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.bytes_list_);
      break;
    }
    // .tensorflow.CollectionDef.Int64List int64_list = 3;
    case kInt64List: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.int64_list_);
      break;
    }
    // .tensorflow.CollectionDef.FloatList float_list = 4;
    case kFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.float_list_);
      break;
    }
    // .tensorflow.CollectionDef.AnyList any_list = 5;
    case kAnyList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.any_list_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CollectionDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CollectionDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CollectionDef)
    MergeFrom(*source);
  }
}

void CollectionDef::MergeFrom(const CollectionDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CollectionDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kNodeList: {
      mutable_node_list()->::tensorflow::CollectionDef_NodeList::MergeFrom(from.node_list());
      break;
    }
    case kBytesList: {
      mutable_bytes_list()->::tensorflow::CollectionDef_BytesList::MergeFrom(from.bytes_list());
      break;
    }
    case kInt64List: {
      mutable_int64_list()->::tensorflow::CollectionDef_Int64List::MergeFrom(from.int64_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::tensorflow::CollectionDef_FloatList::MergeFrom(from.float_list());
      break;
    }
    case kAnyList: {
      mutable_any_list()->::tensorflow::CollectionDef_AnyList::MergeFrom(from.any_list());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void CollectionDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CollectionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionDef::CopyFrom(const CollectionDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CollectionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionDef::IsInitialized() const {
  return true;
}

void CollectionDef::Swap(CollectionDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CollectionDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void CollectionDef::UnsafeArenaSwap(CollectionDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CollectionDef::InternalSwap(CollectionDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorInfo_CooSparse::InitAsDefaultInstance() {
}
class TensorInfo_CooSparse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorInfo_CooSparse::kValuesTensorNameFieldNumber;
const int TensorInfo_CooSparse::kIndicesTensorNameFieldNumber;
const int TensorInfo_CooSparse::kDenseShapeTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorInfo_CooSparse::TensorInfo_CooSparse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorInfo.CooSparse)
}
TensorInfo_CooSparse::TensorInfo_CooSparse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TensorInfo.CooSparse)
}
TensorInfo_CooSparse::TensorInfo_CooSparse(const TensorInfo_CooSparse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.values_tensor_name().size() > 0) {
    values_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.values_tensor_name(),
      GetArenaNoVirtual());
  }
  indices_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.indices_tensor_name().size() > 0) {
    indices_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indices_tensor_name(),
      GetArenaNoVirtual());
  }
  dense_shape_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.dense_shape_tensor_name().size() > 0) {
    dense_shape_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dense_shape_tensor_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorInfo.CooSparse)
}

void TensorInfo_CooSparse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  values_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dense_shape_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TensorInfo_CooSparse::~TensorInfo_CooSparse() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorInfo.CooSparse)
  SharedDtor();
}

void TensorInfo_CooSparse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  values_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dense_shape_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TensorInfo_CooSparse::ArenaDtor(void* object) {
  TensorInfo_CooSparse* _this = reinterpret_cast< TensorInfo_CooSparse* >(object);
  (void)_this;
}
void TensorInfo_CooSparse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorInfo_CooSparse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorInfo_CooSparse& TensorInfo_CooSparse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorInfo_CooSparse_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TensorInfo_CooSparse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorInfo.CooSparse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  indices_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dense_shape_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorInfo_CooSparse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string values_tensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_values_tensor_name(), ptr, ctx, "tensorflow.TensorInfo.CooSparse.values_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string indices_tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_indices_tensor_name(), ptr, ctx, "tensorflow.TensorInfo.CooSparse.indices_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dense_shape_tensor_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dense_shape_tensor_name(), ptr, ctx, "tensorflow.TensorInfo.CooSparse.dense_shape_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorInfo_CooSparse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorInfo.CooSparse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string values_tensor_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_values_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->values_tensor_name().data(), static_cast<int>(this->values_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TensorInfo.CooSparse.values_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string indices_tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_indices_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->indices_tensor_name().data(), static_cast<int>(this->indices_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TensorInfo.CooSparse.indices_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dense_shape_tensor_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dense_shape_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dense_shape_tensor_name().data(), static_cast<int>(this->dense_shape_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TensorInfo.CooSparse.dense_shape_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorInfo.CooSparse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorInfo.CooSparse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorInfo_CooSparse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorInfo.CooSparse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string values_tensor_name = 1;
  if (this->values_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values_tensor_name().data(), static_cast<int>(this->values_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.CooSparse.values_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->values_tensor_name(), output);
  }

  // string indices_tensor_name = 2;
  if (this->indices_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->indices_tensor_name().data(), static_cast<int>(this->indices_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.CooSparse.indices_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->indices_tensor_name(), output);
  }

  // string dense_shape_tensor_name = 3;
  if (this->dense_shape_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dense_shape_tensor_name().data(), static_cast<int>(this->dense_shape_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.CooSparse.dense_shape_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dense_shape_tensor_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorInfo.CooSparse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorInfo_CooSparse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorInfo.CooSparse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string values_tensor_name = 1;
  if (this->values_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values_tensor_name().data(), static_cast<int>(this->values_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.CooSparse.values_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->values_tensor_name(), target);
  }

  // string indices_tensor_name = 2;
  if (this->indices_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->indices_tensor_name().data(), static_cast<int>(this->indices_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.CooSparse.indices_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->indices_tensor_name(), target);
  }

  // string dense_shape_tensor_name = 3;
  if (this->dense_shape_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dense_shape_tensor_name().data(), static_cast<int>(this->dense_shape_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.CooSparse.dense_shape_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->dense_shape_tensor_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorInfo.CooSparse)
  return target;
}

size_t TensorInfo_CooSparse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorInfo.CooSparse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string values_tensor_name = 1;
  if (this->values_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->values_tensor_name());
  }

  // string indices_tensor_name = 2;
  if (this->indices_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->indices_tensor_name());
  }

  // string dense_shape_tensor_name = 3;
  if (this->dense_shape_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dense_shape_tensor_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorInfo_CooSparse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorInfo.CooSparse)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorInfo_CooSparse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorInfo_CooSparse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorInfo.CooSparse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorInfo.CooSparse)
    MergeFrom(*source);
  }
}

void TensorInfo_CooSparse::MergeFrom(const TensorInfo_CooSparse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorInfo.CooSparse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.values_tensor_name().size() > 0) {
    set_values_tensor_name(from.values_tensor_name());
  }
  if (from.indices_tensor_name().size() > 0) {
    set_indices_tensor_name(from.indices_tensor_name());
  }
  if (from.dense_shape_tensor_name().size() > 0) {
    set_dense_shape_tensor_name(from.dense_shape_tensor_name());
  }
}

void TensorInfo_CooSparse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorInfo.CooSparse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorInfo_CooSparse::CopyFrom(const TensorInfo_CooSparse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorInfo.CooSparse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorInfo_CooSparse::IsInitialized() const {
  return true;
}

void TensorInfo_CooSparse::Swap(TensorInfo_CooSparse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TensorInfo_CooSparse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TensorInfo_CooSparse::UnsafeArenaSwap(TensorInfo_CooSparse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TensorInfo_CooSparse::InternalSwap(TensorInfo_CooSparse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_tensor_name_.Swap(&other->values_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  indices_tensor_name_.Swap(&other->indices_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dense_shape_tensor_name_.Swap(&other->dense_shape_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorInfo_CooSparse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorInfo_CompositeTensor::InitAsDefaultInstance() {
  ::tensorflow::_TensorInfo_CompositeTensor_default_instance_._instance.get_mutable()->type_spec_ = const_cast< ::tensorflow::TypeSpecProto*>(
      ::tensorflow::TypeSpecProto::internal_default_instance());
}
class TensorInfo_CompositeTensor::HasBitSetters {
 public:
  static const ::tensorflow::TypeSpecProto& type_spec(const TensorInfo_CompositeTensor* msg);
};

const ::tensorflow::TypeSpecProto&
TensorInfo_CompositeTensor::HasBitSetters::type_spec(const TensorInfo_CompositeTensor* msg) {
  return *msg->type_spec_;
}
void TensorInfo_CompositeTensor::unsafe_arena_set_allocated_type_spec(
    ::tensorflow::TypeSpecProto* type_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete type_spec_;
  }
  type_spec_ = type_spec;
  if (type_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TensorInfo.CompositeTensor.type_spec)
}
void TensorInfo_CompositeTensor::clear_type_spec() {
  if (GetArenaNoVirtual() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorInfo_CompositeTensor::kTypeSpecFieldNumber;
const int TensorInfo_CompositeTensor::kComponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorInfo_CompositeTensor::TensorInfo_CompositeTensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorInfo.CompositeTensor)
}
TensorInfo_CompositeTensor::TensorInfo_CompositeTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  components_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TensorInfo.CompositeTensor)
}
TensorInfo_CompositeTensor::TensorInfo_CompositeTensor(const TensorInfo_CompositeTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      components_(from.components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_type_spec()) {
    type_spec_ = new ::tensorflow::TypeSpecProto(*from.type_spec_);
  } else {
    type_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorInfo.CompositeTensor)
}

void TensorInfo_CompositeTensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  type_spec_ = nullptr;
}

TensorInfo_CompositeTensor::~TensorInfo_CompositeTensor() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorInfo.CompositeTensor)
  SharedDtor();
}

void TensorInfo_CompositeTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete type_spec_;
}

void TensorInfo_CompositeTensor::ArenaDtor(void* object) {
  TensorInfo_CompositeTensor* _this = reinterpret_cast< TensorInfo_CompositeTensor* >(object);
  (void)_this;
}
void TensorInfo_CompositeTensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorInfo_CompositeTensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorInfo_CompositeTensor& TensorInfo_CompositeTensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TensorInfo_CompositeTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorInfo.CompositeTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  components_.Clear();
  if (GetArenaNoVirtual() == nullptr && type_spec_ != nullptr) {
    delete type_spec_;
  }
  type_spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorInfo_CompositeTensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TypeSpecProto type_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_type_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorInfo components = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorInfo_CompositeTensor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorInfo.CompositeTensor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TypeSpecProto type_spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.TensorInfo components = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorInfo.CompositeTensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorInfo.CompositeTensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorInfo_CompositeTensor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorInfo.CompositeTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TypeSpecProto type_spec = 1;
  if (this->has_type_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::type_spec(this), output);
  }

  // repeated .tensorflow.TensorInfo components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->components_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->components(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorInfo.CompositeTensor)
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorInfo_CompositeTensor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorInfo.CompositeTensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TypeSpecProto type_spec = 1;
  if (this->has_type_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::type_spec(this), target);
  }

  // repeated .tensorflow.TensorInfo components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->components_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->components(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorInfo.CompositeTensor)
  return target;
}

size_t TensorInfo_CompositeTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorInfo.CompositeTensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorInfo components = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->components_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->components(static_cast<int>(i)));
    }
  }

  // .tensorflow.TypeSpecProto type_spec = 1;
  if (this->has_type_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_spec_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorInfo_CompositeTensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorInfo.CompositeTensor)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorInfo_CompositeTensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorInfo_CompositeTensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorInfo.CompositeTensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorInfo.CompositeTensor)
    MergeFrom(*source);
  }
}

void TensorInfo_CompositeTensor::MergeFrom(const TensorInfo_CompositeTensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorInfo.CompositeTensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  components_.MergeFrom(from.components_);
  if (from.has_type_spec()) {
    mutable_type_spec()->::tensorflow::TypeSpecProto::MergeFrom(from.type_spec());
  }
}

void TensorInfo_CompositeTensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorInfo.CompositeTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorInfo_CompositeTensor::CopyFrom(const TensorInfo_CompositeTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorInfo.CompositeTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorInfo_CompositeTensor::IsInitialized() const {
  return true;
}

void TensorInfo_CompositeTensor::Swap(TensorInfo_CompositeTensor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TensorInfo_CompositeTensor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TensorInfo_CompositeTensor::UnsafeArenaSwap(TensorInfo_CompositeTensor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TensorInfo_CompositeTensor::InternalSwap(TensorInfo_CompositeTensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&components_)->InternalSwap(CastToBase(&other->components_));
  swap(type_spec_, other->type_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorInfo_CompositeTensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TensorInfo::InitAsDefaultInstance() {
  ::tensorflow::_TensorInfo_default_instance_.name_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorflow::_TensorInfo_default_instance_.coo_sparse_ = const_cast< ::tensorflow::TensorInfo_CooSparse*>(
      ::tensorflow::TensorInfo_CooSparse::internal_default_instance());
  ::tensorflow::_TensorInfo_default_instance_.composite_tensor_ = const_cast< ::tensorflow::TensorInfo_CompositeTensor*>(
      ::tensorflow::TensorInfo_CompositeTensor::internal_default_instance());
  ::tensorflow::_TensorInfo_default_instance_._instance.get_mutable()->tensor_shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
class TensorInfo::HasBitSetters {
 public:
  static const ::tensorflow::TensorInfo_CooSparse& coo_sparse(const TensorInfo* msg);
  static const ::tensorflow::TensorInfo_CompositeTensor& composite_tensor(const TensorInfo* msg);
  static const ::tensorflow::TensorShapeProto& tensor_shape(const TensorInfo* msg);
};

const ::tensorflow::TensorInfo_CooSparse&
TensorInfo::HasBitSetters::coo_sparse(const TensorInfo* msg) {
  return *msg->encoding_.coo_sparse_;
}
const ::tensorflow::TensorInfo_CompositeTensor&
TensorInfo::HasBitSetters::composite_tensor(const TensorInfo* msg) {
  return *msg->encoding_.composite_tensor_;
}
const ::tensorflow::TensorShapeProto&
TensorInfo::HasBitSetters::tensor_shape(const TensorInfo* msg) {
  return *msg->tensor_shape_;
}
void TensorInfo::set_allocated_coo_sparse(::tensorflow::TensorInfo_CooSparse* coo_sparse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_encoding();
  if (coo_sparse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coo_sparse);
    if (message_arena != submessage_arena) {
      coo_sparse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coo_sparse, submessage_arena);
    }
    set_has_coo_sparse();
    encoding_.coo_sparse_ = coo_sparse;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorInfo.coo_sparse)
}
void TensorInfo::set_allocated_composite_tensor(::tensorflow::TensorInfo_CompositeTensor* composite_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_encoding();
  if (composite_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(composite_tensor);
    if (message_arena != submessage_arena) {
      composite_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, composite_tensor, submessage_arena);
    }
    set_has_composite_tensor();
    encoding_.composite_tensor_ = composite_tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TensorInfo.composite_tensor)
}
void TensorInfo::unsafe_arena_set_allocated_tensor_shape(
    ::tensorflow::TensorShapeProto* tensor_shape) {
  if (GetArenaNoVirtual() == nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = tensor_shape;
  if (tensor_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TensorInfo.tensor_shape)
}
void TensorInfo::clear_tensor_shape() {
  if (GetArenaNoVirtual() == nullptr && tensor_shape_ != nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorInfo::kNameFieldNumber;
const int TensorInfo::kCooSparseFieldNumber;
const int TensorInfo::kCompositeTensorFieldNumber;
const int TensorInfo::kDtypeFieldNumber;
const int TensorInfo::kTensorShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorInfo::TensorInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.TensorInfo)
}
TensorInfo::TensorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TensorInfo)
}
TensorInfo::TensorInfo(const TensorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor_shape()) {
    tensor_shape_ = new ::tensorflow::TensorShapeProto(*from.tensor_shape_);
  } else {
    tensor_shape_ = nullptr;
  }
  dtype_ = from.dtype_;
  clear_has_encoding();
  switch (from.encoding_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kCooSparse: {
      mutable_coo_sparse()->::tensorflow::TensorInfo_CooSparse::MergeFrom(from.coo_sparse());
      break;
    }
    case kCompositeTensor: {
      mutable_composite_tensor()->::tensorflow::TensorInfo_CompositeTensor::MergeFrom(from.composite_tensor());
      break;
    }
    case ENCODING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorInfo)
}

void TensorInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  ::memset(&tensor_shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&tensor_shape_)) + sizeof(dtype_));
  clear_has_encoding();
}

TensorInfo::~TensorInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorInfo)
  SharedDtor();
}

void TensorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete tensor_shape_;
  if (has_encoding()) {
    clear_encoding();
  }
}

void TensorInfo::ArenaDtor(void* object) {
  TensorInfo* _this = reinterpret_cast< TensorInfo* >(object);
  (void)_this;
}
void TensorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorInfo& TensorInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorInfo_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void TensorInfo::clear_encoding() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.TensorInfo)
  switch (encoding_case()) {
    case kName: {
      encoding_.name_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kCooSparse: {
      if (GetArenaNoVirtual() == nullptr) {
        delete encoding_.coo_sparse_;
      }
      break;
    }
    case kCompositeTensor: {
      if (GetArenaNoVirtual() == nullptr) {
        delete encoding_.composite_tensor_;
      }
      break;
    }
    case ENCODING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENCODING_NOT_SET;
}


void TensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && tensor_shape_ != nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = nullptr;
  dtype_ = 0;
  clear_encoding();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "tensorflow.TensorInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto tensor_shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tensor_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorInfo.CooSparse coo_sparse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_coo_sparse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorInfo.CompositeTensor composite_tensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_composite_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.TensorInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.TensorInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType dtype = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto tensor_shape = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorInfo.CooSparse coo_sparse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_coo_sparse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorInfo.CompositeTensor composite_tensor = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_composite_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.TensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.TensorInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.TensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .tensorflow.DataType dtype = 2;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->dtype(), output);
  }

  // .tensorflow.TensorShapeProto tensor_shape = 3;
  if (this->has_tensor_shape()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::tensor_shape(this), output);
  }

  // .tensorflow.TensorInfo.CooSparse coo_sparse = 4;
  if (has_coo_sparse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::coo_sparse(this), output);
  }

  // .tensorflow.TensorInfo.CompositeTensor composite_tensor = 5;
  if (has_composite_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::composite_tensor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.TensorInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .tensorflow.DataType dtype = 2;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->dtype(), target);
  }

  // .tensorflow.TensorShapeProto tensor_shape = 3;
  if (this->has_tensor_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::tensor_shape(this), target);
  }

  // .tensorflow.TensorInfo.CooSparse coo_sparse = 4;
  if (has_coo_sparse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::coo_sparse(this), target);
  }

  // .tensorflow.TensorInfo.CompositeTensor composite_tensor = 5;
  if (has_composite_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::composite_tensor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorInfo)
  return target;
}

size_t TensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto tensor_shape = 3;
  if (this->has_tensor_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_shape_);
  }

  // .tensorflow.DataType dtype = 2;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  switch (encoding_case()) {
    // string name = 1;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    // .tensorflow.TensorInfo.CooSparse coo_sparse = 4;
    case kCooSparse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encoding_.coo_sparse_);
      break;
    }
    // .tensorflow.TensorInfo.CompositeTensor composite_tensor = 5;
    case kCompositeTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encoding_.composite_tensor_);
      break;
    }
    case ENCODING_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.TensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.TensorInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.TensorInfo)
    MergeFrom(*source);
  }
}

void TensorInfo::MergeFrom(const TensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor_shape()) {
    mutable_tensor_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.tensor_shape());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
  switch (from.encoding_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kCooSparse: {
      mutable_coo_sparse()->::tensorflow::TensorInfo_CooSparse::MergeFrom(from.coo_sparse());
      break;
    }
    case kCompositeTensor: {
      mutable_composite_tensor()->::tensorflow::TensorInfo_CompositeTensor::MergeFrom(from.composite_tensor());
      break;
    }
    case ENCODING_NOT_SET: {
      break;
    }
  }
}

void TensorInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.TensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorInfo::CopyFrom(const TensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorInfo::IsInitialized() const {
  return true;
}

void TensorInfo::Swap(TensorInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TensorInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TensorInfo::UnsafeArenaSwap(TensorInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TensorInfo::InternalSwap(TensorInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tensor_shape_, other->tensor_shape_);
  swap(dtype_, other->dtype_);
  swap(encoding_, other->encoding_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SignatureDef_InputsEntry_DoNotUse::SignatureDef_InputsEntry_DoNotUse() {}
SignatureDef_InputsEntry_DoNotUse::SignatureDef_InputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SignatureDef_InputsEntry_DoNotUse::MergeFrom(const SignatureDef_InputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SignatureDef_InputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SignatureDef_InputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SignatureDef_OutputsEntry_DoNotUse::SignatureDef_OutputsEntry_DoNotUse() {}
SignatureDef_OutputsEntry_DoNotUse::SignatureDef_OutputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SignatureDef_OutputsEntry_DoNotUse::MergeFrom(const SignatureDef_OutputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SignatureDef_OutputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SignatureDef_OutputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SignatureDef::InitAsDefaultInstance() {
}
class SignatureDef::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignatureDef::kInputsFieldNumber;
const int SignatureDef::kOutputsFieldNumber;
const int SignatureDef::kMethodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignatureDef::SignatureDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SignatureDef)
}
SignatureDef::SignatureDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SignatureDef)
}
SignatureDef::SignatureDef(const SignatureDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.method_name().size() > 0) {
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SignatureDef)
}

void SignatureDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignatureDef::~SignatureDef() {
  // @@protoc_insertion_point(destructor:tensorflow.SignatureDef)
  SharedDtor();
}

void SignatureDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignatureDef::ArenaDtor(void* object) {
  SignatureDef* _this = reinterpret_cast< SignatureDef* >(object);
  (void)_this;
}
void SignatureDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignatureDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignatureDef& SignatureDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignatureDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void SignatureDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SignatureDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SignatureDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .tensorflow.TensorInfo> inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&inputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.TensorInfo> outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&outputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_method_name(), ptr, ctx, "tensorflow.SignatureDef.method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SignatureDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SignatureDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.TensorInfo> inputs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          SignatureDef_InputsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SignatureDef_InputsEntry_DoNotUse,
              std::string, ::tensorflow::TensorInfo,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo > > parser(&inputs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.SignatureDef.InputsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.TensorInfo> outputs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          SignatureDef_OutputsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SignatureDef_OutputsEntry_DoNotUse,
              std::string, ::tensorflow::TensorInfo,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo > > parser(&outputs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.SignatureDef.OutputsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string method_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.SignatureDef.method_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SignatureDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SignatureDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SignatureDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SignatureDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.TensorInfo> inputs = 1;
  if (!this->inputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.SignatureDef.InputsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->inputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->inputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SignatureDef_InputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        SignatureDef_InputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .tensorflow.TensorInfo> outputs = 2;
  if (!this->outputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.SignatureDef.OutputsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->outputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->outputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SignatureDef_OutputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        SignatureDef_OutputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string method_name = 3;
  if (this->method_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SignatureDef.method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SignatureDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* SignatureDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SignatureDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.TensorInfo> inputs = 1;
  if (!this->inputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.SignatureDef.InputsEntry.key");
      }
    };

    if (false &&
        this->inputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->inputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SignatureDef_InputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        SignatureDef_InputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .tensorflow.TensorInfo> outputs = 2;
  if (!this->outputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.SignatureDef.OutputsEntry.key");
      }
    };

    if (false &&
        this->outputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->outputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SignatureDef_OutputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        SignatureDef_OutputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string method_name = 3;
  if (this->method_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SignatureDef.method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->method_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SignatureDef)
  return target;
}

size_t SignatureDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SignatureDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.TensorInfo> inputs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->inputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
      it = this->inputs().begin();
      it != this->inputs().end(); ++it) {
    SignatureDef_InputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // map<string, .tensorflow.TensorInfo> outputs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->outputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorInfo >::const_iterator
      it = this->outputs().begin();
      it != this->outputs().end(); ++it) {
    SignatureDef_OutputsEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // string method_name = 3;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->method_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignatureDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SignatureDef)
  GOOGLE_DCHECK_NE(&from, this);
  const SignatureDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignatureDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SignatureDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SignatureDef)
    MergeFrom(*source);
  }
}

void SignatureDef::MergeFrom(const SignatureDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SignatureDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.method_name().size() > 0) {
    set_method_name(from.method_name());
  }
}

void SignatureDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SignatureDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignatureDef::CopyFrom(const SignatureDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SignatureDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDef::IsInitialized() const {
  return true;
}

void SignatureDef::Swap(SignatureDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignatureDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SignatureDef::UnsafeArenaSwap(SignatureDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignatureDef::InternalSwap(SignatureDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.Swap(&other->inputs_);
  outputs_.Swap(&other->outputs_);
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssetFileDef::InitAsDefaultInstance() {
  ::tensorflow::_AssetFileDef_default_instance_._instance.get_mutable()->tensor_info_ = const_cast< ::tensorflow::TensorInfo*>(
      ::tensorflow::TensorInfo::internal_default_instance());
}
class AssetFileDef::HasBitSetters {
 public:
  static const ::tensorflow::TensorInfo& tensor_info(const AssetFileDef* msg);
};

const ::tensorflow::TensorInfo&
AssetFileDef::HasBitSetters::tensor_info(const AssetFileDef* msg) {
  return *msg->tensor_info_;
}
void AssetFileDef::unsafe_arena_set_allocated_tensor_info(
    ::tensorflow::TensorInfo* tensor_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete tensor_info_;
  }
  tensor_info_ = tensor_info;
  if (tensor_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.AssetFileDef.tensor_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetFileDef::kTensorInfoFieldNumber;
const int AssetFileDef::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetFileDef::AssetFileDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AssetFileDef)
}
AssetFileDef::AssetFileDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AssetFileDef)
}
AssetFileDef::AssetFileDef(const AssetFileDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename(),
      GetArenaNoVirtual());
  }
  if (from.has_tensor_info()) {
    tensor_info_ = new ::tensorflow::TensorInfo(*from.tensor_info_);
  } else {
    tensor_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.AssetFileDef)
}

void AssetFileDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tensor_info_ = nullptr;
}

AssetFileDef::~AssetFileDef() {
  // @@protoc_insertion_point(destructor:tensorflow.AssetFileDef)
  SharedDtor();
}

void AssetFileDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_info_;
}

void AssetFileDef::ArenaDtor(void* object) {
  AssetFileDef* _this = reinterpret_cast< AssetFileDef* >(object);
  (void)_this;
}
void AssetFileDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AssetFileDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssetFileDef& AssetFileDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssetFileDef_tensorflow_2fcore_2fprotobuf_2fmeta_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void AssetFileDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AssetFileDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && tensor_info_ != nullptr) {
    delete tensor_info_;
  }
  tensor_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AssetFileDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TensorInfo tensor_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tensor_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "tensorflow.AssetFileDef.filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AssetFileDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AssetFileDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorInfo tensor_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.AssetFileDef.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AssetFileDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AssetFileDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AssetFileDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AssetFileDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorInfo tensor_info = 1;
  if (this->has_tensor_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::tensor_info(this), output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AssetFileDef.filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.AssetFileDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* AssetFileDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AssetFileDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorInfo tensor_info = 1;
  if (this->has_tensor_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::tensor_info(this), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AssetFileDef.filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AssetFileDef)
  return target;
}

size_t AssetFileDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AssetFileDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // .tensorflow.TensorInfo tensor_info = 1;
  if (this->has_tensor_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssetFileDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AssetFileDef)
  GOOGLE_DCHECK_NE(&from, this);
  const AssetFileDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssetFileDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AssetFileDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AssetFileDef)
    MergeFrom(*source);
  }
}

void AssetFileDef::MergeFrom(const AssetFileDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AssetFileDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    set_filename(from.filename());
  }
  if (from.has_tensor_info()) {
    mutable_tensor_info()->::tensorflow::TensorInfo::MergeFrom(from.tensor_info());
  }
}

void AssetFileDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AssetFileDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetFileDef::CopyFrom(const AssetFileDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AssetFileDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetFileDef::IsInitialized() const {
  return true;
}

void AssetFileDef::Swap(AssetFileDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AssetFileDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void AssetFileDef::UnsafeArenaSwap(AssetFileDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AssetFileDef::InternalSwap(AssetFileDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_info_, other->tensor_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssetFileDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetaGraphDef_MetaInfoDef_FunctionAliasesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MetaGraphDef_MetaInfoDef* Arena::CreateMaybeMessage< ::tensorflow::MetaGraphDef_MetaInfoDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetaGraphDef_MetaInfoDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetaGraphDef_CollectionDefEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetaGraphDef_SignatureDefEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MetaGraphDef* Arena::CreateMaybeMessage< ::tensorflow::MetaGraphDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetaGraphDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CollectionDef_NodeList* Arena::CreateMaybeMessage< ::tensorflow::CollectionDef_NodeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CollectionDef_NodeList >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CollectionDef_BytesList* Arena::CreateMaybeMessage< ::tensorflow::CollectionDef_BytesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CollectionDef_BytesList >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CollectionDef_Int64List* Arena::CreateMaybeMessage< ::tensorflow::CollectionDef_Int64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CollectionDef_Int64List >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CollectionDef_FloatList* Arena::CreateMaybeMessage< ::tensorflow::CollectionDef_FloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CollectionDef_FloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CollectionDef_AnyList* Arena::CreateMaybeMessage< ::tensorflow::CollectionDef_AnyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CollectionDef_AnyList >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CollectionDef* Arena::CreateMaybeMessage< ::tensorflow::CollectionDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CollectionDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TensorInfo_CooSparse* Arena::CreateMaybeMessage< ::tensorflow::TensorInfo_CooSparse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TensorInfo_CooSparse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TensorInfo_CompositeTensor* Arena::CreateMaybeMessage< ::tensorflow::TensorInfo_CompositeTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TensorInfo_CompositeTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TensorInfo* Arena::CreateMaybeMessage< ::tensorflow::TensorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TensorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SignatureDef_InputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::SignatureDef_InputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SignatureDef_InputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SignatureDef_OutputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::SignatureDef_OutputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SignatureDef_OutputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SignatureDef* Arena::CreateMaybeMessage< ::tensorflow::SignatureDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SignatureDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AssetFileDef* Arena::CreateMaybeMessage< ::tensorflow::AssetFileDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AssetFileDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
