// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/log_memory.proto

#include "tensorflow/core/framework/log_memory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorDescription_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto;
namespace tensorflow {
class MemoryLogStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLogStep> _instance;
} _MemoryLogStep_default_instance_;
class MemoryLogTensorAllocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLogTensorAllocation> _instance;
} _MemoryLogTensorAllocation_default_instance_;
class MemoryLogTensorDeallocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLogTensorDeallocation> _instance;
} _MemoryLogTensorDeallocation_default_instance_;
class MemoryLogTensorOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLogTensorOutput> _instance;
} _MemoryLogTensorOutput_default_instance_;
class MemoryLogRawAllocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLogRawAllocation> _instance;
} _MemoryLogRawAllocation_default_instance_;
class MemoryLogRawDeallocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryLogRawDeallocation> _instance;
} _MemoryLogRawDeallocation_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_MemoryLogRawAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryLogRawAllocation_default_instance_;
    new (ptr) ::tensorflow::MemoryLogRawAllocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryLogRawAllocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLogRawAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLogRawAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto}, {}};

static void InitDefaultsscc_info_MemoryLogRawDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryLogRawDeallocation_default_instance_;
    new (ptr) ::tensorflow::MemoryLogRawDeallocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryLogRawDeallocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLogRawDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLogRawDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto}, {}};

static void InitDefaultsscc_info_MemoryLogStep_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryLogStep_default_instance_;
    new (ptr) ::tensorflow::MemoryLogStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryLogStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLogStep_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLogStep_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto}, {}};

static void InitDefaultsscc_info_MemoryLogTensorAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryLogTensorAllocation_default_instance_;
    new (ptr) ::tensorflow::MemoryLogTensorAllocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryLogTensorAllocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryLogTensorAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MemoryLogTensorAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto}, {
      &scc_info_TensorDescription_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto.base,}};

static void InitDefaultsscc_info_MemoryLogTensorDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryLogTensorDeallocation_default_instance_;
    new (ptr) ::tensorflow::MemoryLogTensorDeallocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryLogTensorDeallocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryLogTensorDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MemoryLogTensorDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto}, {}};

static void InitDefaultsscc_info_MemoryLogTensorOutput_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_MemoryLogTensorOutput_default_instance_;
    new (ptr) ::tensorflow::MemoryLogTensorOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::MemoryLogTensorOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MemoryLogTensorOutput_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MemoryLogTensorOutput_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto}, {
      &scc_info_TensorDescription_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogStep, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogStep, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, kernel_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorAllocation, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorDeallocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorDeallocation, allocation_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorDeallocation, allocator_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, kernel_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, index_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogTensorOutput, tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, operation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, num_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, ptr_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, allocation_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawAllocation, allocator_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, operation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, allocation_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, allocator_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryLogRawDeallocation, deferred_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::MemoryLogStep)},
  { 7, -1, sizeof(::tensorflow::MemoryLogTensorAllocation)},
  { 15, -1, sizeof(::tensorflow::MemoryLogTensorDeallocation)},
  { 22, -1, sizeof(::tensorflow::MemoryLogTensorOutput)},
  { 31, -1, sizeof(::tensorflow::MemoryLogRawAllocation)},
  { 42, -1, sizeof(::tensorflow::MemoryLogRawDeallocation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryLogStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryLogTensorAllocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryLogTensorDeallocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryLogTensorOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryLogRawAllocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_MemoryLogRawDeallocation_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto[] =
  "\n*tensorflow/core/framework/log_memory.p"
  "roto\022\ntensorflow\0322tensorflow/core/framew"
  "ork/tensor_description.proto\"0\n\rMemoryLo"
  "gStep\022\017\n\007step_id\030\001 \001(\003\022\016\n\006handle\030\002 \001(\t\"p"
  "\n\031MemoryLogTensorAllocation\022\017\n\007step_id\030\001"
  " \001(\003\022\023\n\013kernel_name\030\002 \001(\t\022-\n\006tensor\030\003 \001("
  "\0132\035.tensorflow.TensorDescription\"L\n\033Memo"
  "ryLogTensorDeallocation\022\025\n\rallocation_id"
  "\030\001 \001(\003\022\026\n\016allocator_name\030\002 \001(\t\"{\n\025Memory"
  "LogTensorOutput\022\017\n\007step_id\030\001 \001(\003\022\023\n\013kern"
  "el_name\030\002 \001(\t\022\r\n\005index\030\003 \001(\005\022-\n\006tensor\030\004"
  " \001(\0132\035.tensorflow.TensorDescription\"\213\001\n\026"
  "MemoryLogRawAllocation\022\017\n\007step_id\030\001 \001(\003\022"
  "\021\n\toperation\030\002 \001(\t\022\021\n\tnum_bytes\030\003 \001(\003\022\013\n"
  "\003ptr\030\004 \001(\004\022\025\n\rallocation_id\030\005 \001(\003\022\026\n\016all"
  "ocator_name\030\006 \001(\t\"\177\n\030MemoryLogRawDealloc"
  "ation\022\017\n\007step_id\030\001 \001(\003\022\021\n\toperation\030\002 \001("
  "\t\022\025\n\rallocation_id\030\003 \001(\003\022\026\n\016allocator_na"
  "me\030\004 \001(\t\022\020\n\010deferred\030\005 \001(\010B\203\001\n\030org.tenso"
  "rflow.frameworkB\017LogMemoryProtosP\001ZQgith"
  "ub.com/tensorflow/tensorflow/tensorflow/"
  "go/core/framework/log_memory_go_proto\370\001\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_sccs[6] = {
  &scc_info_MemoryLogRawAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base,
  &scc_info_MemoryLogRawDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base,
  &scc_info_MemoryLogStep_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base,
  &scc_info_MemoryLogTensorAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base,
  &scc_info_MemoryLogTensorDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base,
  &scc_info_MemoryLogTensorOutput_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto, "tensorflow/core/framework/log_memory.proto", 888,
  &descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto, 6, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto), true);
namespace tensorflow {

// ===================================================================

void MemoryLogStep::InitAsDefaultInstance() {
}
class MemoryLogStep::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogStep::kStepIdFieldNumber;
const int MemoryLogStep::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogStep::MemoryLogStep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogStep)
}
MemoryLogStep::MemoryLogStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogStep)
}
MemoryLogStep::MemoryLogStep(const MemoryLogStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.handle().size() > 0) {
    handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.handle(),
      GetArenaNoVirtual());
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogStep)
}

void MemoryLogStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLogStep_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  step_id_ = PROTOBUF_LONGLONG(0);
}

MemoryLogStep::~MemoryLogStep() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogStep)
  SharedDtor();
}

void MemoryLogStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryLogStep::ArenaDtor(void* object) {
  MemoryLogStep* _this = reinterpret_cast< MemoryLogStep* >(object);
  (void)_this;
}
void MemoryLogStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryLogStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLogStep& MemoryLogStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLogStep_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  return *internal_default_instance();
}


void MemoryLogStep::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  step_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLogStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_handle(), ptr, ctx, "tensorflow.MemoryLogStep.handle");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLogStep::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogStep)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_handle()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->handle().data(), static_cast<int>(this->handle().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogStep.handle"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogStep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLogStep::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string handle = 2;
  if (this->handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), static_cast<int>(this->handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogStep.handle");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogStep)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryLogStep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string handle = 2;
  if (this->handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->handle().data(), static_cast<int>(this->handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogStep.handle");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogStep)
  return target;
}

size_t MemoryLogStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string handle = 2;
  if (this->handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->handle());
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLogStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogStep)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryLogStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogStep)
    MergeFrom(*source);
  }
}

void MemoryLogStep::MergeFrom(const MemoryLogStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.handle().size() > 0) {
    set_handle(from.handle());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void MemoryLogStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogStep::CopyFrom(const MemoryLogStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogStep::IsInitialized() const {
  return true;
}

void MemoryLogStep::Swap(MemoryLogStep* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogStep* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MemoryLogStep::UnsafeArenaSwap(MemoryLogStep* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogStep::InternalSwap(MemoryLogStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_id_, other->step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryLogStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryLogTensorAllocation::InitAsDefaultInstance() {
  ::tensorflow::_MemoryLogTensorAllocation_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorDescription*>(
      ::tensorflow::TensorDescription::internal_default_instance());
}
class MemoryLogTensorAllocation::HasBitSetters {
 public:
  static const ::tensorflow::TensorDescription& tensor(const MemoryLogTensorAllocation* msg);
};

const ::tensorflow::TensorDescription&
MemoryLogTensorAllocation::HasBitSetters::tensor(const MemoryLogTensorAllocation* msg) {
  return *msg->tensor_;
}
void MemoryLogTensorAllocation::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorDescription* tensor) {
  if (GetArenaNoVirtual() == nullptr) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorAllocation.tensor)
}
void MemoryLogTensorAllocation::clear_tensor() {
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogTensorAllocation::kStepIdFieldNumber;
const int MemoryLogTensorAllocation::kKernelNameFieldNumber;
const int MemoryLogTensorAllocation::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogTensorAllocation::MemoryLogTensorAllocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogTensorAllocation)
}
MemoryLogTensorAllocation::MemoryLogTensorAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorAllocation)
}
MemoryLogTensorAllocation::MemoryLogTensorAllocation(const MemoryLogTensorAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.kernel_name().size() > 0) {
    kernel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kernel_name(),
      GetArenaNoVirtual());
  }
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorDescription(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  step_id_ = from.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorAllocation)
}

void MemoryLogTensorAllocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLogTensorAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_id_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(step_id_));
}

MemoryLogTensorAllocation::~MemoryLogTensorAllocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorAllocation)
  SharedDtor();
}

void MemoryLogTensorAllocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  kernel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_;
}

void MemoryLogTensorAllocation::ArenaDtor(void* object) {
  MemoryLogTensorAllocation* _this = reinterpret_cast< MemoryLogTensorAllocation* >(object);
  (void)_this;
}
void MemoryLogTensorAllocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryLogTensorAllocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLogTensorAllocation& MemoryLogTensorAllocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLogTensorAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  return *internal_default_instance();
}


void MemoryLogTensorAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kernel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  step_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLogTensorAllocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kernel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_kernel_name(), ptr, ctx, "tensorflow.MemoryLogTensorAllocation.kernel_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorDescription tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLogTensorAllocation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogTensorAllocation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kernel_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->kernel_name().data(), static_cast<int>(this->kernel_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogTensorAllocation.kernel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorDescription tensor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogTensorAllocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogTensorAllocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLogTensorAllocation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogTensorAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), static_cast<int>(this->kernel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorAllocation.kernel_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kernel_name(), output);
  }

  // .tensorflow.TensorDescription tensor = 3;
  if (this->has_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::tensor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogTensorAllocation)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryLogTensorAllocation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), static_cast<int>(this->kernel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorAllocation.kernel_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->kernel_name(), target);
  }

  // .tensorflow.TensorDescription tensor = 3;
  if (this->has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::tensor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorAllocation)
  return target;
}

size_t MemoryLogTensorAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorAllocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->kernel_name());
  }

  // .tensorflow.TensorDescription tensor = 3;
  if (this->has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLogTensorAllocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogTensorAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogTensorAllocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryLogTensorAllocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogTensorAllocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogTensorAllocation)
    MergeFrom(*source);
  }
}

void MemoryLogTensorAllocation::MergeFrom(const MemoryLogTensorAllocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kernel_name().size() > 0) {
    set_kernel_name(from.kernel_name());
  }
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorDescription::MergeFrom(from.tensor());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
}

void MemoryLogTensorAllocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogTensorAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogTensorAllocation::CopyFrom(const MemoryLogTensorAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogTensorAllocation::IsInitialized() const {
  return true;
}

void MemoryLogTensorAllocation::Swap(MemoryLogTensorAllocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogTensorAllocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MemoryLogTensorAllocation::UnsafeArenaSwap(MemoryLogTensorAllocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogTensorAllocation::InternalSwap(MemoryLogTensorAllocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kernel_name_.Swap(&other->kernel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_, other->tensor_);
  swap(step_id_, other->step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryLogTensorAllocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryLogTensorDeallocation::InitAsDefaultInstance() {
}
class MemoryLogTensorDeallocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogTensorDeallocation::kAllocationIdFieldNumber;
const int MemoryLogTensorDeallocation::kAllocatorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogTensorDeallocation::MemoryLogTensorDeallocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogTensorDeallocation)
}
MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorDeallocation)
}
MemoryLogTensorDeallocation::MemoryLogTensorDeallocation(const MemoryLogTensorDeallocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  allocation_id_ = from.allocation_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorDeallocation)
}

void MemoryLogTensorDeallocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLogTensorDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allocation_id_ = PROTOBUF_LONGLONG(0);
}

MemoryLogTensorDeallocation::~MemoryLogTensorDeallocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorDeallocation)
  SharedDtor();
}

void MemoryLogTensorDeallocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  allocator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryLogTensorDeallocation::ArenaDtor(void* object) {
  MemoryLogTensorDeallocation* _this = reinterpret_cast< MemoryLogTensorDeallocation* >(object);
  (void)_this;
}
void MemoryLogTensorDeallocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryLogTensorDeallocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLogTensorDeallocation& MemoryLogTensorDeallocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLogTensorDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  return *internal_default_instance();
}


void MemoryLogTensorDeallocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorDeallocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allocator_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allocation_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLogTensorDeallocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 allocation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          allocation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string allocator_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_allocator_name(), ptr, ctx, "tensorflow.MemoryLogTensorDeallocation.allocator_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLogTensorDeallocation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogTensorDeallocation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 allocation_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allocator_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogTensorDeallocation.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogTensorDeallocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogTensorDeallocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLogTensorDeallocation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogTensorDeallocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 allocation_id = 1;
  if (this->allocation_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->allocation_id(), output);
  }

  // string allocator_name = 2;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorDeallocation.allocator_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->allocator_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogTensorDeallocation)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryLogTensorDeallocation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorDeallocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 allocation_id = 1;
  if (this->allocation_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->allocation_id(), target);
  }

  // string allocator_name = 2;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorDeallocation.allocator_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->allocator_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorDeallocation)
  return target;
}

size_t MemoryLogTensorDeallocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorDeallocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string allocator_name = 2;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 allocation_id = 1;
  if (this->allocation_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->allocation_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLogTensorDeallocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogTensorDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogTensorDeallocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryLogTensorDeallocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogTensorDeallocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogTensorDeallocation)
    MergeFrom(*source);
  }
}

void MemoryLogTensorDeallocation::MergeFrom(const MemoryLogTensorDeallocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.allocation_id() != 0) {
    set_allocation_id(from.allocation_id());
  }
}

void MemoryLogTensorDeallocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogTensorDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogTensorDeallocation::CopyFrom(const MemoryLogTensorDeallocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogTensorDeallocation::IsInitialized() const {
  return true;
}

void MemoryLogTensorDeallocation::Swap(MemoryLogTensorDeallocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogTensorDeallocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MemoryLogTensorDeallocation::UnsafeArenaSwap(MemoryLogTensorDeallocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogTensorDeallocation::InternalSwap(MemoryLogTensorDeallocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allocator_name_.Swap(&other->allocator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(allocation_id_, other->allocation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryLogTensorDeallocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryLogTensorOutput::InitAsDefaultInstance() {
  ::tensorflow::_MemoryLogTensorOutput_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorDescription*>(
      ::tensorflow::TensorDescription::internal_default_instance());
}
class MemoryLogTensorOutput::HasBitSetters {
 public:
  static const ::tensorflow::TensorDescription& tensor(const MemoryLogTensorOutput* msg);
};

const ::tensorflow::TensorDescription&
MemoryLogTensorOutput::HasBitSetters::tensor(const MemoryLogTensorOutput* msg) {
  return *msg->tensor_;
}
void MemoryLogTensorOutput::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorDescription* tensor) {
  if (GetArenaNoVirtual() == nullptr) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.MemoryLogTensorOutput.tensor)
}
void MemoryLogTensorOutput::clear_tensor() {
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogTensorOutput::kStepIdFieldNumber;
const int MemoryLogTensorOutput::kKernelNameFieldNumber;
const int MemoryLogTensorOutput::kIndexFieldNumber;
const int MemoryLogTensorOutput::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogTensorOutput::MemoryLogTensorOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogTensorOutput)
}
MemoryLogTensorOutput::MemoryLogTensorOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogTensorOutput)
}
MemoryLogTensorOutput::MemoryLogTensorOutput(const MemoryLogTensorOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.kernel_name().size() > 0) {
    kernel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.kernel_name(),
      GetArenaNoVirtual());
  }
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorDescription(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogTensorOutput)
}

void MemoryLogTensorOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLogTensorOutput_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  kernel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(index_));
}

MemoryLogTensorOutput::~MemoryLogTensorOutput() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogTensorOutput)
  SharedDtor();
}

void MemoryLogTensorOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  kernel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_;
}

void MemoryLogTensorOutput::ArenaDtor(void* object) {
  MemoryLogTensorOutput* _this = reinterpret_cast< MemoryLogTensorOutput* >(object);
  (void)_this;
}
void MemoryLogTensorOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryLogTensorOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLogTensorOutput& MemoryLogTensorOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLogTensorOutput_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  return *internal_default_instance();
}


void MemoryLogTensorOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogTensorOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kernel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLogTensorOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kernel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_kernel_name(), ptr, ctx, "tensorflow.MemoryLogTensorOutput.kernel_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorDescription tensor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLogTensorOutput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogTensorOutput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kernel_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->kernel_name().data(), static_cast<int>(this->kernel_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogTensorOutput.kernel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorDescription tensor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogTensorOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogTensorOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLogTensorOutput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogTensorOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), static_cast<int>(this->kernel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorOutput.kernel_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kernel_name(), output);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // .tensorflow.TensorDescription tensor = 4;
  if (this->has_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::tensor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogTensorOutput)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryLogTensorOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogTensorOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->kernel_name().data(), static_cast<int>(this->kernel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogTensorOutput.kernel_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->kernel_name(), target);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // .tensorflow.TensorDescription tensor = 4;
  if (this->has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::tensor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogTensorOutput)
  return target;
}

size_t MemoryLogTensorOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogTensorOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kernel_name = 2;
  if (this->kernel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->kernel_name());
  }

  // .tensorflow.TensorDescription tensor = 4;
  if (this->has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLogTensorOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogTensorOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogTensorOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryLogTensorOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogTensorOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogTensorOutput)
    MergeFrom(*source);
  }
}

void MemoryLogTensorOutput::MergeFrom(const MemoryLogTensorOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogTensorOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kernel_name().size() > 0) {
    set_kernel_name(from.kernel_name());
  }
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorDescription::MergeFrom(from.tensor());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void MemoryLogTensorOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogTensorOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogTensorOutput::CopyFrom(const MemoryLogTensorOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogTensorOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogTensorOutput::IsInitialized() const {
  return true;
}

void MemoryLogTensorOutput::Swap(MemoryLogTensorOutput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogTensorOutput* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MemoryLogTensorOutput::UnsafeArenaSwap(MemoryLogTensorOutput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogTensorOutput::InternalSwap(MemoryLogTensorOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kernel_name_.Swap(&other->kernel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tensor_, other->tensor_);
  swap(step_id_, other->step_id_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryLogTensorOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryLogRawAllocation::InitAsDefaultInstance() {
}
class MemoryLogRawAllocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogRawAllocation::kStepIdFieldNumber;
const int MemoryLogRawAllocation::kOperationFieldNumber;
const int MemoryLogRawAllocation::kNumBytesFieldNumber;
const int MemoryLogRawAllocation::kPtrFieldNumber;
const int MemoryLogRawAllocation::kAllocationIdFieldNumber;
const int MemoryLogRawAllocation::kAllocatorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogRawAllocation::MemoryLogRawAllocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogRawAllocation)
}
MemoryLogRawAllocation::MemoryLogRawAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogRawAllocation)
}
MemoryLogRawAllocation::MemoryLogRawAllocation(const MemoryLogRawAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operation(),
      GetArenaNoVirtual());
  }
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allocation_id_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(allocation_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogRawAllocation)
}

void MemoryLogRawAllocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLogRawAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocation_id_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(allocation_id_));
}

MemoryLogRawAllocation::~MemoryLogRawAllocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogRawAllocation)
  SharedDtor();
}

void MemoryLogRawAllocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  operation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allocator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryLogRawAllocation::ArenaDtor(void* object) {
  MemoryLogRawAllocation* _this = reinterpret_cast< MemoryLogRawAllocation* >(object);
  (void)_this;
}
void MemoryLogRawAllocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryLogRawAllocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLogRawAllocation& MemoryLogRawAllocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLogRawAllocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  return *internal_default_instance();
}


void MemoryLogRawAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogRawAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allocator_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allocation_id_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(allocation_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLogRawAllocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_operation(), ptr, ctx, "tensorflow.MemoryLogRawAllocation.operation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ptr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allocation_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          allocation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string allocator_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_allocator_name(), ptr, ctx, "tensorflow.MemoryLogRawAllocation.allocator_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLogRawAllocation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogRawAllocation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->operation().data(), static_cast<int>(this->operation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawAllocation.operation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_bytes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ptr = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allocation_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allocator_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawAllocation.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogRawAllocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogRawAllocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLogRawAllocation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogRawAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.operation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operation(), output);
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->num_bytes(), output);
  }

  // uint64 ptr = 4;
  if (this->ptr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ptr(), output);
  }

  // int64 allocation_id = 5;
  if (this->allocation_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->allocation_id(), output);
  }

  // string allocator_name = 6;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.allocator_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->allocator_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogRawAllocation)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryLogRawAllocation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogRawAllocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.operation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->num_bytes(), target);
  }

  // uint64 ptr = 4;
  if (this->ptr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ptr(), target);
  }

  // int64 allocation_id = 5;
  if (this->allocation_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->allocation_id(), target);
  }

  // string allocator_name = 6;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawAllocation.allocator_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->allocator_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogRawAllocation)
  return target;
}

size_t MemoryLogRawAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogRawAllocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 2;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->operation());
  }

  // string allocator_name = 6;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 num_bytes = 3;
  if (this->num_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->num_bytes());
  }

  // uint64 ptr = 4;
  if (this->ptr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }

  // int64 allocation_id = 5;
  if (this->allocation_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->allocation_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLogRawAllocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogRawAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogRawAllocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryLogRawAllocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogRawAllocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogRawAllocation)
    MergeFrom(*source);
  }
}

void MemoryLogRawAllocation::MergeFrom(const MemoryLogRawAllocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogRawAllocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation().size() > 0) {
    set_operation(from.operation());
  }
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.num_bytes() != 0) {
    set_num_bytes(from.num_bytes());
  }
  if (from.ptr() != 0) {
    set_ptr(from.ptr());
  }
  if (from.allocation_id() != 0) {
    set_allocation_id(from.allocation_id());
  }
}

void MemoryLogRawAllocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogRawAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogRawAllocation::CopyFrom(const MemoryLogRawAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogRawAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogRawAllocation::IsInitialized() const {
  return true;
}

void MemoryLogRawAllocation::Swap(MemoryLogRawAllocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogRawAllocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MemoryLogRawAllocation::UnsafeArenaSwap(MemoryLogRawAllocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogRawAllocation::InternalSwap(MemoryLogRawAllocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  operation_.Swap(&other->operation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  allocator_name_.Swap(&other->allocator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_id_, other->step_id_);
  swap(num_bytes_, other->num_bytes_);
  swap(ptr_, other->ptr_);
  swap(allocation_id_, other->allocation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryLogRawAllocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryLogRawDeallocation::InitAsDefaultInstance() {
}
class MemoryLogRawDeallocation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryLogRawDeallocation::kStepIdFieldNumber;
const int MemoryLogRawDeallocation::kOperationFieldNumber;
const int MemoryLogRawDeallocation::kAllocationIdFieldNumber;
const int MemoryLogRawDeallocation::kAllocatorNameFieldNumber;
const int MemoryLogRawDeallocation::kDeferredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryLogRawDeallocation::MemoryLogRawDeallocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.MemoryLogRawDeallocation)
}
MemoryLogRawDeallocation::MemoryLogRawDeallocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryLogRawDeallocation)
}
MemoryLogRawDeallocation::MemoryLogRawDeallocation(const MemoryLogRawDeallocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.operation().size() > 0) {
    operation_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operation(),
      GetArenaNoVirtual());
  }
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.allocator_name().size() > 0) {
    allocator_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.allocator_name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&step_id_, &from.step_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deferred_) -
    reinterpret_cast<char*>(&step_id_)) + sizeof(deferred_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryLogRawDeallocation)
}

void MemoryLogRawDeallocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemoryLogRawDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  operation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allocator_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deferred_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(deferred_));
}

MemoryLogRawDeallocation::~MemoryLogRawDeallocation() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryLogRawDeallocation)
  SharedDtor();
}

void MemoryLogRawDeallocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  operation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allocator_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryLogRawDeallocation::ArenaDtor(void* object) {
  MemoryLogRawDeallocation* _this = reinterpret_cast< MemoryLogRawDeallocation* >(object);
  (void)_this;
}
void MemoryLogRawDeallocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryLogRawDeallocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryLogRawDeallocation& MemoryLogRawDeallocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryLogRawDeallocation_tensorflow_2fcore_2fframework_2flog_5fmemory_2eproto.base);
  return *internal_default_instance();
}


void MemoryLogRawDeallocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryLogRawDeallocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allocator_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&step_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deferred_) -
      reinterpret_cast<char*>(&step_id_)) + sizeof(deferred_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MemoryLogRawDeallocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_operation(), ptr, ctx, "tensorflow.MemoryLogRawDeallocation.operation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allocation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          allocation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string allocator_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_allocator_name(), ptr, ctx, "tensorflow.MemoryLogRawDeallocation.allocator_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deferred = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          deferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MemoryLogRawDeallocation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.MemoryLogRawDeallocation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 step_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &step_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string operation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_operation()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->operation().data(), static_cast<int>(this->operation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawDeallocation.operation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allocation_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string allocator_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.MemoryLogRawDeallocation.allocator_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deferred = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.MemoryLogRawDeallocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.MemoryLogRawDeallocation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MemoryLogRawDeallocation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.MemoryLogRawDeallocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->step_id(), output);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.operation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->operation(), output);
  }

  // int64 allocation_id = 3;
  if (this->allocation_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->allocation_id(), output);
  }

  // string allocator_name = 4;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.allocator_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->allocator_name(), output);
  }

  // bool deferred = 5;
  if (this->deferred() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->deferred(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.MemoryLogRawDeallocation)
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryLogRawDeallocation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryLogRawDeallocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->step_id(), target);
  }

  // string operation = 2;
  if (this->operation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->operation().data(), static_cast<int>(this->operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.operation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->operation(), target);
  }

  // int64 allocation_id = 3;
  if (this->allocation_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->allocation_id(), target);
  }

  // string allocator_name = 4;
  if (this->allocator_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), static_cast<int>(this->allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryLogRawDeallocation.allocator_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->allocator_name(), target);
  }

  // bool deferred = 5;
  if (this->deferred() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->deferred(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryLogRawDeallocation)
  return target;
}

size_t MemoryLogRawDeallocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryLogRawDeallocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 2;
  if (this->operation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->operation());
  }

  // string allocator_name = 4;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // int64 step_id = 1;
  if (this->step_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->step_id());
  }

  // int64 allocation_id = 3;
  if (this->allocation_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->allocation_id());
  }

  // bool deferred = 5;
  if (this->deferred() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryLogRawDeallocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.MemoryLogRawDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryLogRawDeallocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryLogRawDeallocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.MemoryLogRawDeallocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.MemoryLogRawDeallocation)
    MergeFrom(*source);
  }
}

void MemoryLogRawDeallocation::MergeFrom(const MemoryLogRawDeallocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryLogRawDeallocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation().size() > 0) {
    set_operation(from.operation());
  }
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.step_id() != 0) {
    set_step_id(from.step_id());
  }
  if (from.allocation_id() != 0) {
    set_allocation_id(from.allocation_id());
  }
  if (from.deferred() != 0) {
    set_deferred(from.deferred());
  }
}

void MemoryLogRawDeallocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.MemoryLogRawDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLogRawDeallocation::CopyFrom(const MemoryLogRawDeallocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryLogRawDeallocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLogRawDeallocation::IsInitialized() const {
  return true;
}

void MemoryLogRawDeallocation::Swap(MemoryLogRawDeallocation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MemoryLogRawDeallocation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MemoryLogRawDeallocation::UnsafeArenaSwap(MemoryLogRawDeallocation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MemoryLogRawDeallocation::InternalSwap(MemoryLogRawDeallocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  operation_.Swap(&other->operation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  allocator_name_.Swap(&other->allocator_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(step_id_, other->step_id_);
  swap(allocation_id_, other->allocation_id_);
  swap(deferred_, other->deferred_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryLogRawDeallocation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryLogStep* Arena::CreateMaybeMessage< ::tensorflow::MemoryLogStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryLogStep >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryLogTensorAllocation* Arena::CreateMaybeMessage< ::tensorflow::MemoryLogTensorAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryLogTensorAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryLogTensorDeallocation* Arena::CreateMaybeMessage< ::tensorflow::MemoryLogTensorDeallocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryLogTensorDeallocation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryLogTensorOutput* Arena::CreateMaybeMessage< ::tensorflow::MemoryLogTensorOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryLogTensorOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryLogRawAllocation* Arena::CreateMaybeMessage< ::tensorflow::MemoryLogRawAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryLogRawAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryLogRawDeallocation* Arena::CreateMaybeMessage< ::tensorflow::MemoryLogRawDeallocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryLogRawDeallocation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
