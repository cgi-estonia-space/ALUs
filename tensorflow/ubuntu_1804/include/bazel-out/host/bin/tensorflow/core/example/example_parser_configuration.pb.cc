// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/example/example_parser_configuration.proto

#include "tensorflow/core/example/example_parser_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto;
namespace tensorflow {
class VarLenFeatureProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarLenFeatureProto> _instance;
} _VarLenFeatureProto_default_instance_;
class FixedLenFeatureProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedLenFeatureProto> _instance;
} _FixedLenFeatureProto_default_instance_;
class FeatureConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureConfiguration> _instance;
  const ::tensorflow::FixedLenFeatureProto* fixed_len_feature_;
  const ::tensorflow::VarLenFeatureProto* var_len_feature_;
} _FeatureConfiguration_default_instance_;
class ExampleParserConfiguration_FeatureMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExampleParserConfiguration_FeatureMapEntry_DoNotUse> _instance;
} _ExampleParserConfiguration_FeatureMapEntry_DoNotUse_default_instance_;
class ExampleParserConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExampleParserConfiguration> _instance;
} _ExampleParserConfiguration_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_ExampleParserConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ExampleParserConfiguration_default_instance_;
    new (ptr) ::tensorflow::ExampleParserConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ExampleParserConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExampleParserConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExampleParserConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto}, {
      &scc_info_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse();
  }
  ::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto}, {
      &scc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_FeatureConfiguration_default_instance_;
    new (ptr) ::tensorflow::FeatureConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::FeatureConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto}, {
      &scc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,
      &scc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_FixedLenFeatureProto_default_instance_;
    new (ptr) ::tensorflow::FixedLenFeatureProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::FixedLenFeatureProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_VarLenFeatureProto_default_instance_;
    new (ptr) ::tensorflow::VarLenFeatureProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::VarLenFeatureProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::VarLenFeatureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::VarLenFeatureProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VarLenFeatureProto, values_output_tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VarLenFeatureProto, indices_output_tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VarLenFeatureProto, shapes_output_tensor_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FixedLenFeatureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FixedLenFeatureProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::FixedLenFeatureProto, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::FixedLenFeatureProto, default_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::FixedLenFeatureProto, values_output_tensor_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FeatureConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::FeatureConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::FeatureConfigurationDefaultTypeInternal, fixed_len_feature_),
  offsetof(::tensorflow::FeatureConfigurationDefaultTypeInternal, var_len_feature_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::FeatureConfiguration, config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExampleParserConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExampleParserConfiguration, feature_map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::VarLenFeatureProto)},
  { 9, -1, sizeof(::tensorflow::FixedLenFeatureProto)},
  { 18, -1, sizeof(::tensorflow::FeatureConfiguration)},
  { 26, 33, sizeof(::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse)},
  { 35, -1, sizeof(::tensorflow::ExampleParserConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_VarLenFeatureProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_FixedLenFeatureProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_FeatureConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ExampleParserConfiguration_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto[] =
  "\n:tensorflow/core/example/example_parser"
  "_configuration.proto\022\ntensorflow\032&tensor"
  "flow/core/framework/tensor.proto\032,tensor"
  "flow/core/framework/tensor_shape.proto\032%"
  "tensorflow/core/framework/types.proto\"\243\001"
  "\n\022VarLenFeatureProto\022#\n\005dtype\030\001 \001(\0162\024.te"
  "nsorflow.DataType\022!\n\031values_output_tenso"
  "r_name\030\002 \001(\t\022\"\n\032indices_output_tensor_na"
  "me\030\003 \001(\t\022!\n\031shapes_output_tensor_name\030\004 "
  "\001(\t\"\273\001\n\024FixedLenFeatureProto\022#\n\005dtype\030\001 "
  "\001(\0162\024.tensorflow.DataType\022+\n\005shape\030\002 \001(\013"
  "2\034.tensorflow.TensorShapeProto\022.\n\rdefaul"
  "t_value\030\003 \001(\0132\027.tensorflow.TensorProto\022!"
  "\n\031values_output_tensor_name\030\004 \001(\t\"\232\001\n\024Fe"
  "atureConfiguration\022=\n\021fixed_len_feature\030"
  "\001 \001(\0132 .tensorflow.FixedLenFeatureProtoH"
  "\000\0229\n\017var_len_feature\030\002 \001(\0132\036.tensorflow."
  "VarLenFeatureProtoH\000B\010\n\006config\"\276\001\n\032Examp"
  "leParserConfiguration\022K\n\013feature_map\030\001 \003"
  "(\01326.tensorflow.ExampleParserConfigurati"
  "on.FeatureMapEntry\032S\n\017FeatureMapEntry\022\013\n"
  "\003key\030\001 \001(\t\022/\n\005value\030\002 \001(\0132 .tensorflow.F"
  "eatureConfiguration:\0028\001B\242\001\n\026org.tensorfl"
  "ow.exampleB ExampleParserConfigurationPr"
  "otosP\001Zagithub.com/tensorflow/tensorflow"
  "/tensorflow/go/core/example/example_pars"
  "er_configuration_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_sccs[5] = {
  &scc_info_ExampleParserConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,
  &scc_info_ExampleParserConfiguration_FeatureMapEntry_DoNotUse_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,
  &scc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,
  &scc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,
  &scc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto, "tensorflow/core/example/example_parser_configuration.proto", 1076,
  &descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_once, descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto), true);
namespace tensorflow {

// ===================================================================

void VarLenFeatureProto::InitAsDefaultInstance() {
}
class VarLenFeatureProto::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VarLenFeatureProto::kDtypeFieldNumber;
const int VarLenFeatureProto::kValuesOutputTensorNameFieldNumber;
const int VarLenFeatureProto::kIndicesOutputTensorNameFieldNumber;
const int VarLenFeatureProto::kShapesOutputTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VarLenFeatureProto::VarLenFeatureProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.VarLenFeatureProto)
}
VarLenFeatureProto::VarLenFeatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.VarLenFeatureProto)
}
VarLenFeatureProto::VarLenFeatureProto(const VarLenFeatureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.values_output_tensor_name().size() > 0) {
    values_output_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.values_output_tensor_name(),
      GetArenaNoVirtual());
  }
  indices_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.indices_output_tensor_name().size() > 0) {
    indices_output_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indices_output_tensor_name(),
      GetArenaNoVirtual());
  }
  shapes_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.shapes_output_tensor_name().size() > 0) {
    shapes_output_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shapes_output_tensor_name(),
      GetArenaNoVirtual());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.VarLenFeatureProto)
}

void VarLenFeatureProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  values_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shapes_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

VarLenFeatureProto::~VarLenFeatureProto() {
  // @@protoc_insertion_point(destructor:tensorflow.VarLenFeatureProto)
  SharedDtor();
}

void VarLenFeatureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  values_output_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indices_output_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shapes_output_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VarLenFeatureProto::ArenaDtor(void* object) {
  VarLenFeatureProto* _this = reinterpret_cast< VarLenFeatureProto* >(object);
  (void)_this;
}
void VarLenFeatureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarLenFeatureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarLenFeatureProto& VarLenFeatureProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void VarLenFeatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.VarLenFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_output_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  indices_output_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  shapes_output_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VarLenFeatureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // string values_output_tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_values_output_tensor_name(), ptr, ctx, "tensorflow.VarLenFeatureProto.values_output_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string indices_output_tensor_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_indices_output_tensor_name(), ptr, ctx, "tensorflow.VarLenFeatureProto.indices_output_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string shapes_output_tensor_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_shapes_output_tensor_name(), ptr, ctx, "tensorflow.VarLenFeatureProto.shapes_output_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VarLenFeatureProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.VarLenFeatureProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.DataType dtype = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string values_output_tensor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_values_output_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->values_output_tensor_name().data(), static_cast<int>(this->values_output_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VarLenFeatureProto.values_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string indices_output_tensor_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_indices_output_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->indices_output_tensor_name().data(), static_cast<int>(this->indices_output_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VarLenFeatureProto.indices_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shapes_output_tensor_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_shapes_output_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->shapes_output_tensor_name().data(), static_cast<int>(this->shapes_output_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VarLenFeatureProto.shapes_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.VarLenFeatureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.VarLenFeatureProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VarLenFeatureProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.VarLenFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // string values_output_tensor_name = 2;
  if (this->values_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), static_cast<int>(this->values_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.values_output_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->values_output_tensor_name(), output);
  }

  // string indices_output_tensor_name = 3;
  if (this->indices_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->indices_output_tensor_name().data(), static_cast<int>(this->indices_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.indices_output_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->indices_output_tensor_name(), output);
  }

  // string shapes_output_tensor_name = 4;
  if (this->shapes_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shapes_output_tensor_name().data(), static_cast<int>(this->shapes_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.shapes_output_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->shapes_output_tensor_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.VarLenFeatureProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* VarLenFeatureProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.VarLenFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // string values_output_tensor_name = 2;
  if (this->values_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), static_cast<int>(this->values_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.values_output_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->values_output_tensor_name(), target);
  }

  // string indices_output_tensor_name = 3;
  if (this->indices_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->indices_output_tensor_name().data(), static_cast<int>(this->indices_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.indices_output_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->indices_output_tensor_name(), target);
  }

  // string shapes_output_tensor_name = 4;
  if (this->shapes_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->shapes_output_tensor_name().data(), static_cast<int>(this->shapes_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VarLenFeatureProto.shapes_output_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->shapes_output_tensor_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.VarLenFeatureProto)
  return target;
}

size_t VarLenFeatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.VarLenFeatureProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string values_output_tensor_name = 2;
  if (this->values_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->values_output_tensor_name());
  }

  // string indices_output_tensor_name = 3;
  if (this->indices_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->indices_output_tensor_name());
  }

  // string shapes_output_tensor_name = 4;
  if (this->shapes_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->shapes_output_tensor_name());
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarLenFeatureProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.VarLenFeatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  const VarLenFeatureProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarLenFeatureProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.VarLenFeatureProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.VarLenFeatureProto)
    MergeFrom(*source);
  }
}

void VarLenFeatureProto::MergeFrom(const VarLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.VarLenFeatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.values_output_tensor_name().size() > 0) {
    set_values_output_tensor_name(from.values_output_tensor_name());
  }
  if (from.indices_output_tensor_name().size() > 0) {
    set_indices_output_tensor_name(from.indices_output_tensor_name());
  }
  if (from.shapes_output_tensor_name().size() > 0) {
    set_shapes_output_tensor_name(from.shapes_output_tensor_name());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void VarLenFeatureProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.VarLenFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarLenFeatureProto::CopyFrom(const VarLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.VarLenFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarLenFeatureProto::IsInitialized() const {
  return true;
}

void VarLenFeatureProto::Swap(VarLenFeatureProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VarLenFeatureProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void VarLenFeatureProto::UnsafeArenaSwap(VarLenFeatureProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VarLenFeatureProto::InternalSwap(VarLenFeatureProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_output_tensor_name_.Swap(&other->values_output_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  indices_output_tensor_name_.Swap(&other->indices_output_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shapes_output_tensor_name_.Swap(&other->shapes_output_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarLenFeatureProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedLenFeatureProto::InitAsDefaultInstance() {
  ::tensorflow::_FixedLenFeatureProto_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
  ::tensorflow::_FixedLenFeatureProto_default_instance_._instance.get_mutable()->default_value_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class FixedLenFeatureProto::HasBitSetters {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const FixedLenFeatureProto* msg);
  static const ::tensorflow::TensorProto& default_value(const FixedLenFeatureProto* msg);
};

const ::tensorflow::TensorShapeProto&
FixedLenFeatureProto::HasBitSetters::shape(const FixedLenFeatureProto* msg) {
  return *msg->shape_;
}
const ::tensorflow::TensorProto&
FixedLenFeatureProto::HasBitSetters::default_value(const FixedLenFeatureProto* msg) {
  return *msg->default_value_;
}
void FixedLenFeatureProto::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaNoVirtual() == nullptr) {
    delete shape_;
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FixedLenFeatureProto.shape)
}
void FixedLenFeatureProto::clear_shape() {
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
void FixedLenFeatureProto::unsafe_arena_set_allocated_default_value(
    ::tensorflow::TensorProto* default_value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete default_value_;
  }
  default_value_ = default_value;
  if (default_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.FixedLenFeatureProto.default_value)
}
void FixedLenFeatureProto::clear_default_value() {
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedLenFeatureProto::kDtypeFieldNumber;
const int FixedLenFeatureProto::kShapeFieldNumber;
const int FixedLenFeatureProto::kDefaultValueFieldNumber;
const int FixedLenFeatureProto::kValuesOutputTensorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedLenFeatureProto::FixedLenFeatureProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FixedLenFeatureProto)
}
FixedLenFeatureProto::FixedLenFeatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FixedLenFeatureProto)
}
FixedLenFeatureProto::FixedLenFeatureProto(const FixedLenFeatureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.values_output_tensor_name().size() > 0) {
    values_output_tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.values_output_tensor_name(),
      GetArenaNoVirtual());
  }
  if (from.has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from.has_default_value()) {
    default_value_ = new ::tensorflow::TensorProto(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.FixedLenFeatureProto)
}

void FixedLenFeatureProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  values_output_tensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

FixedLenFeatureProto::~FixedLenFeatureProto() {
  // @@protoc_insertion_point(destructor:tensorflow.FixedLenFeatureProto)
  SharedDtor();
}

void FixedLenFeatureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  values_output_tensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete default_value_;
}

void FixedLenFeatureProto::ArenaDtor(void* object) {
  FixedLenFeatureProto* _this = reinterpret_cast< FixedLenFeatureProto* >(object);
  (void)_this;
}
void FixedLenFeatureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedLenFeatureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedLenFeatureProto& FixedLenFeatureProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedLenFeatureProto_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void FixedLenFeatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FixedLenFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_output_tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && default_value_ != nullptr) {
    delete default_value_;
  }
  default_value_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixedLenFeatureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto default_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_default_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string values_output_tensor_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_values_output_tensor_name(), ptr, ctx, "tensorflow.FixedLenFeatureProto.values_output_tensor_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixedLenFeatureProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FixedLenFeatureProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.DataType dtype = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dtype(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorShapeProto shape = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.TensorProto default_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string values_output_tensor_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_values_output_tensor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->values_output_tensor_name().data(), static_cast<int>(this->values_output_tensor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.FixedLenFeatureProto.values_output_tensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FixedLenFeatureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FixedLenFeatureProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixedLenFeatureProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FixedLenFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->dtype(), output);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::shape(this), output);
  }

  // .tensorflow.TensorProto default_value = 3;
  if (this->has_default_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::default_value(this), output);
  }

  // string values_output_tensor_name = 4;
  if (this->values_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), static_cast<int>(this->values_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.FixedLenFeatureProto.values_output_tensor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->values_output_tensor_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.FixedLenFeatureProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedLenFeatureProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FixedLenFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::shape(this), target);
  }

  // .tensorflow.TensorProto default_value = 3;
  if (this->has_default_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::default_value(this), target);
  }

  // string values_output_tensor_name = 4;
  if (this->values_output_tensor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->values_output_tensor_name().data(), static_cast<int>(this->values_output_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.FixedLenFeatureProto.values_output_tensor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->values_output_tensor_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FixedLenFeatureProto)
  return target;
}

size_t FixedLenFeatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FixedLenFeatureProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string values_output_tensor_name = 4;
  if (this->values_output_tensor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->values_output_tensor_name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .tensorflow.TensorProto default_value = 3;
  if (this->has_default_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_value_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedLenFeatureProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FixedLenFeatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedLenFeatureProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedLenFeatureProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FixedLenFeatureProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FixedLenFeatureProto)
    MergeFrom(*source);
  }
}

void FixedLenFeatureProto::MergeFrom(const FixedLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FixedLenFeatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.values_output_tensor_name().size() > 0) {
    set_values_output_tensor_name(from.values_output_tensor_name());
  }
  if (from.has_shape()) {
    mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from.shape());
  }
  if (from.has_default_value()) {
    mutable_default_value()->::tensorflow::TensorProto::MergeFrom(from.default_value());
  }
  if (from.dtype() != 0) {
    set_dtype(from.dtype());
  }
}

void FixedLenFeatureProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FixedLenFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedLenFeatureProto::CopyFrom(const FixedLenFeatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FixedLenFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedLenFeatureProto::IsInitialized() const {
  return true;
}

void FixedLenFeatureProto::Swap(FixedLenFeatureProto* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FixedLenFeatureProto* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void FixedLenFeatureProto::UnsafeArenaSwap(FixedLenFeatureProto* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FixedLenFeatureProto::InternalSwap(FixedLenFeatureProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_output_tensor_name_.Swap(&other->values_output_tensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shape_, other->shape_);
  swap(default_value_, other->default_value_);
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedLenFeatureProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureConfiguration::InitAsDefaultInstance() {
  ::tensorflow::_FeatureConfiguration_default_instance_.fixed_len_feature_ = const_cast< ::tensorflow::FixedLenFeatureProto*>(
      ::tensorflow::FixedLenFeatureProto::internal_default_instance());
  ::tensorflow::_FeatureConfiguration_default_instance_.var_len_feature_ = const_cast< ::tensorflow::VarLenFeatureProto*>(
      ::tensorflow::VarLenFeatureProto::internal_default_instance());
}
class FeatureConfiguration::HasBitSetters {
 public:
  static const ::tensorflow::FixedLenFeatureProto& fixed_len_feature(const FeatureConfiguration* msg);
  static const ::tensorflow::VarLenFeatureProto& var_len_feature(const FeatureConfiguration* msg);
};

const ::tensorflow::FixedLenFeatureProto&
FeatureConfiguration::HasBitSetters::fixed_len_feature(const FeatureConfiguration* msg) {
  return *msg->config_.fixed_len_feature_;
}
const ::tensorflow::VarLenFeatureProto&
FeatureConfiguration::HasBitSetters::var_len_feature(const FeatureConfiguration* msg) {
  return *msg->config_.var_len_feature_;
}
void FeatureConfiguration::set_allocated_fixed_len_feature(::tensorflow::FixedLenFeatureProto* fixed_len_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (fixed_len_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fixed_len_feature);
    if (message_arena != submessage_arena) {
      fixed_len_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_len_feature, submessage_arena);
    }
    set_has_fixed_len_feature();
    config_.fixed_len_feature_ = fixed_len_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FeatureConfiguration.fixed_len_feature)
}
void FeatureConfiguration::set_allocated_var_len_feature(::tensorflow::VarLenFeatureProto* var_len_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (var_len_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var_len_feature);
    if (message_arena != submessage_arena) {
      var_len_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_len_feature, submessage_arena);
    }
    set_has_var_len_feature();
    config_.var_len_feature_ = var_len_feature;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.FeatureConfiguration.var_len_feature)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureConfiguration::kFixedLenFeatureFieldNumber;
const int FeatureConfiguration::kVarLenFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureConfiguration::FeatureConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.FeatureConfiguration)
}
FeatureConfiguration::FeatureConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.FeatureConfiguration)
}
FeatureConfiguration::FeatureConfiguration(const FeatureConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kFixedLenFeature: {
      mutable_fixed_len_feature()->::tensorflow::FixedLenFeatureProto::MergeFrom(from.fixed_len_feature());
      break;
    }
    case kVarLenFeature: {
      mutable_var_len_feature()->::tensorflow::VarLenFeatureProto::MergeFrom(from.var_len_feature());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.FeatureConfiguration)
}

void FeatureConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  clear_has_config();
}

FeatureConfiguration::~FeatureConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.FeatureConfiguration)
  SharedDtor();
}

void FeatureConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_config()) {
    clear_config();
  }
}

void FeatureConfiguration::ArenaDtor(void* object) {
  FeatureConfiguration* _this = reinterpret_cast< FeatureConfiguration* >(object);
  (void)_this;
}
void FeatureConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureConfiguration& FeatureConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void FeatureConfiguration::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.FeatureConfiguration)
  switch (config_case()) {
    case kFixedLenFeature: {
      if (GetArenaNoVirtual() == nullptr) {
        delete config_.fixed_len_feature_;
      }
      break;
    }
    case kVarLenFeature: {
      if (GetArenaNoVirtual() == nullptr) {
        delete config_.var_len_feature_;
      }
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void FeatureConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.FeatureConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_config();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeatureConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_fixed_len_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VarLenFeatureProto var_len_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_var_len_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeatureConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.FeatureConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_len_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VarLenFeatureProto var_len_feature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_var_len_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.FeatureConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.FeatureConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeatureConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.FeatureConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
  if (has_fixed_len_feature()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::fixed_len_feature(this), output);
  }

  // .tensorflow.VarLenFeatureProto var_len_feature = 2;
  if (has_var_len_feature()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::var_len_feature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.FeatureConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.FeatureConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
  if (has_fixed_len_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::fixed_len_feature(this), target);
  }

  // .tensorflow.VarLenFeatureProto var_len_feature = 2;
  if (has_var_len_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::var_len_feature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.FeatureConfiguration)
  return target;
}

size_t FeatureConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.FeatureConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (config_case()) {
    // .tensorflow.FixedLenFeatureProto fixed_len_feature = 1;
    case kFixedLenFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.fixed_len_feature_);
      break;
    }
    // .tensorflow.VarLenFeatureProto var_len_feature = 2;
    case kVarLenFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.var_len_feature_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.FeatureConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.FeatureConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.FeatureConfiguration)
    MergeFrom(*source);
  }
}

void FeatureConfiguration::MergeFrom(const FeatureConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.FeatureConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.config_case()) {
    case kFixedLenFeature: {
      mutable_fixed_len_feature()->::tensorflow::FixedLenFeatureProto::MergeFrom(from.fixed_len_feature());
      break;
    }
    case kVarLenFeature: {
      mutable_var_len_feature()->::tensorflow::VarLenFeatureProto::MergeFrom(from.var_len_feature());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void FeatureConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.FeatureConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureConfiguration::CopyFrom(const FeatureConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.FeatureConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureConfiguration::IsInitialized() const {
  return true;
}

void FeatureConfiguration::Swap(FeatureConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    FeatureConfiguration* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void FeatureConfiguration::UnsafeArenaSwap(FeatureConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void FeatureConfiguration::InternalSwap(FeatureConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ExampleParserConfiguration_FeatureMapEntry_DoNotUse::ExampleParserConfiguration_FeatureMapEntry_DoNotUse() {}
ExampleParserConfiguration_FeatureMapEntry_DoNotUse::ExampleParserConfiguration_FeatureMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MergeFrom(const ExampleParserConfiguration_FeatureMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ExampleParserConfiguration_FeatureMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ExampleParserConfiguration::InitAsDefaultInstance() {
}
class ExampleParserConfiguration::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExampleParserConfiguration::kFeatureMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExampleParserConfiguration::ExampleParserConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ExampleParserConfiguration)
}
ExampleParserConfiguration::ExampleParserConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  feature_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExampleParserConfiguration)
}
ExampleParserConfiguration::ExampleParserConfiguration(const ExampleParserConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_map_.MergeFrom(from.feature_map_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExampleParserConfiguration)
}

void ExampleParserConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExampleParserConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
}

ExampleParserConfiguration::~ExampleParserConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.ExampleParserConfiguration)
  SharedDtor();
}

void ExampleParserConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ExampleParserConfiguration::ArenaDtor(void* object) {
  ExampleParserConfiguration* _this = reinterpret_cast< ExampleParserConfiguration* >(object);
  (void)_this;
}
void ExampleParserConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExampleParserConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExampleParserConfiguration& ExampleParserConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExampleParserConfiguration_tensorflow_2fcore_2fexample_2fexample_5fparser_5fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void ExampleParserConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExampleParserConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_map_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExampleParserConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&feature_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExampleParserConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ExampleParserConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ExampleParserConfiguration_FeatureMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              ExampleParserConfiguration_FeatureMapEntry_DoNotUse,
              std::string, ::tensorflow::FeatureConfiguration,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration > > parser(&feature_map_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.ExampleParserConfiguration.FeatureMapEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ExampleParserConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ExampleParserConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExampleParserConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ExampleParserConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
  if (!this->feature_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ExampleParserConfiguration.FeatureMapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->feature_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it) {
        ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(1, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ExampleParserConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* ExampleParserConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExampleParserConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
  if (!this->feature_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.ExampleParserConfiguration.FeatureMapEntry.key");
      }
    };

    if (false &&
        this->feature_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_iterator
          it = this->feature_map().begin();
          it != this->feature_map().end(); ++it) {
        ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExampleParserConfiguration)
  return target;
}

size_t ExampleParserConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExampleParserConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.FeatureConfiguration> feature_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::FeatureConfiguration >::const_iterator
      it = this->feature_map().begin();
      it != this->feature_map().end(); ++it) {
    ExampleParserConfiguration_FeatureMapEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExampleParserConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ExampleParserConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ExampleParserConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExampleParserConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ExampleParserConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ExampleParserConfiguration)
    MergeFrom(*source);
  }
}

void ExampleParserConfiguration::MergeFrom(const ExampleParserConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExampleParserConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_map_.MergeFrom(from.feature_map_);
}

void ExampleParserConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ExampleParserConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExampleParserConfiguration::CopyFrom(const ExampleParserConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExampleParserConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleParserConfiguration::IsInitialized() const {
  return true;
}

void ExampleParserConfiguration::Swap(ExampleParserConfiguration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExampleParserConfiguration* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ExampleParserConfiguration::UnsafeArenaSwap(ExampleParserConfiguration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExampleParserConfiguration::InternalSwap(ExampleParserConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feature_map_.Swap(&other->feature_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExampleParserConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::VarLenFeatureProto* Arena::CreateMaybeMessage< ::tensorflow::VarLenFeatureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::VarLenFeatureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::FixedLenFeatureProto* Arena::CreateMaybeMessage< ::tensorflow::FixedLenFeatureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::FixedLenFeatureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::FeatureConfiguration* Arena::CreateMaybeMessage< ::tensorflow::FeatureConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::FeatureConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ExampleParserConfiguration_FeatureMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ExampleParserConfiguration* Arena::CreateMaybeMessage< ::tensorflow::ExampleParserConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ExampleParserConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
