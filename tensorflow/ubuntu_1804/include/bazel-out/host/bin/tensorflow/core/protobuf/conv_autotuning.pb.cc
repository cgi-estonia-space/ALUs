// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/conv_autotuning.proto

#include "tensorflow/core/protobuf/conv_autotuning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fstream_5fexecutor_2fdnn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fstream_5fexecutor_2fdnn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto;
namespace tensorflow {
class ConvolutionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvolutionProto> _instance;
} _ConvolutionProto_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_ConvolutionProto_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ConvolutionProto_default_instance_;
    new (ptr) ::tensorflow::ConvolutionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ConvolutionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConvolutionProto_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ConvolutionProto_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto}, {
      &scc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base,
      &scc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, kind_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, input_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, filter_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, output_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, conv_desc_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, conv_scale_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, side_value_scale_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, activation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, input_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, filter_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, output_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, bias_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, side_input_address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::ConvolutionProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ConvolutionProto_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto[] =
  "\n.tensorflow/core/protobuf/conv_autotuni"
  "ng.proto\022\ntensorflow\032$tensorflow/stream_"
  "executor/dnn.proto\"\235\004\n\020ConvolutionProto\022"
  "2\n\004kind\030\001 \001(\0162$.stream_executor.dnn.Conv"
  "olutionKind\0229\n\005input\030\002 \001(\0132*.stream_exec"
  "utor.dnn.TensorDescriptorProto\022:\n\006filter"
  "\030\003 \001(\0132*.stream_executor.dnn.TensorDescr"
  "iptorProto\022:\n\006output\030\004 \001(\0132*.stream_exec"
  "utor.dnn.TensorDescriptorProto\022B\n\tconv_d"
  "esc\030\005 \001(\0132/.stream_executor.dnn.Convolut"
  "ionDescriptorProto\022\022\n\nconv_scale\030\006 \001(\001\022\030"
  "\n\020side_value_scale\030\007 \001(\001\0227\n\nactivation\030\010"
  " \001(\0162#.stream_executor.dnn.ActivationMod"
  "e\022\025\n\rinput_address\030\t \001(\003\022\026\n\016filter_addre"
  "ss\030\n \001(\003\022\026\n\016output_address\030\013 \001(\003\022\024\n\014bias"
  "_address\030\014 \001(\003\022\032\n\022side_input_address\030\r \001"
  "(\003BJZHgithub.com/tensorflow/tensorflow/t"
  "ensorflow/go/core/core_protos_go_protob\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_sccs[1] = {
  &scc_info_ConvolutionProto_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto, "tensorflow/core/protobuf/conv_autotuning.proto", 726,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto, 1, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto), true);
namespace tensorflow {

// ===================================================================

void ConvolutionProto::InitAsDefaultInstance() {
  ::tensorflow::_ConvolutionProto_default_instance_._instance.get_mutable()->input_ = const_cast< ::stream_executor::dnn::TensorDescriptorProto*>(
      ::stream_executor::dnn::TensorDescriptorProto::internal_default_instance());
  ::tensorflow::_ConvolutionProto_default_instance_._instance.get_mutable()->filter_ = const_cast< ::stream_executor::dnn::TensorDescriptorProto*>(
      ::stream_executor::dnn::TensorDescriptorProto::internal_default_instance());
  ::tensorflow::_ConvolutionProto_default_instance_._instance.get_mutable()->output_ = const_cast< ::stream_executor::dnn::TensorDescriptorProto*>(
      ::stream_executor::dnn::TensorDescriptorProto::internal_default_instance());
  ::tensorflow::_ConvolutionProto_default_instance_._instance.get_mutable()->conv_desc_ = const_cast< ::stream_executor::dnn::ConvolutionDescriptorProto*>(
      ::stream_executor::dnn::ConvolutionDescriptorProto::internal_default_instance());
}
class ConvolutionProto::HasBitSetters {
 public:
  static const ::stream_executor::dnn::TensorDescriptorProto& input(const ConvolutionProto* msg);
  static const ::stream_executor::dnn::TensorDescriptorProto& filter(const ConvolutionProto* msg);
  static const ::stream_executor::dnn::TensorDescriptorProto& output(const ConvolutionProto* msg);
  static const ::stream_executor::dnn::ConvolutionDescriptorProto& conv_desc(const ConvolutionProto* msg);
};

const ::stream_executor::dnn::TensorDescriptorProto&
ConvolutionProto::HasBitSetters::input(const ConvolutionProto* msg) {
  return *msg->input_;
}
const ::stream_executor::dnn::TensorDescriptorProto&
ConvolutionProto::HasBitSetters::filter(const ConvolutionProto* msg) {
  return *msg->filter_;
}
const ::stream_executor::dnn::TensorDescriptorProto&
ConvolutionProto::HasBitSetters::output(const ConvolutionProto* msg) {
  return *msg->output_;
}
const ::stream_executor::dnn::ConvolutionDescriptorProto&
ConvolutionProto::HasBitSetters::conv_desc(const ConvolutionProto* msg) {
  return *msg->conv_desc_;
}
void ConvolutionProto::clear_input() {
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
}
void ConvolutionProto::clear_filter() {
  if (GetArenaNoVirtual() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
void ConvolutionProto::clear_output() {
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
}
void ConvolutionProto::clear_conv_desc() {
  if (GetArenaNoVirtual() == nullptr && conv_desc_ != nullptr) {
    delete conv_desc_;
  }
  conv_desc_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionProto::kKindFieldNumber;
const int ConvolutionProto::kInputFieldNumber;
const int ConvolutionProto::kFilterFieldNumber;
const int ConvolutionProto::kOutputFieldNumber;
const int ConvolutionProto::kConvDescFieldNumber;
const int ConvolutionProto::kConvScaleFieldNumber;
const int ConvolutionProto::kSideValueScaleFieldNumber;
const int ConvolutionProto::kActivationFieldNumber;
const int ConvolutionProto::kInputAddressFieldNumber;
const int ConvolutionProto::kFilterAddressFieldNumber;
const int ConvolutionProto::kOutputAddressFieldNumber;
const int ConvolutionProto::kBiasAddressFieldNumber;
const int ConvolutionProto::kSideInputAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionProto::ConvolutionProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.ConvolutionProto)
}
ConvolutionProto::ConvolutionProto(const ConvolutionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input()) {
    input_ = new ::stream_executor::dnn::TensorDescriptorProto(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from.has_filter()) {
    filter_ = new ::stream_executor::dnn::TensorDescriptorProto(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from.has_output()) {
    output_ = new ::stream_executor::dnn::TensorDescriptorProto(*from.output_);
  } else {
    output_ = nullptr;
  }
  if (from.has_conv_desc()) {
    conv_desc_ = new ::stream_executor::dnn::ConvolutionDescriptorProto(*from.conv_desc_);
  } else {
    conv_desc_ = nullptr;
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_input_address_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(side_input_address_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ConvolutionProto)
}

void ConvolutionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvolutionProto_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_input_address_) -
      reinterpret_cast<char*>(&input_)) + sizeof(side_input_address_));
}

ConvolutionProto::~ConvolutionProto() {
  // @@protoc_insertion_point(destructor:tensorflow.ConvolutionProto)
  SharedDtor();
}

void ConvolutionProto::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete output_;
  if (this != internal_default_instance()) delete conv_desc_;
}

void ConvolutionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvolutionProto& ConvolutionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvolutionProto_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto.base);
  return *internal_default_instance();
}


void ConvolutionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ConvolutionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_ != nullptr) {
    delete output_;
  }
  output_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && conv_desc_ != nullptr) {
    delete conv_desc_;
  }
  conv_desc_ = nullptr;
  ::memset(&kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_input_address_) -
      reinterpret_cast<char*>(&kind_)) + sizeof(side_input_address_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConvolutionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .stream_executor.dnn.ConvolutionKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_kind(static_cast<::stream_executor::dnn::ConvolutionKind>(val));
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.TensorDescriptorProto input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.TensorDescriptorProto filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.TensorDescriptorProto output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_conv_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double conv_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          conv_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double side_value_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          side_value_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.ActivationMode activation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_activation(static_cast<::stream_executor::dnn::ActivationMode>(val));
        } else goto handle_unusual;
        continue;
      // int64 input_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          input_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 filter_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          filter_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 output_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          output_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bias_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          bias_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 side_input_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          side_input_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConvolutionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.ConvolutionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .stream_executor.dnn.ConvolutionKind kind = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::stream_executor::dnn::ConvolutionKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.TensorDescriptorProto input = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.TensorDescriptorProto filter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.TensorDescriptorProto output = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conv_desc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double conv_scale = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &conv_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double side_value_scale = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &side_value_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.ActivationMode activation = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_activation(static_cast< ::stream_executor::dnn::ActivationMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 input_address = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 filter_address = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 output_address = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bias_address = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bias_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 side_input_address = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &side_input_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.ConvolutionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.ConvolutionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConvolutionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.ConvolutionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->kind() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->has_input()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::input(this), output);
  }

  // .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->has_filter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::filter(this), output);
  }

  // .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->has_output()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::output(this), output);
  }

  // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->has_conv_desc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::conv_desc(this), output);
  }

  // double conv_scale = 6;
  if (!(this->conv_scale() <= 0 && this->conv_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->conv_scale(), output);
  }

  // double side_value_scale = 7;
  if (!(this->side_value_scale() <= 0 && this->side_value_scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->side_value_scale(), output);
  }

  // .stream_executor.dnn.ActivationMode activation = 8;
  if (this->activation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->activation(), output);
  }

  // int64 input_address = 9;
  if (this->input_address() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->input_address(), output);
  }

  // int64 filter_address = 10;
  if (this->filter_address() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->filter_address(), output);
  }

  // int64 output_address = 11;
  if (this->output_address() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->output_address(), output);
  }

  // int64 bias_address = 12;
  if (this->bias_address() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->bias_address(), output);
  }

  // int64 side_input_address = 13;
  if (this->side_input_address() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(13, this->side_input_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.ConvolutionProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvolutionProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ConvolutionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->kind() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::input(this), target);
  }

  // .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::filter(this), target);
  }

  // .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->has_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::output(this), target);
  }

  // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->has_conv_desc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::conv_desc(this), target);
  }

  // double conv_scale = 6;
  if (!(this->conv_scale() <= 0 && this->conv_scale() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->conv_scale(), target);
  }

  // double side_value_scale = 7;
  if (!(this->side_value_scale() <= 0 && this->side_value_scale() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->side_value_scale(), target);
  }

  // .stream_executor.dnn.ActivationMode activation = 8;
  if (this->activation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->activation(), target);
  }

  // int64 input_address = 9;
  if (this->input_address() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->input_address(), target);
  }

  // int64 filter_address = 10;
  if (this->filter_address() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->filter_address(), target);
  }

  // int64 output_address = 11;
  if (this->output_address() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->output_address(), target);
  }

  // int64 bias_address = 12;
  if (this->bias_address() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->bias_address(), target);
  }

  // int64 side_input_address = 13;
  if (this->side_input_address() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->side_input_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ConvolutionProto)
  return target;
}

size_t ConvolutionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ConvolutionProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->has_conv_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conv_desc_);
  }

  // .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->kind());
  }

  // .stream_executor.dnn.ActivationMode activation = 8;
  if (this->activation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->activation());
  }

  // double conv_scale = 6;
  if (!(this->conv_scale() <= 0 && this->conv_scale() >= 0)) {
    total_size += 1 + 8;
  }

  // double side_value_scale = 7;
  if (!(this->side_value_scale() <= 0 && this->side_value_scale() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 input_address = 9;
  if (this->input_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->input_address());
  }

  // int64 filter_address = 10;
  if (this->filter_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->filter_address());
  }

  // int64 output_address = 11;
  if (this->output_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->output_address());
  }

  // int64 bias_address = 12;
  if (this->bias_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bias_address());
  }

  // int64 side_input_address = 13;
  if (this->side_input_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->side_input_address());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvolutionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ConvolutionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvolutionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ConvolutionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ConvolutionProto)
    MergeFrom(*source);
  }
}

void ConvolutionProto::MergeFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ConvolutionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    mutable_input()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(from.input());
  }
  if (from.has_filter()) {
    mutable_filter()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(from.filter());
  }
  if (from.has_output()) {
    mutable_output()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(from.output());
  }
  if (from.has_conv_desc()) {
    mutable_conv_desc()->::stream_executor::dnn::ConvolutionDescriptorProto::MergeFrom(from.conv_desc());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.activation() != 0) {
    set_activation(from.activation());
  }
  if (!(from.conv_scale() <= 0 && from.conv_scale() >= 0)) {
    set_conv_scale(from.conv_scale());
  }
  if (!(from.side_value_scale() <= 0 && from.side_value_scale() >= 0)) {
    set_side_value_scale(from.side_value_scale());
  }
  if (from.input_address() != 0) {
    set_input_address(from.input_address());
  }
  if (from.filter_address() != 0) {
    set_filter_address(from.filter_address());
  }
  if (from.output_address() != 0) {
    set_output_address(from.output_address());
  }
  if (from.bias_address() != 0) {
    set_bias_address(from.bias_address());
  }
  if (from.side_input_address() != 0) {
    set_side_input_address(from.side_input_address());
  }
}

void ConvolutionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionProto::CopyFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionProto::IsInitialized() const {
  return true;
}

void ConvolutionProto::Swap(ConvolutionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionProto::InternalSwap(ConvolutionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(filter_, other->filter_);
  swap(output_, other->output_);
  swap(conv_desc_, other->conv_desc_);
  swap(kind_, other->kind_);
  swap(activation_, other->activation_);
  swap(conv_scale_, other->conv_scale_);
  swap(side_value_scale_, other->side_value_scale_);
  swap(input_address_, other->input_address_);
  swap(filter_address_, other->filter_address_);
  swap(output_address_, other->output_address_);
  swap(bias_address_, other->bias_address_);
  swap(side_input_address_, other->side_input_address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ConvolutionProto* Arena::CreateMaybeMessage< ::tensorflow::ConvolutionProto >(Arena* arena) {
  return Arena::CreateInternal< ::tensorflow::ConvolutionProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
