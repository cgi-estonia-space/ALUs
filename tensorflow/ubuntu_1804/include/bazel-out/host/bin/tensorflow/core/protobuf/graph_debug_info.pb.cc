// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/graph_debug_info.proto

#include "tensorflow/core/protobuf/graph_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphDebugInfo_TracesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto;
namespace tensorflow {
class GraphDebugInfo_FileLineColDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDebugInfo_FileLineCol> _instance;
} _GraphDebugInfo_FileLineCol_default_instance_;
class GraphDebugInfo_StackTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDebugInfo_StackTrace> _instance;
} _GraphDebugInfo_StackTrace_default_instance_;
class GraphDebugInfo_TracesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDebugInfo_TracesEntry_DoNotUse> _instance;
} _GraphDebugInfo_TracesEntry_DoNotUse_default_instance_;
class GraphDebugInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDebugInfo> _instance;
} _GraphDebugInfo_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_GraphDebugInfo_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphDebugInfo_default_instance_;
    new (ptr) ::tensorflow::GraphDebugInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphDebugInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphDebugInfo_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GraphDebugInfo_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto}, {
      &scc_info_GraphDebugInfo_TracesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphDebugInfo_FileLineCol_default_instance_;
    new (ptr) ::tensorflow::GraphDebugInfo_FileLineCol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphDebugInfo_FileLineCol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphDebugInfo_StackTrace_default_instance_;
    new (ptr) ::tensorflow::GraphDebugInfo_StackTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::GraphDebugInfo_StackTrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto}, {
      &scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_GraphDebugInfo_TracesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_GraphDebugInfo_TracesEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse();
  }
  ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphDebugInfo_TracesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GraphDebugInfo_TracesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto}, {
      &scc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, file_index_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, line_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, col_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, func_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_StackTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_StackTrace, file_line_cols_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, files_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, traces_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::GraphDebugInfo_FileLineCol)},
  { 10, -1, sizeof(::tensorflow::GraphDebugInfo_StackTrace)},
  { 16, 23, sizeof(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse)},
  { 25, -1, sizeof(::tensorflow::GraphDebugInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphDebugInfo_FileLineCol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphDebugInfo_StackTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphDebugInfo_TracesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_GraphDebugInfo_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto[] =
  "\n/tensorflow/core/protobuf/graph_debug_i"
  "nfo.proto\022\ntensorflow\"\325\002\n\016GraphDebugInfo"
  "\022\r\n\005files\030\001 \003(\t\0226\n\006traces\030\002 \003(\0132&.tensor"
  "flow.GraphDebugInfo.TracesEntry\032X\n\013FileL"
  "ineCol\022\022\n\nfile_index\030\001 \001(\005\022\014\n\004line\030\002 \001(\005"
  "\022\013\n\003col\030\003 \001(\005\022\014\n\004func\030\004 \001(\t\022\014\n\004code\030\005 \001("
  "\t\032L\n\nStackTrace\022>\n\016file_line_cols\030\001 \003(\0132"
  "&.tensorflow.GraphDebugInfo.FileLineCol\032"
  "T\n\013TracesEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001"
  "(\0132%.tensorflow.GraphDebugInfo.StackTrac"
  "e:\0028\001B\177\n\030org.tensorflow.frameworkB\024Graph"
  "DebugInfoProtosP\001ZHgithub.com/tensorflow"
  "/tensorflow/tensorflow/go/core/core_prot"
  "os_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_sccs[4] = {
  &scc_info_GraphDebugInfo_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,
  &scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,
  &scc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,
  &scc_info_GraphDebugInfo_TracesEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto, "tensorflow/core/protobuf/graph_debug_info.proto", 542,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto, 4, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto), true);
namespace tensorflow {

// ===================================================================

void GraphDebugInfo_FileLineCol::InitAsDefaultInstance() {
}
class GraphDebugInfo_FileLineCol::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDebugInfo_FileLineCol::kFileIndexFieldNumber;
const int GraphDebugInfo_FileLineCol::kLineFieldNumber;
const int GraphDebugInfo_FileLineCol::kColFieldNumber;
const int GraphDebugInfo_FileLineCol::kFuncFieldNumber;
const int GraphDebugInfo_FileLineCol::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphDebugInfo.FileLineCol)
}
GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo.FileLineCol)
}
GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(const GraphDebugInfo_FileLineCol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.func().size() > 0) {
    func_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func(),
      GetArenaNoVirtual());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code(),
      GetArenaNoVirtual());
  }
  ::memcpy(&file_index_, &from.file_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&file_index_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo.FileLineCol)
}

void GraphDebugInfo_FileLineCol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base);
  func_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&file_index_)) + sizeof(col_));
}

GraphDebugInfo_FileLineCol::~GraphDebugInfo_FileLineCol() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo.FileLineCol)
  SharedDtor();
}

void GraphDebugInfo_FileLineCol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  func_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphDebugInfo_FileLineCol::ArenaDtor(void* object) {
  GraphDebugInfo_FileLineCol* _this = reinterpret_cast< GraphDebugInfo_FileLineCol* >(object);
  (void)_this;
}
void GraphDebugInfo_FileLineCol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphDebugInfo_FileLineCol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphDebugInfo_FileLineCol& GraphDebugInfo_FileLineCol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphDebugInfo_FileLineCol_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphDebugInfo_FileLineCol::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo.FileLineCol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&file_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&file_index_)) + sizeof(col_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphDebugInfo_FileLineCol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 file_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          file_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string func = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_func(), ptr, ctx, "tensorflow.GraphDebugInfo.FileLineCol.func");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "tensorflow.GraphDebugInfo.FileLineCol.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphDebugInfo_FileLineCol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphDebugInfo.FileLineCol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 file_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string func = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->func().data(), static_cast<int>(this->func().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.FileLineCol.func"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.FileLineCol.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphDebugInfo.FileLineCol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphDebugInfo.FileLineCol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphDebugInfo_FileLineCol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphDebugInfo.FileLineCol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 file_index = 1;
  if (this->file_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->file_index(), output);
  }

  // int32 line = 2;
  if (this->line() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->line(), output);
  }

  // int32 col = 3;
  if (this->col() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->col(), output);
  }

  // string func = 4;
  if (this->func().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.func");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->func(), output);
  }

  // string code = 5;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphDebugInfo.FileLineCol)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphDebugInfo_FileLineCol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo.FileLineCol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 file_index = 1;
  if (this->file_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->file_index(), target);
  }

  // int32 line = 2;
  if (this->line() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->line(), target);
  }

  // int32 col = 3;
  if (this->col() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->col(), target);
  }

  // string func = 4;
  if (this->func().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->func().data(), static_cast<int>(this->func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.func");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->func(), target);
  }

  // string code = 5;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo.FileLineCol)
  return target;
}

size_t GraphDebugInfo_FileLineCol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo.FileLineCol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string func = 4;
  if (this->func().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->func());
  }

  // string code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // int32 file_index = 1;
  if (this->file_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_index());
  }

  // int32 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->line());
  }

  // int32 col = 3;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->col());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphDebugInfo_FileLineCol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphDebugInfo_FileLineCol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphDebugInfo_FileLineCol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphDebugInfo.FileLineCol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphDebugInfo.FileLineCol)
    MergeFrom(*source);
  }
}

void GraphDebugInfo_FileLineCol::MergeFrom(const GraphDebugInfo_FileLineCol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func().size() > 0) {
    set_func(from.func());
  }
  if (from.code().size() > 0) {
    set_code(from.code());
  }
  if (from.file_index() != 0) {
    set_file_index(from.file_index());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
}

void GraphDebugInfo_FileLineCol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDebugInfo_FileLineCol::CopyFrom(const GraphDebugInfo_FileLineCol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo_FileLineCol::IsInitialized() const {
  return true;
}

void GraphDebugInfo_FileLineCol::Swap(GraphDebugInfo_FileLineCol* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphDebugInfo_FileLineCol* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphDebugInfo_FileLineCol::UnsafeArenaSwap(GraphDebugInfo_FileLineCol* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphDebugInfo_FileLineCol::InternalSwap(GraphDebugInfo_FileLineCol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  func_.Swap(&other->func_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_index_, other->file_index_);
  swap(line_, other->line_);
  swap(col_, other->col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_FileLineCol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphDebugInfo_StackTrace::InitAsDefaultInstance() {
}
class GraphDebugInfo_StackTrace::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDebugInfo_StackTrace::kFileLineColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphDebugInfo.StackTrace)
}
GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  file_line_cols_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo.StackTrace)
}
GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(const GraphDebugInfo_StackTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      file_line_cols_(from.file_line_cols_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo.StackTrace)
}

void GraphDebugInfo_StackTrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base);
}

GraphDebugInfo_StackTrace::~GraphDebugInfo_StackTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo.StackTrace)
  SharedDtor();
}

void GraphDebugInfo_StackTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GraphDebugInfo_StackTrace::ArenaDtor(void* object) {
  GraphDebugInfo_StackTrace* _this = reinterpret_cast< GraphDebugInfo_StackTrace* >(object);
  (void)_this;
}
void GraphDebugInfo_StackTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphDebugInfo_StackTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphDebugInfo_StackTrace& GraphDebugInfo_StackTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphDebugInfo_StackTrace_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphDebugInfo_StackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo.StackTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_line_cols_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphDebugInfo_StackTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_file_line_cols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphDebugInfo_StackTrace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphDebugInfo.StackTrace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_file_line_cols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphDebugInfo.StackTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphDebugInfo.StackTrace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphDebugInfo_StackTrace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphDebugInfo.StackTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_line_cols_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->file_line_cols(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphDebugInfo.StackTrace)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphDebugInfo_StackTrace::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo.StackTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_line_cols_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->file_line_cols(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo.StackTrace)
  return target;
}

size_t GraphDebugInfo_StackTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo.StackTrace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->file_line_cols_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->file_line_cols(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphDebugInfo_StackTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphDebugInfo.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphDebugInfo_StackTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphDebugInfo_StackTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphDebugInfo.StackTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphDebugInfo.StackTrace)
    MergeFrom(*source);
  }
}

void GraphDebugInfo_StackTrace::MergeFrom(const GraphDebugInfo_StackTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_line_cols_.MergeFrom(from.file_line_cols_);
}

void GraphDebugInfo_StackTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDebugInfo_StackTrace::CopyFrom(const GraphDebugInfo_StackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo_StackTrace::IsInitialized() const {
  return true;
}

void GraphDebugInfo_StackTrace::Swap(GraphDebugInfo_StackTrace* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphDebugInfo_StackTrace* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphDebugInfo_StackTrace::UnsafeArenaSwap(GraphDebugInfo_StackTrace* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphDebugInfo_StackTrace::InternalSwap(GraphDebugInfo_StackTrace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&file_line_cols_)->InternalSwap(CastToBase(&other->file_line_cols_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_StackTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GraphDebugInfo_TracesEntry_DoNotUse::GraphDebugInfo_TracesEntry_DoNotUse() {}
GraphDebugInfo_TracesEntry_DoNotUse::GraphDebugInfo_TracesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphDebugInfo_TracesEntry_DoNotUse::MergeFrom(const GraphDebugInfo_TracesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_TracesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GraphDebugInfo_TracesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GraphDebugInfo::InitAsDefaultInstance() {
}
class GraphDebugInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDebugInfo::kFilesFieldNumber;
const int GraphDebugInfo::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDebugInfo::GraphDebugInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.GraphDebugInfo)
}
GraphDebugInfo::GraphDebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  files_(arena),
  traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo)
}
GraphDebugInfo::GraphDebugInfo(const GraphDebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traces_.MergeFrom(from.traces_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo)
}

void GraphDebugInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphDebugInfo_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base);
}

GraphDebugInfo::~GraphDebugInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo)
  SharedDtor();
}

void GraphDebugInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void GraphDebugInfo::ArenaDtor(void* object) {
  GraphDebugInfo* _this = reinterpret_cast< GraphDebugInfo* >(object);
  (void)_this;
}
void GraphDebugInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphDebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphDebugInfo& GraphDebugInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphDebugInfo_tensorflow_2fcore_2fprotobuf_2fgraph_5fdebug_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GraphDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  traces_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GraphDebugInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_files(), ptr, ctx, "tensorflow.GraphDebugInfo.files");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&traces_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GraphDebugInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.GraphDebugInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string files = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->files(this->files_size() - 1).data(),
            static_cast<int>(this->files(this->files_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.files"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          GraphDebugInfo_TracesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GraphDebugInfo_TracesEntry_DoNotUse,
              std::string, ::tensorflow::GraphDebugInfo_StackTrace,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace > > parser(&traces_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.GraphDebugInfo.TracesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.GraphDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.GraphDebugInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GraphDebugInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.GraphDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string files = 1;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.files");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->files(i), output);
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  if (!this->traces().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.GraphDebugInfo.TracesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->traces().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->traces().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GraphDebugInfo_TracesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it) {
        GraphDebugInfo_TracesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(2, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.GraphDebugInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphDebugInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string files = 1;
  for (int i = 0, n = this->files_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->files(i).data(), static_cast<int>(this->files(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphDebugInfo.files");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->files(i), target);
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  if (!this->traces().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.GraphDebugInfo.TracesEntry.key");
      }
    };

    if (false &&
        this->traces().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->traces().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GraphDebugInfo_TracesEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
          it = this->traces().begin();
          it != this->traces().end(); ++it) {
        GraphDebugInfo_TracesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo)
  return target;
}

size_t GraphDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->files_size());
  for (int i = 0, n = this->files_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->traces_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
      it = this->traces().begin();
      it != this->traces().end(); ++it) {
    GraphDebugInfo_TracesEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphDebugInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.GraphDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphDebugInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphDebugInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.GraphDebugInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.GraphDebugInfo)
    MergeFrom(*source);
  }
}

void GraphDebugInfo::MergeFrom(const GraphDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  traces_.MergeFrom(from.traces_);
}

void GraphDebugInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.GraphDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDebugInfo::CopyFrom(const GraphDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo::IsInitialized() const {
  return true;
}

void GraphDebugInfo::Swap(GraphDebugInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GraphDebugInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GraphDebugInfo::UnsafeArenaSwap(GraphDebugInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GraphDebugInfo::InternalSwap(GraphDebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  files_.InternalSwap(CastToBase(&other->files_));
  traces_.Swap(&other->traces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_FileLineCol* Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_FileLineCol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_FileLineCol >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_StackTrace* Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_StackTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_StackTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo* Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
