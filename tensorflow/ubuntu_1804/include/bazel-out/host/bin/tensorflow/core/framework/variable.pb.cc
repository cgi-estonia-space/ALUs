// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/variable.proto

#include "tensorflow/core/framework/variable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fvariable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto;
namespace tensorflow {
class VariableDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariableDef> _instance;
} _VariableDef_default_instance_;
class SaveSliceInfoDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveSliceInfoDef> _instance;
} _SaveSliceInfoDef_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_SaveSliceInfoDef_default_instance_;
    new (ptr) ::tensorflow::SaveSliceInfoDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::SaveSliceInfoDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto}, {}};

static void InitDefaultsscc_info_VariableDef_tensorflow_2fcore_2fframework_2fvariable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_VariableDef_default_instance_;
    new (ptr) ::tensorflow::VariableDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::VariableDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariableDef_tensorflow_2fcore_2fframework_2fvariable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VariableDef_tensorflow_2fcore_2fframework_2fvariable_2eproto}, {
      &scc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fvariable_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2fvariable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, variable_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, initial_value_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, initializer_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, snapshot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, save_slice_info_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, is_resource_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, trainable_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, synchronization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, aggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, full_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, full_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, var_offset_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, var_shape_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::VariableDef)},
  { 14, -1, sizeof(::tensorflow::SaveSliceInfoDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_VariableDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_SaveSliceInfoDef_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fvariable_2eproto[] =
  "\n(tensorflow/core/framework/variable.pro"
  "to\022\ntensorflow\"\310\002\n\013VariableDef\022\025\n\rvariab"
  "le_name\030\001 \001(\t\022\032\n\022initial_value_name\030\006 \001("
  "\t\022\030\n\020initializer_name\030\002 \001(\t\022\025\n\rsnapshot_"
  "name\030\003 \001(\t\0229\n\023save_slice_info_def\030\004 \001(\0132"
  "\034.tensorflow.SaveSliceInfoDef\022\023\n\013is_reso"
  "urce\030\005 \001(\010\022\021\n\ttrainable\030\007 \001(\010\022<\n\017synchro"
  "nization\030\010 \001(\0162#.tensorflow.VariableSync"
  "hronization\0224\n\013aggregation\030\t \001(\0162\037.tenso"
  "rflow.VariableAggregation\"`\n\020SaveSliceIn"
  "foDef\022\021\n\tfull_name\030\001 \001(\t\022\022\n\nfull_shape\030\002"
  " \003(\003\022\022\n\nvar_offset\030\003 \003(\003\022\021\n\tvar_shape\030\004 "
  "\003(\003*\254\001\n\027VariableSynchronization\022!\n\035VARIA"
  "BLE_SYNCHRONIZATION_AUTO\020\000\022!\n\035VARIABLE_S"
  "YNCHRONIZATION_NONE\020\001\022%\n!VARIABLE_SYNCHR"
  "ONIZATION_ON_WRITE\020\002\022$\n VARIABLE_SYNCHRO"
  "NIZATION_ON_READ\020\003*\236\001\n\023VariableAggregati"
  "on\022\035\n\031VARIABLE_AGGREGATION_NONE\020\000\022\034\n\030VAR"
  "IABLE_AGGREGATION_SUM\020\001\022\035\n\031VARIABLE_AGGR"
  "EGATION_MEAN\020\002\022+\n\'VARIABLE_AGGREGATION_O"
  "NLY_FIRST_REPLICA\020\003B\200\001\n\030org.tensorflow.f"
  "rameworkB\016VariableProtosP\001ZOgithub.com/t"
  "ensorflow/tensorflow/tensorflow/go/core/"
  "framework/variable_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_sccs[2] = {
  &scc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base,
  &scc_info_VariableDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_once;
static bool descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto = {
  &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_initialized, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fvariable_2eproto, "tensorflow/core/framework/variable.proto", 958,
  &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fvariable_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2fvariable_2eproto, 2, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fframework_2fvariable_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableSynchronization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto[0];
}
bool VariableSynchronization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableAggregation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto[1];
}
bool VariableAggregation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VariableDef::InitAsDefaultInstance() {
  ::tensorflow::_VariableDef_default_instance_._instance.get_mutable()->save_slice_info_def_ = const_cast< ::tensorflow::SaveSliceInfoDef*>(
      ::tensorflow::SaveSliceInfoDef::internal_default_instance());
}
class VariableDef::HasBitSetters {
 public:
  static const ::tensorflow::SaveSliceInfoDef& save_slice_info_def(const VariableDef* msg);
};

const ::tensorflow::SaveSliceInfoDef&
VariableDef::HasBitSetters::save_slice_info_def(const VariableDef* msg) {
  return *msg->save_slice_info_def_;
}
void VariableDef::unsafe_arena_set_allocated_save_slice_info_def(
    ::tensorflow::SaveSliceInfoDef* save_slice_info_def) {
  if (GetArenaNoVirtual() == nullptr) {
    delete save_slice_info_def_;
  }
  save_slice_info_def_ = save_slice_info_def;
  if (save_slice_info_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.VariableDef.save_slice_info_def)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VariableDef::kVariableNameFieldNumber;
const int VariableDef::kInitialValueNameFieldNumber;
const int VariableDef::kInitializerNameFieldNumber;
const int VariableDef::kSnapshotNameFieldNumber;
const int VariableDef::kSaveSliceInfoDefFieldNumber;
const int VariableDef::kIsResourceFieldNumber;
const int VariableDef::kTrainableFieldNumber;
const int VariableDef::kSynchronizationFieldNumber;
const int VariableDef::kAggregationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VariableDef::VariableDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.VariableDef)
}
VariableDef::VariableDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.VariableDef)
}
VariableDef::VariableDef(const VariableDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  variable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.variable_name().size() > 0) {
    variable_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.variable_name(),
      GetArenaNoVirtual());
  }
  initializer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.initializer_name().size() > 0) {
    initializer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.initializer_name(),
      GetArenaNoVirtual());
  }
  snapshot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot_name().size() > 0) {
    snapshot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshot_name(),
      GetArenaNoVirtual());
  }
  initial_value_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.initial_value_name().size() > 0) {
    initial_value_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.initial_value_name(),
      GetArenaNoVirtual());
  }
  if (from.has_save_slice_info_def()) {
    save_slice_info_def_ = new ::tensorflow::SaveSliceInfoDef(*from.save_slice_info_def_);
  } else {
    save_slice_info_def_ = nullptr;
  }
  ::memcpy(&is_resource_, &from.is_resource_,
    static_cast<size_t>(reinterpret_cast<char*>(&aggregation_) -
    reinterpret_cast<char*>(&is_resource_)) + sizeof(aggregation_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.VariableDef)
}

void VariableDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariableDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base);
  variable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initializer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_value_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&save_slice_info_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_) -
      reinterpret_cast<char*>(&save_slice_info_def_)) + sizeof(aggregation_));
}

VariableDef::~VariableDef() {
  // @@protoc_insertion_point(destructor:tensorflow.VariableDef)
  SharedDtor();
}

void VariableDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  variable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initializer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_value_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete save_slice_info_def_;
}

void VariableDef::ArenaDtor(void* object) {
  VariableDef* _this = reinterpret_cast< VariableDef* >(object);
  (void)_this;
}
void VariableDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariableDef& VariableDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariableDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base);
  return *internal_default_instance();
}


void VariableDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.VariableDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variable_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  initializer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  snapshot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  initial_value_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && save_slice_info_def_ != nullptr) {
    delete save_slice_info_def_;
  }
  save_slice_info_def_ = nullptr;
  ::memset(&is_resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_) -
      reinterpret_cast<char*>(&is_resource_)) + sizeof(aggregation_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariableDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string variable_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_variable_name(), ptr, ctx, "tensorflow.VariableDef.variable_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initializer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_initializer_name(), ptr, ctx, "tensorflow.VariableDef.initializer_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshot_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_snapshot_name(), ptr, ctx, "tensorflow.VariableDef.snapshot_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_save_slice_info_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_resource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_value_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_initial_value_name(), ptr, ctx, "tensorflow.VariableDef.initial_value_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trainable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VariableSynchronization synchronization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_synchronization(static_cast<::tensorflow::VariableSynchronization>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.VariableAggregation aggregation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_aggregation(static_cast<::tensorflow::VariableAggregation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariableDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.VariableDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string variable_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_variable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->variable_name().data(), static_cast<int>(this->variable_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VariableDef.variable_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string initializer_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_initializer_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->initializer_name().data(), static_cast<int>(this->initializer_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VariableDef.initializer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot_name().data(), static_cast<int>(this->snapshot_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VariableDef.snapshot_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_save_slice_info_def()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_resource = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_resource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string initial_value_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_initial_value_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->initial_value_name().data(), static_cast<int>(this->initial_value_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.VariableDef.initial_value_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trainable = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trainable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VariableSynchronization synchronization = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_synchronization(static_cast< ::tensorflow::VariableSynchronization >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.VariableAggregation aggregation = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aggregation(static_cast< ::tensorflow::VariableAggregation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.VariableDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.VariableDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariableDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.VariableDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_name = 1;
  if (this->variable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->variable_name().data(), static_cast<int>(this->variable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.variable_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->variable_name(), output);
  }

  // string initializer_name = 2;
  if (this->initializer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->initializer_name().data(), static_cast<int>(this->initializer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.initializer_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->initializer_name(), output);
  }

  // string snapshot_name = 3;
  if (this->snapshot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_name().data(), static_cast<int>(this->snapshot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.snapshot_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snapshot_name(), output);
  }

  // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
  if (this->has_save_slice_info_def()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::save_slice_info_def(this), output);
  }

  // bool is_resource = 5;
  if (this->is_resource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_resource(), output);
  }

  // string initial_value_name = 6;
  if (this->initial_value_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->initial_value_name().data(), static_cast<int>(this->initial_value_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.initial_value_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->initial_value_name(), output);
  }

  // bool trainable = 7;
  if (this->trainable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->trainable(), output);
  }

  // .tensorflow.VariableSynchronization synchronization = 8;
  if (this->synchronization() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->synchronization(), output);
  }

  // .tensorflow.VariableAggregation aggregation = 9;
  if (this->aggregation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->aggregation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.VariableDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.VariableDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_name = 1;
  if (this->variable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->variable_name().data(), static_cast<int>(this->variable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.variable_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->variable_name(), target);
  }

  // string initializer_name = 2;
  if (this->initializer_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->initializer_name().data(), static_cast<int>(this->initializer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.initializer_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->initializer_name(), target);
  }

  // string snapshot_name = 3;
  if (this->snapshot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot_name().data(), static_cast<int>(this->snapshot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.snapshot_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshot_name(), target);
  }

  // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
  if (this->has_save_slice_info_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::save_slice_info_def(this), target);
  }

  // bool is_resource = 5;
  if (this->is_resource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_resource(), target);
  }

  // string initial_value_name = 6;
  if (this->initial_value_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->initial_value_name().data(), static_cast<int>(this->initial_value_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.initial_value_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->initial_value_name(), target);
  }

  // bool trainable = 7;
  if (this->trainable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->trainable(), target);
  }

  // .tensorflow.VariableSynchronization synchronization = 8;
  if (this->synchronization() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->synchronization(), target);
  }

  // .tensorflow.VariableAggregation aggregation = 9;
  if (this->aggregation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->aggregation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.VariableDef)
  return target;
}

size_t VariableDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.VariableDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_name = 1;
  if (this->variable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->variable_name());
  }

  // string initializer_name = 2;
  if (this->initializer_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->initializer_name());
  }

  // string snapshot_name = 3;
  if (this->snapshot_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->snapshot_name());
  }

  // string initial_value_name = 6;
  if (this->initial_value_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->initial_value_name());
  }

  // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
  if (this->has_save_slice_info_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *save_slice_info_def_);
  }

  // bool is_resource = 5;
  if (this->is_resource() != 0) {
    total_size += 1 + 1;
  }

  // bool trainable = 7;
  if (this->trainable() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.VariableSynchronization synchronization = 8;
  if (this->synchronization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->synchronization());
  }

  // .tensorflow.VariableAggregation aggregation = 9;
  if (this->aggregation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->aggregation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.VariableDef)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariableDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.VariableDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.VariableDef)
    MergeFrom(*source);
  }
}

void VariableDef::MergeFrom(const VariableDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.VariableDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.variable_name().size() > 0) {
    set_variable_name(from.variable_name());
  }
  if (from.initializer_name().size() > 0) {
    set_initializer_name(from.initializer_name());
  }
  if (from.snapshot_name().size() > 0) {
    set_snapshot_name(from.snapshot_name());
  }
  if (from.initial_value_name().size() > 0) {
    set_initial_value_name(from.initial_value_name());
  }
  if (from.has_save_slice_info_def()) {
    mutable_save_slice_info_def()->::tensorflow::SaveSliceInfoDef::MergeFrom(from.save_slice_info_def());
  }
  if (from.is_resource() != 0) {
    set_is_resource(from.is_resource());
  }
  if (from.trainable() != 0) {
    set_trainable(from.trainable());
  }
  if (from.synchronization() != 0) {
    set_synchronization(from.synchronization());
  }
  if (from.aggregation() != 0) {
    set_aggregation(from.aggregation());
  }
}

void VariableDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.VariableDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableDef::CopyFrom(const VariableDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.VariableDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableDef::IsInitialized() const {
  return true;
}

void VariableDef::Swap(VariableDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VariableDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void VariableDef::UnsafeArenaSwap(VariableDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VariableDef::InternalSwap(VariableDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  variable_name_.Swap(&other->variable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initializer_name_.Swap(&other->initializer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  snapshot_name_.Swap(&other->snapshot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  initial_value_name_.Swap(&other->initial_value_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(save_slice_info_def_, other->save_slice_info_def_);
  swap(is_resource_, other->is_resource_);
  swap(trainable_, other->trainable_);
  swap(synchronization_, other->synchronization_);
  swap(aggregation_, other->aggregation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveSliceInfoDef::InitAsDefaultInstance() {
}
class SaveSliceInfoDef::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveSliceInfoDef::kFullNameFieldNumber;
const int SaveSliceInfoDef::kFullShapeFieldNumber;
const int SaveSliceInfoDef::kVarOffsetFieldNumber;
const int SaveSliceInfoDef::kVarShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveSliceInfoDef::SaveSliceInfoDef()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.SaveSliceInfoDef)
}
SaveSliceInfoDef::SaveSliceInfoDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  full_shape_(arena),
  var_offset_(arena),
  var_shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SaveSliceInfoDef)
}
SaveSliceInfoDef::SaveSliceInfoDef(const SaveSliceInfoDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      full_shape_(from.full_shape_),
      var_offset_(from.var_offset_),
      var_shape_(from.var_shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.full_name().size() > 0) {
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.full_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SaveSliceInfoDef)
}

void SaveSliceInfoDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base);
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveSliceInfoDef::~SaveSliceInfoDef() {
  // @@protoc_insertion_point(destructor:tensorflow.SaveSliceInfoDef)
  SharedDtor();
}

void SaveSliceInfoDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveSliceInfoDef::ArenaDtor(void* object) {
  SaveSliceInfoDef* _this = reinterpret_cast< SaveSliceInfoDef* >(object);
  (void)_this;
}
void SaveSliceInfoDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveSliceInfoDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveSliceInfoDef& SaveSliceInfoDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveSliceInfoDef_tensorflow_2fcore_2fframework_2fvariable_2eproto.base);
  return *internal_default_instance();
}


void SaveSliceInfoDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SaveSliceInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_shape_.Clear();
  var_offset_.Clear();
  var_shape_.Clear();
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SaveSliceInfoDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string full_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_full_name(), ptr, ctx, "tensorflow.SaveSliceInfoDef.full_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 full_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_full_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_full_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 var_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_var_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_var_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 var_shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_var_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_var_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SaveSliceInfoDef::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.SaveSliceInfoDef)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string full_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->full_name().data(), static_cast<int>(this->full_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "tensorflow.SaveSliceInfoDef.full_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 full_shape = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_full_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_full_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 var_offset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_var_offset())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_var_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 var_shape = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_var_shape())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_var_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.SaveSliceInfoDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.SaveSliceInfoDef)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SaveSliceInfoDef::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.SaveSliceInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_name = 1;
  if (this->full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SaveSliceInfoDef.full_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_name(), output);
  }

  // repeated int64 full_shape = 2;
  if (this->full_shape_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_full_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->full_shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->full_shape(i), output);
  }

  // repeated int64 var_offset = 3;
  if (this->var_offset_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_var_offset_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->var_offset_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->var_offset(i), output);
  }

  // repeated int64 var_shape = 4;
  if (this->var_shape_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_var_shape_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->var_shape_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->var_shape(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.SaveSliceInfoDef)
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveSliceInfoDef::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SaveSliceInfoDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_name = 1;
  if (this->full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->full_name().data(), static_cast<int>(this->full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SaveSliceInfoDef.full_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->full_name(), target);
  }

  // repeated int64 full_shape = 2;
  if (this->full_shape_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _full_shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->full_shape_, target);
  }

  // repeated int64 var_offset = 3;
  if (this->var_offset_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _var_offset_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->var_offset_, target);
  }

  // repeated int64 var_shape = 4;
  if (this->var_shape_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _var_shape_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->var_shape_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SaveSliceInfoDef)
  return target;
}

size_t SaveSliceInfoDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SaveSliceInfoDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 full_shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->full_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _full_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 var_offset = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->var_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 var_shape = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->var_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string full_name = 1;
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->full_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveSliceInfoDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.SaveSliceInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveSliceInfoDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveSliceInfoDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.SaveSliceInfoDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.SaveSliceInfoDef)
    MergeFrom(*source);
  }
}

void SaveSliceInfoDef::MergeFrom(const SaveSliceInfoDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SaveSliceInfoDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  full_shape_.MergeFrom(from.full_shape_);
  var_offset_.MergeFrom(from.var_offset_);
  var_shape_.MergeFrom(from.var_shape_);
  if (from.full_name().size() > 0) {
    set_full_name(from.full_name());
  }
}

void SaveSliceInfoDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.SaveSliceInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveSliceInfoDef::CopyFrom(const SaveSliceInfoDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SaveSliceInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSliceInfoDef::IsInitialized() const {
  return true;
}

void SaveSliceInfoDef::Swap(SaveSliceInfoDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SaveSliceInfoDef* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void SaveSliceInfoDef::UnsafeArenaSwap(SaveSliceInfoDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SaveSliceInfoDef::InternalSwap(SaveSliceInfoDef* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  full_shape_.InternalSwap(&other->full_shape_);
  var_offset_.InternalSwap(&other->var_offset_);
  var_shape_.InternalSwap(&other->var_shape_);
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveSliceInfoDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::VariableDef* Arena::CreateMaybeMessage< ::tensorflow::VariableDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::VariableDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SaveSliceInfoDef* Arena::CreateMaybeMessage< ::tensorflow::SaveSliceInfoDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SaveSliceInfoDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
