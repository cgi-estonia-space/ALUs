// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/stream_executor/dnn.proto

#include "tensorflow/stream_executor/dnn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace stream_executor {
namespace dnn {
class TensorDescriptorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorDescriptorProto> _instance;
  int data_layout_;
  int filter_layout_;
} _TensorDescriptorProto_default_instance_;
class AlgorithmProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgorithmProto> _instance;
} _AlgorithmProto_default_instance_;
class ConvolutionDescriptorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConvolutionDescriptorProto> _instance;
} _ConvolutionDescriptorProto_default_instance_;
}  // namespace dnn
}  // namespace stream_executor
static void InitDefaultsscc_info_AlgorithmProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stream_executor::dnn::_AlgorithmProto_default_instance_;
    new (ptr) ::stream_executor::dnn::AlgorithmProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stream_executor::dnn::AlgorithmProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlgorithmProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlgorithmProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto}, {}};

static void InitDefaultsscc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stream_executor::dnn::_ConvolutionDescriptorProto_default_instance_;
    new (ptr) ::stream_executor::dnn::ConvolutionDescriptorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stream_executor::dnn::ConvolutionDescriptorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto}, {}};

static void InitDefaultsscc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::stream_executor::dnn::_TensorDescriptorProto_default_instance_;
    new (ptr) ::stream_executor::dnn::TensorDescriptorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::stream_executor::dnn::TensorDescriptorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fstream_5fexecutor_2fdnn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, dimensions_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, data_type_),
  offsetof(::stream_executor::dnn::TensorDescriptorProtoDefaultTypeInternal, data_layout_),
  offsetof(::stream_executor::dnn::TensorDescriptorProtoDefaultTypeInternal, filter_layout_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, layout_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, algo_id_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, math_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, paddings_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, strides_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, dilations_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, compute_mode_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, group_count_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, convolution_mode_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::stream_executor::dnn::TensorDescriptorProto)},
  { 10, -1, sizeof(::stream_executor::dnn::AlgorithmProto)},
  { 17, -1, sizeof(::stream_executor::dnn::ConvolutionDescriptorProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream_executor::dnn::_TensorDescriptorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream_executor::dnn::_AlgorithmProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::stream_executor::dnn::_ConvolutionDescriptorProto_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[] =
  "\n$tensorflow/stream_executor/dnn.proto\022\023"
  "stream_executor.dnn\"\341\001\n\025TensorDescriptor"
  "Proto\022\022\n\ndimensions\030\001 \003(\003\0220\n\tdata_type\030\002"
  " \001(\0162\035.stream_executor.dnn.DataType\0226\n\013d"
  "ata_layout\030\003 \001(\0162\037.stream_executor.dnn.D"
  "ataLayoutH\000\022:\n\rfilter_layout\030\004 \001(\0162!.str"
  "eam_executor.dnn.FilterLayoutH\000B\016\n\014layou"
  "t_oneof\"\224\001\n\016AlgorithmProto\022\017\n\007algo_id\030\001 "
  "\001(\003\022\?\n\tmath_type\030\002 \001(\0162,.stream_executor"
  ".dnn.AlgorithmProto.MathType\"0\n\010MathType"
  "\022\020\n\014DEFAULT_MATH\020\000\022\022\n\016TENSOR_OP_MATH\020\001\"\352"
  "\001\n\032ConvolutionDescriptorProto\022\020\n\010padding"
  "s\030\001 \003(\003\022\017\n\007strides\030\002 \003(\003\022\021\n\tdilations\030\003 "
  "\003(\003\0223\n\014compute_mode\030\004 \001(\0162\035.stream_execu"
  "tor.dnn.DataType\022\023\n\013group_count\030\005 \001(\005\022>\n"
  "\020convolution_mode\030\006 \001(\0162$.stream_executo"
  "r.dnn.ConvolutionMode\022\014\n\004name\030\007 \001(\t*E\n\010D"
  "ataType\022\n\n\006kFloat\020\000\022\013\n\007kDouble\020\001\022\t\n\005kHal"
  "f\020\002\022\t\n\005kInt8\020\003\022\n\n\006kInt32\020\004*l\n\nDataLayout"
  "\022\021\n\rkYXDepthBatch\020\000\022\021\n\rkYXBatchDepth\020\001\022\021"
  "\n\rkBatchYXDepth\020\002\022\021\n\rkBatchDepthYX\020\003\022\022\n\016"
  "kBatchDepthYX4\020\004*s\n\014FilterLayout\022\022\n\016kOut"
  "putInputYX\020\000\022\022\n\016kOutputYXInput\020\001\022\023\n\017kOut"
  "putInputYX4\020\002\022\022\n\016kInputYXOutput\020\003\022\022\n\016kYX"
  "InputOutput\020\004*f\n\016ActivationMode\022\t\n\005kNone"
  "\020\000\022\014\n\010kSigmoid\020\001\022\t\n\005kRelu\020\002\022\n\n\006kRelu6\020\003\022"
  "\n\n\006kReluX\020\004\022\t\n\005kTanh\020\005\022\r\n\tkBandPass\020\006*9\n"
  "\017ConvolutionMode\022\025\n\021CROSS_CORRELATION\020\000\022"
  "\017\n\013CONVOLUTION\020\001*p\n\017ConvolutionKind\022\013\n\007I"
  "NVALID\020\000\022\013\n\007FORWARD\020\001\022\023\n\017BACKWARD_FILTER"
  "\020\002\022\021\n\rBACKWARD_DATA\020\003\022\033\n\027FORWARD_BIAS_AC"
  "TIVATION\020\004B@Z>github.com/tensorflow/tens"
  "orflow/tensorflow/go/stream_executorb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_sccs[3] = {
  &scc_info_AlgorithmProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base,
  &scc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base,
  &scc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_once;
static bool descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto = {
  &descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_initialized, descriptor_table_protodef_tensorflow_2fstream_5fexecutor_2fdnn_2eproto, "tensorflow/stream_executor/dnn.proto", 1324,
  &descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_once, descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_sccs, descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fstream_5fexecutor_2fdnn_2eproto::offsets,
  file_level_metadata_tensorflow_2fstream_5fexecutor_2fdnn_2eproto, 3, file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto, file_level_service_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fstream_5fexecutor_2fdnn_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto), true);
namespace stream_executor {
namespace dnn {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmProto_MathType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[0];
}
bool AlgorithmProto_MathType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AlgorithmProto_MathType AlgorithmProto::DEFAULT_MATH;
constexpr AlgorithmProto_MathType AlgorithmProto::TENSOR_OP_MATH;
constexpr AlgorithmProto_MathType AlgorithmProto::MathType_MIN;
constexpr AlgorithmProto_MathType AlgorithmProto::MathType_MAX;
constexpr int AlgorithmProto::MathType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[2];
}
bool DataLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[3];
}
bool FilterLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[4];
}
bool ActivationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[5];
}
bool ConvolutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fstream_5fexecutor_2fdnn_2eproto);
  return file_level_enum_descriptors_tensorflow_2fstream_5fexecutor_2fdnn_2eproto[6];
}
bool ConvolutionKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TensorDescriptorProto::InitAsDefaultInstance() {
  ::stream_executor::dnn::_TensorDescriptorProto_default_instance_.data_layout_ = 0;
  ::stream_executor::dnn::_TensorDescriptorProto_default_instance_.filter_layout_ = 0;
}
class TensorDescriptorProto::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TensorDescriptorProto::kDimensionsFieldNumber;
const int TensorDescriptorProto::kDataTypeFieldNumber;
const int TensorDescriptorProto::kDataLayoutFieldNumber;
const int TensorDescriptorProto::kFilterLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TensorDescriptorProto::TensorDescriptorProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_executor.dnn.TensorDescriptorProto)
}
TensorDescriptorProto::TensorDescriptorProto(const TensorDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dimensions_(from.dimensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_type_ = from.data_type_;
  clear_has_layout_oneof();
  switch (from.layout_oneof_case()) {
    case kDataLayout: {
      set_data_layout(from.data_layout());
      break;
    }
    case kFilterLayout: {
      set_filter_layout(from.filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.TensorDescriptorProto)
}

void TensorDescriptorProto::SharedCtor() {
  data_type_ = 0;
  clear_has_layout_oneof();
}

TensorDescriptorProto::~TensorDescriptorProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.TensorDescriptorProto)
  SharedDtor();
}

void TensorDescriptorProto::SharedDtor() {
  if (has_layout_oneof()) {
    clear_layout_oneof();
  }
}

void TensorDescriptorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorDescriptorProto& TensorDescriptorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base);
  return *internal_default_instance();
}


void TensorDescriptorProto::clear_layout_oneof() {
// @@protoc_insertion_point(one_of_clear_start:stream_executor.dnn.TensorDescriptorProto)
  switch (layout_oneof_case()) {
    case kDataLayout: {
      // No need to clear
      break;
    }
    case kFilterLayout: {
      // No need to clear
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LAYOUT_ONEOF_NOT_SET;
}


void TensorDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.TensorDescriptorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  data_type_ = 0;
  clear_layout_oneof();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TensorDescriptorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_type(static_cast<::stream_executor::dnn::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataLayout data_layout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_layout(static_cast<::stream_executor::dnn::DataLayout>(val));
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.FilterLayout filter_layout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_filter_layout(static_cast<::stream_executor::dnn::FilterLayout>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TensorDescriptorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_executor.dnn.TensorDescriptorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dimensions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dimensions())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_dimensions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.DataType data_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::stream_executor::dnn::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.DataLayout data_layout = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_layout(static_cast< ::stream_executor::dnn::DataLayout >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.FilterLayout filter_layout = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filter_layout(static_cast< ::stream_executor::dnn::FilterLayout >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_executor.dnn.TensorDescriptorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_executor.dnn.TensorDescriptorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TensorDescriptorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_executor.dnn.TensorDescriptorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  if (this->dimensions_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dimensions_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dimensions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->dimensions(i), output);
  }

  // .stream_executor.dnn.DataType data_type = 2;
  if (this->data_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // .stream_executor.dnn.DataLayout data_layout = 3;
  if (has_data_layout()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->data_layout(), output);
  }

  // .stream_executor.dnn.FilterLayout filter_layout = 4;
  if (has_filter_layout()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->filter_layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_executor.dnn.TensorDescriptorProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorDescriptorProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.TensorDescriptorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  if (this->dimensions_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _dimensions_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dimensions_, target);
  }

  // .stream_executor.dnn.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // .stream_executor.dnn.DataLayout data_layout = 3;
  if (has_data_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_layout(), target);
  }

  // .stream_executor.dnn.FilterLayout filter_layout = 4;
  if (has_filter_layout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.TensorDescriptorProto)
  return target;
}

size_t TensorDescriptorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.TensorDescriptorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .stream_executor.dnn.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_type());
  }

  switch (layout_oneof_case()) {
    // .stream_executor.dnn.DataLayout data_layout = 3;
    case kDataLayout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_layout());
      break;
    }
    // .stream_executor.dnn.FilterLayout filter_layout = 4;
    case kFilterLayout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorDescriptorProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stream_executor.dnn.TensorDescriptorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorDescriptorProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorDescriptorProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stream_executor.dnn.TensorDescriptorProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stream_executor.dnn.TensorDescriptorProto)
    MergeFrom(*source);
  }
}

void TensorDescriptorProto::MergeFrom(const TensorDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.TensorDescriptorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  switch (from.layout_oneof_case()) {
    case kDataLayout: {
      set_data_layout(from.data_layout());
      break;
    }
    case kFilterLayout: {
      set_filter_layout(from.filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
}

void TensorDescriptorProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorDescriptorProto::CopyFrom(const TensorDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDescriptorProto::IsInitialized() const {
  return true;
}

void TensorDescriptorProto::Swap(TensorDescriptorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TensorDescriptorProto::InternalSwap(TensorDescriptorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
  swap(data_type_, other->data_type_);
  swap(layout_oneof_, other->layout_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDescriptorProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlgorithmProto::InitAsDefaultInstance() {
}
class AlgorithmProto::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgorithmProto::kAlgoIdFieldNumber;
const int AlgorithmProto::kMathTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgorithmProto::AlgorithmProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_executor.dnn.AlgorithmProto)
}
AlgorithmProto::AlgorithmProto(const AlgorithmProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&algo_id_, &from.algo_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&math_type_) -
    reinterpret_cast<char*>(&algo_id_)) + sizeof(math_type_));
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.AlgorithmProto)
}

void AlgorithmProto::SharedCtor() {
  ::memset(&algo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&math_type_) -
      reinterpret_cast<char*>(&algo_id_)) + sizeof(math_type_));
}

AlgorithmProto::~AlgorithmProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.AlgorithmProto)
  SharedDtor();
}

void AlgorithmProto::SharedDtor() {
}

void AlgorithmProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmProto& AlgorithmProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlgorithmProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base);
  return *internal_default_instance();
}


void AlgorithmProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.AlgorithmProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&algo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&math_type_) -
      reinterpret_cast<char*>(&algo_id_)) + sizeof(math_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlgorithmProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 algo_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          algo_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_math_type(static_cast<::stream_executor::dnn::AlgorithmProto_MathType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlgorithmProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_executor.dnn.AlgorithmProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 algo_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &algo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_math_type(static_cast< ::stream_executor::dnn::AlgorithmProto_MathType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_executor.dnn.AlgorithmProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_executor.dnn.AlgorithmProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlgorithmProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_executor.dnn.AlgorithmProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algo_id = 1;
  if (this->algo_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->algo_id(), output);
  }

  // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->math_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->math_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_executor.dnn.AlgorithmProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.AlgorithmProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algo_id = 1;
  if (this->algo_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->algo_id(), target);
  }

  // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->math_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->math_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.AlgorithmProto)
  return target;
}

size_t AlgorithmProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.AlgorithmProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 algo_id = 1;
  if (this->algo_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->algo_id());
  }

  // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->math_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->math_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stream_executor.dnn.AlgorithmProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stream_executor.dnn.AlgorithmProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stream_executor.dnn.AlgorithmProto)
    MergeFrom(*source);
  }
}

void AlgorithmProto::MergeFrom(const AlgorithmProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.AlgorithmProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algo_id() != 0) {
    set_algo_id(from.algo_id());
  }
  if (from.math_type() != 0) {
    set_math_type(from.math_type());
  }
}

void AlgorithmProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stream_executor.dnn.AlgorithmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmProto::CopyFrom(const AlgorithmProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.AlgorithmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmProto::IsInitialized() const {
  return true;
}

void AlgorithmProto::Swap(AlgorithmProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmProto::InternalSwap(AlgorithmProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(algo_id_, other->algo_id_);
  swap(math_type_, other->math_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConvolutionDescriptorProto::InitAsDefaultInstance() {
}
class ConvolutionDescriptorProto::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionDescriptorProto::kPaddingsFieldNumber;
const int ConvolutionDescriptorProto::kStridesFieldNumber;
const int ConvolutionDescriptorProto::kDilationsFieldNumber;
const int ConvolutionDescriptorProto::kComputeModeFieldNumber;
const int ConvolutionDescriptorProto::kGroupCountFieldNumber;
const int ConvolutionDescriptorProto::kConvolutionModeFieldNumber;
const int ConvolutionDescriptorProto::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionDescriptorProto::ConvolutionDescriptorProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stream_executor.dnn.ConvolutionDescriptorProto)
}
ConvolutionDescriptorProto::ConvolutionDescriptorProto(const ConvolutionDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      paddings_(from.paddings_),
      strides_(from.strides_),
      dilations_(from.dilations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&compute_mode_, &from.compute_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&convolution_mode_) -
    reinterpret_cast<char*>(&compute_mode_)) + sizeof(convolution_mode_));
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.ConvolutionDescriptorProto)
}

void ConvolutionDescriptorProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&compute_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convolution_mode_) -
      reinterpret_cast<char*>(&compute_mode_)) + sizeof(convolution_mode_));
}

ConvolutionDescriptorProto::~ConvolutionDescriptorProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.ConvolutionDescriptorProto)
  SharedDtor();
}

void ConvolutionDescriptorProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConvolutionDescriptorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConvolutionDescriptorProto& ConvolutionDescriptorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConvolutionDescriptorProto_tensorflow_2fstream_5fexecutor_2fdnn_2eproto.base);
  return *internal_default_instance();
}


void ConvolutionDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.ConvolutionDescriptorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paddings_.Clear();
  strides_.Clear();
  dilations_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&compute_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convolution_mode_) -
      reinterpret_cast<char*>(&compute_mode_)) + sizeof(convolution_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConvolutionDescriptorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 paddings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_paddings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_paddings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 strides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_strides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_strides(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 dilations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_dilations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_dilations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataType compute_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_compute_mode(static_cast<::stream_executor::dnn::DataType>(val));
        } else goto handle_unusual;
        continue;
      // int32 group_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          group_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_convolution_mode(static_cast<::stream_executor::dnn::ConvolutionMode>(val));
        } else goto handle_unusual;
        continue;
      // string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "stream_executor.dnn.ConvolutionDescriptorProto.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConvolutionDescriptorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:stream_executor.dnn.ConvolutionDescriptorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 paddings = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_paddings())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_paddings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 strides = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_strides())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dilations = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dilations())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_dilations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.DataType compute_mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compute_mode(static_cast< ::stream_executor::dnn::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_convolution_mode(static_cast< ::stream_executor::dnn::ConvolutionMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "stream_executor.dnn.ConvolutionDescriptorProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stream_executor.dnn.ConvolutionDescriptorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stream_executor.dnn.ConvolutionDescriptorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConvolutionDescriptorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stream_executor.dnn.ConvolutionDescriptorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 paddings = 1;
  if (this->paddings_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_paddings_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->paddings_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->paddings(i), output);
  }

  // repeated int64 strides = 2;
  if (this->strides_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_strides_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->strides_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->strides(i), output);
  }

  // repeated int64 dilations = 3;
  if (this->dilations_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dilations_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dilations_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->dilations(i), output);
  }

  // .stream_executor.dnn.DataType compute_mode = 4;
  if (this->compute_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->compute_mode(), output);
  }

  // int32 group_count = 5;
  if (this->group_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->group_count(), output);
  }

  // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->convolution_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->convolution_mode(), output);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream_executor.dnn.ConvolutionDescriptorProto.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stream_executor.dnn.ConvolutionDescriptorProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConvolutionDescriptorProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.ConvolutionDescriptorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 paddings = 1;
  if (this->paddings_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _paddings_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->paddings_, target);
  }

  // repeated int64 strides = 2;
  if (this->strides_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _strides_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->strides_, target);
  }

  // repeated int64 dilations = 3;
  if (this->dilations_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _dilations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dilations_, target);
  }

  // .stream_executor.dnn.DataType compute_mode = 4;
  if (this->compute_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->compute_mode(), target);
  }

  // int32 group_count = 5;
  if (this->group_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->group_count(), target);
  }

  // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->convolution_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->convolution_mode(), target);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream_executor.dnn.ConvolutionDescriptorProto.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.ConvolutionDescriptorProto)
  return target;
}

size_t ConvolutionDescriptorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.ConvolutionDescriptorProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 paddings = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->paddings_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _paddings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 strides = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _strides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 dilations = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dilations_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dilations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .stream_executor.dnn.DataType compute_mode = 4;
  if (this->compute_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compute_mode());
  }

  // int32 group_count = 5;
  if (this->group_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->group_count());
  }

  // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->convolution_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->convolution_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConvolutionDescriptorProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionDescriptorProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConvolutionDescriptorProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stream_executor.dnn.ConvolutionDescriptorProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stream_executor.dnn.ConvolutionDescriptorProto)
    MergeFrom(*source);
  }
}

void ConvolutionDescriptorProto::MergeFrom(const ConvolutionDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paddings_.MergeFrom(from.paddings_);
  strides_.MergeFrom(from.strides_);
  dilations_.MergeFrom(from.dilations_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.compute_mode() != 0) {
    set_compute_mode(from.compute_mode());
  }
  if (from.group_count() != 0) {
    set_group_count(from.group_count());
  }
  if (from.convolution_mode() != 0) {
    set_convolution_mode(from.convolution_mode());
  }
}

void ConvolutionDescriptorProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionDescriptorProto::CopyFrom(const ConvolutionDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionDescriptorProto::IsInitialized() const {
  return true;
}

void ConvolutionDescriptorProto::Swap(ConvolutionDescriptorProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionDescriptorProto::InternalSwap(ConvolutionDescriptorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paddings_.InternalSwap(&other->paddings_);
  strides_.InternalSwap(&other->strides_);
  dilations_.InternalSwap(&other->dilations_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(compute_mode_, other->compute_mode_);
  swap(group_count_, other->group_count_);
  swap(convolution_mode_, other->convolution_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionDescriptorProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dnn
}  // namespace stream_executor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::TensorDescriptorProto* Arena::CreateMaybeMessage< ::stream_executor::dnn::TensorDescriptorProto >(Arena* arena) {
  return Arena::CreateInternal< ::stream_executor::dnn::TensorDescriptorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::AlgorithmProto* Arena::CreateMaybeMessage< ::stream_executor::dnn::AlgorithmProto >(Arena* arena) {
  return Arena::CreateInternal< ::stream_executor::dnn::AlgorithmProto >(arena);
}
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::ConvolutionDescriptorProto* Arena::CreateMaybeMessage< ::stream_executor::dnn::ConvolutionDescriptorProto >(Arena* arena) {
  return Arena::CreateInternal< ::stream_executor::dnn::ConvolutionDescriptorProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
