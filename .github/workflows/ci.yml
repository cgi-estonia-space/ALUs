# This is a basic workflow to help you get started with Actions

name: CI on AWS GPU instance

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "actions" ]
    max-concurrency: 1
  pull_request:
    branches: [ "development" ]
    max-concurrency: 1
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    max-concurrency: 1

# For 'trigger_instance' - tty=$(readlink /proc/$$/fd/2) - possibly needed in the future, add $tty to tee command.
jobs:
  start-gpu-instance:
    name: Start GPU instance
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SID_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SID_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.ALUS_SID_INSTANCE_REGION }}
    - uses: actions/checkout@v3
    - name: Trigger the instance
      id: trigger_instance
      run: |
        set -o pipefail
        output=$($GITHUB_WORKSPACE/build-automation/trigger_ec2_instance.sh ${{ secrets.ALUS_SID_INSTANCE_ID }} | tee)
        ip_address=$(echo $output | tail -n 1)
        echo "{instance_ip}={$ip_address}" >> $GITHUB_OUTPUT
        echo $ip_address

  run-ci-process:
    name: Build and run unit and integration tests
    runs-on: ubuntu-latest
    needs: start-gpu-instance
    steps:
    - uses: actions/checkout@v3
    - name: CI process
      id: run-ci-process
      run: |
        echo "Instance IP to use is ${{ steps.trigger_instance.outputs.instance_ip }}"
        pwd
        ls -la
    - name: Configure AWS Credentials
      if: always()
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SID_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SID_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.ALUS_SID_INSTANCE_REGION }}
    - name: Stop GPU instance
      if: always()
      run: |
        $GITHUB_WORKSPACE/build-automation/stop_ec2_instance.sh ${{ secrets.ALUS_SID_INSTANCE_ID }} 





